<?php
/**
 * lunar
 * @author 6tail
 */

namespace com\nlf\calendar\util;

use com\nlf\calendar\Holiday;

date_default_timezone_set('PRC');
bcscale(12);

/**
 * 阳历工具，基准日期为1901年1月1日，对应农历1900年十一月十一
 * @package com\nlf\calendar\util
 */
class SolarUtil
{
  /**
   * 阳历基准年
   * @var int
   */
  public static $BASE_YEAR = 1901;

  /**
   * 阳历基准月
   * @var int
   */
  public static $BASE_MONTH = 1;

  /**
   * 阳历基准日
   * @var int
   */
  public static $BASE_DAY = 1;

  /**
   * 星期
   * @var array
   */
  public static $WEEK = array('日', '一', '二', '三', '四', '五', '六');

  /**
   * 每月天数
   * @var array
   */
  public static $DAYS_OF_MONTH = array(31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31);

  /**
   * 星座
   * @var array
   */
  public static $XING_ZUO = array('白羊', '金牛', '双子', '巨蟹', '狮子', '处女', '天秤', '天蝎', '射手', '摩羯', '水瓶', '双鱼');

  /**
   * 日期对应的节日
   * @var array
   */
  public static $FESTIVAL = array(
    '1-1' => '元旦节',
    '2-14' => '情人节',
    '3-8' => '妇女节',
    '3-12' => '植树节',
    '3-15' => '消费者权益日',
    '4-1' => '愚人节',
    '5-1' => '劳动节',
    '5-4' => '青年节',
    '6-1' => '儿童节',
    '7-1' => '建党节',
    '8-1' => '建军节',
    '9-10' => '教师节',
    '10-1' => '国庆节',
    '12-24' => '平安夜',
    '12-25' => '圣诞节'
  );

  /**
   * 几月第几个星期几对应的节日
   * @var array
   */
  public static $WEEK_FESTIVAL = array(
    '5-2-0' => '母亲节',
    '6-3-0' => '父亲节',
    '11-4-4' => '感恩节'
  );

  /**
   * 日期对应的非正式节日
   * @var array
   */
  public static $OTHER_FESTIVAL = array(
    '1-8' => array('周恩来逝世纪念日'),
    '1-10' => array('中国公安110宣传日'),
    '1-21' => array('列宁逝世纪念日'),
    '1-26' => array('国际海关日'),
    '2-2' => array('世界湿地日'),
    '2-4' => array('世界抗癌日'),
    '2-7' => array('京汉铁路罢工纪念'),
    '2-10' => array('国际气象节'),
    '2-19' => array('邓小平逝世纪念日'),
    '2-21' => array('国际母语日'),
    '2-24' => array('第三世界青年日'),
    '3-1' => array('国际海豹日'),
    '3-3' => array('全国爱耳日'),
    '3-5' => array('周恩来诞辰纪念日', '中国青年志愿者服务日'),
    '3-6' => array('世界青光眼日'),
    '3-12' => array('孙中山逝世纪念日'),
    '3-14' => array('马克思逝世纪念日'),
    '3-17' => array('国际航海日'),
    '3-18' => array('全国科技人才活动日'),
    '3-21' => array('世界森林日', '世界睡眠日'),
    '3-22' => array('世界水日'),
    '3-23' => array('世界气象日'),
    '3-24' => array('世界防治结核病日'),
    '4-2' => array('国际儿童图书日'),
    '4-7' => array('世界卫生日'),
    '4-22' => array('列宁诞辰纪念日'),
    '4-23' => array('世界图书和版权日'),
    '4-26' => array('世界知识产权日'),
    '5-3' => array('世界新闻自由日'),
    '5-5' => array('马克思诞辰纪念日'),
    '5-8' => array('世界红十字日'),
    '5-11' => array('世界肥胖日'),
    '5-23' => array('世界读书日'),
    '5-27' => array('上海解放日'),
    '5-31' => array('世界无烟日'),
    '6-5' => array('世界环境日'),
    '6-6' => array('全国爱眼日'),
    '6-8' => array('世界海洋日'),
    '6-11' => array('中国人口日'),
    '6-14' => array('世界献血日'),
    '7-1' => array('香港回归纪念日'),
    '7-7' => array('中国人民抗日战争纪念日'),
    '7-11' => array('世界人口日'),
    '8-5' => array('恩格斯逝世纪念日'),
    '8-6' => array('国际电影节'),
    '8-12' => array('国际青年日'),
    '8-22' => array('邓小平诞辰纪念日'),
    '9-3' => array('中国抗日战争胜利纪念日'),
    '9-8' => array('世界扫盲日'),
    '9-9' => array('毛泽东逝世纪念日'),
    '9-14' => array('世界清洁地球日'),
    '9-18' => array('九一八事变纪念日'),
    '9-20' => array('全国爱牙日'),
    '9-21' => array('国际和平日'),
    '9-27' => array('世界旅游日'),
    '10-4' => array('世界动物日'),
    '10-10' => array('辛亥革命纪念日'),
    '10-13' => array('中国少年先锋队诞辰日'),
    '10-25' => array('抗美援朝纪念日'),
    '11-12' => array('孙中山诞辰纪念日'),
    '11-28' => array('恩格斯诞辰纪念日'),
    '12-1' => array('世界艾滋病日'),
    '12-12' => array('西安事变纪念日'),
    '12-13' => array('南京大屠杀纪念日'),
    '12-26' => array('毛泽东诞辰纪念日')
  );

  /**
   * 是否闰年
   * @param int $year 年
   * @return bool 是否闰年
   */
  public static function isLeapYear($year)
  {
    $leap = false;
    if ($year % 4 == 0) {
      $leap = true;
    }
    if ($year % 100 == 0) {
      $leap = false;
    }
    if ($year % 400 == 0) {
      $leap = true;
    }
    return $leap;
  }

  /**
   * 获取某年某月有多少天
   * @param int $year 年
   * @param int $month 月
   * @return int 天数
   */
  public static function getDaysOfMonth($year, $month)
  {
    $d = SolarUtil::$DAYS_OF_MONTH[$month - 1];
    //公历闰年2月多一天
    if ($month == 2 && SolarUtil::isLeapYear($year)) {
      $d++;
    }
    return $d;
  }

  /**
   * 获取某年某月有多少周
   * @param int $year 年
   * @param int $month 月
   * @param int $start 星期几作为一周的开始，1234560分别代表星期一至星期天
   * @return int 周数
   */
  public static function getWeeksOfMonth($year, $month, $start)
  {
    $days = SolarUtil::getDaysOfMonth($year, $month);
    $week = date('w', strtotime($year . '-' . $month . '-1'));
    return ceil(($days + $week - $start) / count(SolarUtil::$WEEK));
  }
}

/**
 * 农历工具，基准日期为1900年十一月十一，对应阳历1901年1月1日，最远仅支持到2099年
 * @package com\nlf\calendar\util
 */
class LunarUtil
{
  public static $BASE_YEAR = 1900;
  public static $BASE_MONTH = 11;
  public static $BASE_DAY = 11;
  public static $BASE_INDEX = 0;
  public static $BASE_YEAR_GAN_ZHI_INDEX = -4;
  public static $BASE_DAY_GAN_ZHI_INDEX = 15;
  public static $BASE_MONTH_ZHI_INDEX = 2;
  public static $BASE_WEEK_INDEX = 2;
  public static $LEAP_MONTH_YEAR = array(6, 14, 19, 25, 33, 36, 38, 41, 44, 52, 55, 79, 117, 136, 147, 150, 155, 158, 185, 193);
  public static $LUNAR_MONTH = array(0x00, 0x04, 0xad, 0x08, 0x5a, 0x01, 0xd5, 0x54, 0xb4, 0x09, 0x64, 0x05, 0x59, 0x45, 0x95, 0x0a, 0xa6, 0x04, 0x55, 0x24, 0xad, 0x08, 0x5a, 0x62, 0xda, 0x04, 0xb4, 0x05, 0xb4, 0x55, 0x52, 0x0d, 0x94, 0x0a, 0x4a, 0x2a, 0x56, 0x02, 0x6d, 0x71, 0x6d, 0x01, 0xda, 0x02, 0xd2, 0x52, 0xa9, 0x05, 0x49, 0x0d, 0x2a, 0x45, 0x2b, 0x09, 0x56, 0x01, 0xb5, 0x20, 0x6d, 0x01, 0x59, 0x69, 0xd4, 0x0a, 0xa8, 0x05, 0xa9, 0x56, 0xa5, 0x04, 0x2b, 0x09, 0x9e, 0x38, 0xb6, 0x08, 0xec, 0x74, 0x6c, 0x05, 0xd4, 0x0a, 0xe4, 0x6a, 0x52, 0x05, 0x95, 0x0a, 0x5a, 0x42, 0x5b, 0x04, 0xb6, 0x04, 0xb4, 0x22, 0x6a, 0x05, 0x52, 0x75, 0xc9, 0x0a, 0x52, 0x05, 0x35, 0x55, 0x4d, 0x0a, 0x5a, 0x02, 0x5d, 0x31, 0xb5, 0x02, 0x6a, 0x8a, 0x68, 0x05, 0xa9, 0x0a, 0x8a, 0x6a, 0x2a, 0x05, 0x2d, 0x09, 0xaa, 0x48, 0x5a, 0x01, 0xb5, 0x09, 0xb0, 0x39, 0x64, 0x05, 0x25, 0x75, 0x95, 0x0a, 0x96, 0x04, 0x4d, 0x54, 0xad, 0x04, 0xda, 0x04, 0xd4, 0x44, 0xb4, 0x05, 0x54, 0x85, 0x52, 0x0d, 0x92, 0x0a, 0x56, 0x6a, 0x56, 0x02, 0x6d, 0x02, 0x6a, 0x41, 0xda, 0x02, 0xb2, 0xa1, 0xa9, 0x05, 0x49, 0x0d, 0x0a, 0x6d, 0x2a, 0x09, 0x56, 0x01, 0xad, 0x50, 0x6d, 0x01, 0xd9, 0x02, 0xd1, 0x3a, 0xa8, 0x05, 0x29, 0x85, 0xa5, 0x0c, 0x2a, 0x09, 0x96, 0x54, 0xb6, 0x08, 0x6c, 0x09, 0x64, 0x45, 0xd4, 0x0a, 0xa4, 0x05, 0x51, 0x25, 0x95, 0x0a, 0x2a, 0x72, 0x5b, 0x04, 0xb6, 0x04, 0xac, 0x52, 0x6a, 0x05, 0xd2, 0x0a, 0xa2, 0x4a, 0x4a, 0x05, 0x55, 0x94, 0x2d, 0x0a, 0x5a, 0x02, 0x75, 0x61, 0xb5, 0x02, 0x6a, 0x03, 0x61, 0x45, 0xa9, 0x0a, 0x4a, 0x05, 0x25, 0x25, 0x2d, 0x09, 0x9a, 0x68, 0xda, 0x08, 0xb4, 0x09, 0xa8, 0x59, 0x54, 0x03, 0xa5, 0x0a, 0x91, 0x3a, 0x96, 0x04, 0xad, 0xb0, 0xad, 0x04, 0xda, 0x04, 0xf4, 0x62, 0xb4, 0x05, 0x54, 0x0b, 0x44, 0x5d, 0x52, 0x0a, 0x95, 0x04, 0x55, 0x22, 0x6d, 0x02, 0x5a, 0x71, 0xda, 0x02, 0xaa, 0x05, 0xb2, 0x55, 0x49, 0x0b, 0x4a, 0x0a, 0x2d, 0x39, 0x36, 0x01, 0x6d, 0x80, 0x6d, 0x01, 0xd9, 0x02, 0xe9, 0x6a, 0xa8, 0x05, 0x29, 0x0b, 0x9a, 0x4c, 0xaa, 0x08, 0xb6, 0x08, 0xb4, 0x38, 0x6c, 0x09, 0x54, 0x75, 0xd4, 0x0a, 0xa4, 0x05, 0x45, 0x55, 0x95, 0x0a, 0x9a, 0x04, 0x55, 0x44, 0xb5, 0x04, 0x6a, 0x82, 0x6a, 0x05, 0xd2, 0x0a, 0x92, 0x6a, 0x4a, 0x05, 0x55, 0x0a, 0x2a, 0x4a, 0x5a, 0x02, 0xb5, 0x02, 0xb2, 0x31, 0x69, 0x03, 0x31, 0x73, 0xa9, 0x0a, 0x4a, 0x05, 0x2d, 0x55, 0x2d, 0x09, 0x5a, 0x01, 0xd5, 0x48, 0xb4, 0x09, 0x68, 0x89, 0x54, 0x0b, 0xa4, 0x0a, 0xa5, 0x6a, 0x95, 0x04, 0xad, 0x08, 0x6a, 0x44, 0xda, 0x04, 0x74, 0x05, 0xb0, 0x25, 0x54, 0x03);
  public static $GAN = array('', '甲', '乙', '丙', '丁', '戊', '己', '庚', '辛', '壬', '癸');
  public static $POSITION_XI = array('', '艮', '乾', '坤', '离', '巽', '艮', '乾', '坤', '离', '巽');
  public static $POSITION_YANG_GUI = array('', '坤', '坤', '兑', '乾', '艮', '坎', '离', '艮', '震', '巽');
  public static $POSITION_YIN_GUI = array('', '艮', '坎', '乾', '兑', '坤', '坤', '艮', '离', '巽', '震');
  public static $POSITION_FU = array('', '巽', '巽', '震', '震', '坎', '离', '坤', '坤', '乾', '兑');
  public static $POSITION_CAI = array('', '艮', '艮', '坤', '坤', '坎', '坎', '震', '震', '离', '离');
  public static $POSITION_TAI_DAY = array('占门碓外东南', '碓磨厕外东南', '厨灶炉外正南', '仓库门外正南', '房床厕外正南', '占门床外正南', '占碓磨外正南', '厨灶厕外西南', '仓库炉外西南', '房床门外西南', '门鸡栖外西南', '碓磨床外西南', '厨灶碓外西南', '仓库厕外西南', '房床厕外正南', '房床炉外正西', '碓磨栖外正西', '厨灶床外正西', '仓库碓外西北', '房床厕外西北', '占门炉外西北', '碓磨门外西北', '厨灶栖外西北', '仓库床外西北', '房床碓外正北', '占门厕外正北', '碓磨炉外正北', '厨灶门外正北', '仓库栖外正北', '占房床房内北', '占门碓房内北', '碓磨厕房内北', '厨灶炉房内北', '仓库门房内北', '门鸡栖外西南', '占门床房内南', '占碓磨房内南', '厨灶厕房内南', '仓库炉房内南', '房床门房内南', '门鸡栖房内东', '碓磨床房内东', '厨灶碓房内东', '仓库厕房内东', '房床炉房内东', '占大门外东北', '碓磨栖外东北', '厨灶床外东北', '仓库碓外东北', '房床厕外东北', '占门炉外东北', '碓磨门外正东', '厨灶栖外正东', '仓库床外正东', '房床碓外正东', '占门厕外正东', '碓磨炉外东南', '仓库栖外东南', '占房床外东南', '占门碓外东南');
  public static $POSITION_TAI_MONTH = array('占房床', '占户窗', '占门堂', '占厨灶', '占身床', '占床仓', '占碓磨', '占厕户', '占门房', '占房床', '占炉灶', '占房床');
  public static $ZHI = array('', '子', '丑', '寅', '卯', '辰', '巳', '午', '未', '申', '酉', '戌', '亥');
  public static $JIA_ZI = array('甲子', '乙丑', '丙寅', '丁卯', '戊辰', '己巳', '庚午', '辛未', '壬申', '癸酉', '甲戌', '乙亥', '丙子', '丁丑', '戊寅', '己卯', '庚辰', '辛巳', '壬午', '癸未', '甲申', '乙酉', '丙戌', '丁亥', '戊子', '己丑', '庚寅', '辛卯', '壬辰', '癸巳', '甲午', '乙未', '丙申', '丁酉', '戊戌', '己亥', '庚子', '辛丑', '壬寅', '癸卯', '甲辰', '乙巳', '丙午', '丁未', '戊申', '己酉', '庚戌', '辛亥', '壬子', '癸丑', '甲寅', '乙卯', '丙辰', '丁巳', '戊午', '己未', '庚申', '辛酉', '壬戌', '癸亥');
  public static $ZHI_XING = array('', '建', '除', '满', '平', '定', '执', '破', '危', '成', '收', '开', '闭');
  public static $TIAN_SHEN = array('', '青龙', '明堂', '天刑', '朱雀', '金匮', '天德', '白虎', '玉堂', '天牢', '玄武', '司命', '勾陈');
  public static $MONTH_ZHI_TIAN_SHEN_OFFSET = array(
    '子' => 4,
    '丑' => 2,
    '寅' => 0,
    '卯' => 10,
    '辰' => 8,
    '巳' => 6,
    '午' => 4,
    '未' => 2,
    '申' => 0,
    '酉' => 10,
    '戌' => 8,
    '亥' => 6
  );

  public static $TIAN_SHEN_TYPE = array(
    '青龙' => '黄道',
    '明堂' => '黄道',
    '金匮' => '黄道',
    '天德' => '黄道',
    '玉堂' => '黄道',
    '司命' => '黄道',

    '天刑' => '黑道',
    '朱雀' => '黄道',
    '白虎' => '黄道',
    '天牢' => '黄道',
    '玄武' => '黄道',
    '勾陈' => '黄道'
  );

  public static $TIAN_SHEN_TYPE_LUCK = array(
    '黄道' => '吉',
    '黑道' => '凶'
  );

  public static $PENG_ZU_GAN = array('', '甲不开仓财物耗散', '乙不栽植千株不长', '丙不修灶必见灾殃', '丁不剃头头必生疮', '戊不受田田主不祥', '己不破券二比并亡', '庚不经络织机虚张', '辛不合酱主人不尝', '壬不泱水更难提防', '癸不词讼理弱敌强');

  public static $PENG_ZU_ZHI = array('', '子不问卜自惹祸殃', '丑不冠带主不还乡', '寅不祭祀神鬼不尝', '卯不穿井水泉不香', '辰不哭泣必主重丧', '巳不远行财物伏藏', '午不苫盖屋主更张', '未不服药毒气入肠', '申不安床鬼祟入房', '酉不会客醉坐颠狂', '戌不吃犬作怪上床', '亥不嫁娶不利新郎');

  public static $NUMBER = array('零', '壹', '贰', '叁', '肆', '伍', '陆', '柒', '捌', '玖');

  public static $MONTH = array('', '正', '贰', '叁', '肆', '伍', '陆', '柒', '捌', '玖', '拾', '冬', '腊');

  public static $SEASON = array('', '孟春', '仲春', '季春', '孟夏', '仲夏', '季夏', '孟秋', '仲秋', '季秋', '孟冬', '仲冬', '季冬');

  public static $SHENG_XIAO = array('', '鼠', '牛', '虎', '兔', '龙', '蛇', '马', '羊', '猴', '鸡', '狗', '猪');

  public static $QI = array('大寒', '雨水', '春分', '谷雨', '小满', '夏至', '大暑', '处暑', '秋分', '霜降', '小雪', '冬至');

  public static $JIE = array('小寒', '立春', '惊蛰', '清明', '立夏', '芒种', '小暑', '立秋', '白露', '寒露', '立冬', '大雪');

  public static $DAY = array('', '初一', '初二', '初三', '初四', '初五', '初六', '初七', '初八', '初九', '初十', '十一', '十二', '十三', '十四', '十五', '十六', '十七', '十八', '十九', '二十', '廿一', '廿二', '廿三', '廿四', '廿五', '廿六', '廿七', '廿八', '廿九', '三十');

  /**
   * 农历日期对应的节日
   * @var array
   */
  public static $FESTIVAL = array(
    '1-1' => '春节',
    '1-15' => '元宵节',
    '2-2' => '龙头节',
    '5-5' => '端午节',
    '7-7' => '七夕节',
    '8-15' => '中秋节',
    '9-9' => '重阳节',
    '12-8' => '腊八节',
    '12-30' => '除夕'
  );

  /**
   * 农历日期对应的非正式节日
   * @var array
   */
  public static $OTHER_FESTIVAL = array(
    '1-1' => array('弥勒佛圣诞'),
    '1-8' => array('五殿阎罗天子诞'),
    '1-9' => array('玉皇上帝诞'),
    '2-1' => array('一殿秦广王诞'),
    '2-2' => array('福德土地正神诞'),
    '2-3' => array('文昌帝君诞'),
    '2-6' => array('东华帝君诞'),
    '2-8' => array('释迦牟尼佛出家'),
    '2-15' => array('释迦牟尼佛般涅槃'),
    '2-17' => array('东方杜将军诞'),
    '2-18' => array('至圣先师孔子讳辰'),
    '2-19' => array('观音大士诞'),
    '2-21' => array('普贤菩萨诞'),
    '3-1' => array('二殿楚江王诞'),
    '3-3' => array('玄天上帝诞'),
    '3-8' => array('六殿卞城王诞'),
    '3-15' => array('昊天上帝诞'),
    '3-16' => array('准提菩萨诞'),
    '3-19' => array('中岳大帝诞'),
    '3-20' => array('子孙娘娘诞'),
    '3-27' => array('七殿泰山王诞'),
    '3-28' => array('苍颉至圣先师诞'),
    '4-1' => array('八殿都市王诞'),
    '4-4' => array('文殊菩萨诞'),
    '4-8' => array('释迦牟尼佛诞'),
    '4-14' => array('纯阳祖师诞'),
    '4-15' => array('钟离祖师诞'),
    '4-17' => array('十殿转轮王诞'),
    '4-18' => array('紫徽大帝诞'),
    '4-20' => array('眼光圣母诞'),
    '5-1' => array('南极长生大帝诞'),
    '5-8' => array('南方五道诞'),
    '5-11' => array('天下都城隍诞'),
    '5-12' => array('炳灵公诞'),
    '5-13' => array('关圣降'),
    '5-16' => array('天地元气造化万物之辰'),
    '5-18' => array('张天师诞'),
    '5-22' => array('孝娥神诞'),
    '6-19' => array('观世音菩萨成道日'),
    '6-24' => array('关帝诞'),
    '7-7' => array('魁星诞'),
    '7-13' => array('长真谭真人诞', '大势至菩萨诞'),
    '7-15' => array('中元节'),
    '7-18' => array('西王母诞'),
    '7-19' => array('太岁诞'),
    '7-22' => array('增福财神诞'),
    '7-29' => array('杨公忌'),
    '7-30' => array('地藏菩萨诞'),
    '8-1' => array('许真君诞'),
    '8-3' => array('司命灶君诞'),
    '8-5' => array('雷声大帝诞'),
    '8-10' => array('北斗大帝诞'),
    '8-12' => array('西方五道诞'),
    '8-16' => array('天曹掠刷真君降'),
    '8-18' => array('天人兴福之辰'),
    '8-23' => array('汉恒候张显王诞'),
    '8-24' => array('灶君夫人诞'),
    '8-29' => array('至圣先师孔子诞'),
    '9-1' => array('北斗九星降世'),
    '9-3' => array('五瘟神诞'),
    '9-9' => array('酆都大帝诞'),
    '9-13' => array('孟婆尊神诞'),
    '9-17' => array('金龙四大王诞'),
    '9-19' => array('观世音菩萨出家'),
    '9-30' => array('药师琉璃光佛诞'),
    '10-1' => array('寒衣节'),
    '10-3' => array('三茅诞'),
    '10-5' => array('达摩祖师诞'),
    '10-8' => array('佛涅槃日'),
    '10-15' => array('下元节'),
    '11-4' => array('至圣先师孔子诞'),
    '11-6' => array('西岳大帝诞'),
    '11-11' => array('太乙救苦天尊诞'),
    '11-17' => array('阿弥陀佛诞'),
    '11-19' => array('太阳日宫诞'),
    '11-23' => array('张仙诞'),
    '11-26' => array('北方五道诞'),
    '12-8' => array('释迦如来成佛之辰'),
    '12-16' => array('南岳大帝诞'),
    '12-21' => array('天猷上帝诞'),
    '12-23' => array('小年'),
    '12-24' => array('子时灶君上天朝玉帝'),
    '12-29' => array('华严菩萨诞')
  );

  public static $XIU = array(
    '申1' => '毕',
    '申2' => '翼',
    '申3' => '箕',
    '申4' => '奎',
    '申5' => '鬼',
    '申6' => '氐',
    '申0' => '虚',

    '子1' => '毕',
    '子2' => '翼',
    '子3' => '箕',
    '子4' => '奎',
    '子5' => '鬼',
    '子6' => '氐',
    '子0' => '虚',

    '辰1' => '毕',
    '辰2' => '翼',
    '辰3' => '箕',
    '辰4' => '奎',
    '辰5' => '鬼',
    '辰6' => '氐',
    '辰0' => '虚',

    '巳1' => '危',
    '巳2' => '觜',
    '巳3' => '轸',
    '巳4' => '斗',
    '巳5' => '娄',
    '巳6' => '柳',
    '巳0' => '房',

    '酉1' => '危',
    '酉2' => '觜',
    '酉3' => '轸',
    '酉4' => '斗',
    '酉5' => '娄',
    '酉6' => '柳',
    '酉0' => '房',

    '丑1' => '危',
    '丑2' => '觜',
    '丑3' => '轸',
    '丑4' => '斗',
    '丑5' => '娄',
    '丑6' => '柳',
    '丑0' => '房',

    '寅1' => '心',
    '寅2' => '室',
    '寅3' => '参',
    '寅4' => '角',
    '寅5' => '牛',
    '寅6' => '胃',
    '寅0' => '星',

    '午1' => '心',
    '午2' => '室',
    '午3' => '参',
    '午4' => '角',
    '午5' => '牛',
    '午6' => '胃',
    '午0' => '星',

    '戌1' => '心',
    '戌2' => '室',
    '戌3' => '参',
    '戌4' => '角',
    '戌5' => '牛',
    '戌6' => '胃',
    '戌0' => '星',

    '亥1' => '张',
    '亥2' => '尾',
    '亥3' => '壁',
    '亥4' => '井',
    '亥5' => '亢',
    '亥6' => '女',
    '亥0' => '昴',

    '卯1' => '张',
    '卯2' => '尾',
    '卯3' => '壁',
    '卯4' => '井',
    '卯5' => '亢',
    '卯6' => '女',
    '卯0' => '昴',

    '未1' => '张',
    '未2' => '尾',
    '未3' => '壁',
    '未4' => '井',
    '未5' => '亢',
    '未6' => '女',
    '未0' => '昴'
  );

  public static $XIU_LUCK = array(
    '角' => '吉',
    '亢' => '凶',
    '氐' => '凶',
    '房' => '吉',
    '心' => '凶',
    '尾' => '吉',
    '箕' => '吉',
    '斗' => '吉',
    '牛' => '凶',
    '女' => '凶',
    '虚' => '凶',
    '危' => '凶',
    '室' => '吉',
    '壁' => '吉',
    '奎' => '凶',
    '娄' => '吉',
    '胃' => '吉',
    '昴' => '凶',
    '毕' => '吉',
    '觜' => '凶',
    '参' => '吉',
    '井' => '吉',
    '鬼' => '凶',
    '柳' => '凶',
    '星' => '凶',
    '张' => '吉',
    '翼' => '凶',
    '轸' => '吉'
  );

  public static $XIU_SONG = array(
    '角' => '角星造作主荣昌，外进田财及女郎，嫁娶婚姻出贵子，文人及第见君王，惟有埋葬不可用，三年之后主瘟疫，起工修筑坟基地，堂前立见主人凶。',
    '亢' => '亢星造作长房当，十日之中主有殃，田地消磨官失职，接运定是虎狼伤，嫁娶婚姻用此日，儿孙新妇守空房，埋葬若还用此日，当时害祸主重伤。',
    '氐' => '氐星造作主灾凶，费尽田园仓库空，埋葬不可用此日，悬绳吊颈祸重重，若是婚姻离别散，夜招浪子入房中，行船必定遭沉没，更生聋哑子孙穷。',
    '房' => '房星造作田园进，钱财牛马遍山岗，更招外处田庄宅，荣华富贵福禄康，埋葬若然用此日，高官进职拜君王，嫁娶嫦娥至月殿，三年抱子至朝堂。',
    '心' => '心星造作大为凶，更遭刑讼狱囚中，忤逆官非宅产退，埋葬卒暴死相从，婚姻若是用此日，子死儿亡泪满胸，三年之内连遭祸，事事教君没始终。',
    '尾' => '尾星造作主天恩，富贵荣华福禄增，招财进宝兴家宅，和合婚姻贵子孙，埋葬若能依此日，男清女正子孙兴，开门放水招田宅，代代公侯远播名。',
    '箕' => '箕星造作主高强，岁岁年年大吉昌，埋葬修坟大吉利，田蚕牛马遍山岗，开门放水招田宅，箧满金银谷满仓，福荫高官加禄位，六亲丰禄乐安康。',
    '斗' => '斗星造作主招财，文武官员位鼎台，田宅家财千万进，坟堂修筑贵富来，开门放水招牛马，旺蚕男女主和谐，遇此吉宿来照护，时支福庆永无灾。',
    '牛' => '牛星造作主灾危，九横三灾不可推，家宅不安人口退，田蚕不利主人衰，嫁娶婚姻皆自损，金银财谷渐无之，若是开门并放水，牛猪羊马亦伤悲。',
    '女' => '女星造作损婆娘，兄弟相嫌似虎狼，埋葬生灾逢鬼怪，颠邪疾病主瘟惶，为事遭官财失散，泻利留连不可当，开门放水用此日，全家财散主离乡。',
    '虚' => '虚星造作主灾殃，男女孤眠不一双，内乱风声无礼节，儿孙媳妇伴人床，开门放水遭灾祸，虎咬蛇伤又卒亡，三三五五连年病，家破人亡不可当。',
    '危' => '危星不可造高楼，自遭刑吊见血光，三年孩子遭水厄，后生出外永不还，埋葬若还逢此日，周年百日取高堂，三年两载一悲伤，开门放水到官堂。',
    '室' => '室星修造进田牛，儿孙代代近王侯，家贵荣华天上至，寿如彭祖八千秋，开门放水招财帛，和合婚姻生贵儿，埋葬若能依此日，门庭兴旺福无休。',
    '壁' => '壁星造作主增财，丝蚕大熟福滔天，奴婢自来人口进，开门放水出英贤，埋葬招财官品进，家中诸事乐陶然，婚姻吉利主贵子，早播名誉著祖鞭。',
    '奎' => '奎星造作得祯祥，家内荣和大吉昌，若是埋葬阴卒死，当年定主两三伤，看看军令刑伤到，重重官事主瘟惶，开门放水遭灾祸，三年两次损儿郎。',
    '娄' => '娄星修造起门庭，财旺家和事事兴，外进钱财百日进，一家兄弟播高名，婚姻进益生贵子，玉帛金银箱满盈，放水开门皆吉利，男荣女贵寿康宁。',
    '胃' => '胃星造作事如何，家贵荣华喜气多，埋葬贵临官禄位，夫妇齐眉永保康，婚姻遇此家富贵，三灾九祸不逢他，从此门前多吉庆，儿孙代代拜金阶。',
    '昴' => '昴星造作进田牛，埋葬官灾不得休，重丧二日三人死，尽卖田园不记增，开门放水招灾祸，三岁孩儿白了头，婚姻不可逢此日，死别生离是可愁。',
    '毕' => '毕星造作主光前，买得田园有余钱，埋葬此日添官职，田蚕大熟永丰年，开门放水多吉庆，合家人口得安然，婚姻若得逢此日，生得孩儿福寿全。',
    '觜' => '觜星造作有徒刑，三年必定主伶丁，埋葬卒死多因此，取定寅年使杀人，三丧不止皆由此，一人药毒二人身，家门田地皆退败，仓库金银化作尘。',
    '参' => '参星造作旺人家，文星照耀大光华，只因造作田财旺，埋葬招疾哭黄沙，开门放水加官职，房房子孙见田加，婚姻许遁遭刑克，男女朝开幕落花。',
    '井' => '井星造作旺蚕田，金榜题名第一光，埋葬须防惊卒死，狂颠风疾入黄泉，开门放水招财帛，牛马猪羊旺莫言，贵人田塘来入宅，儿孙兴旺有余钱。',
    '鬼' => '鬼星起造卒人亡，堂前不见主人郎，埋葬此日官禄至，儿孙代代近君王，开门放水须伤死，嫁娶夫妻不久长，修土筑墙伤产女，手扶双女泪汪汪。',
    '柳' => '柳星造作主遭官，昼夜偷闭不暂安，埋葬瘟惶多疾病，田园退尽守冬寒，开门放水遭聋瞎，腰驼背曲似弓弯，更有棒刑宜谨慎，妇人随客走盘桓。',
    '星' => '星宿日好造新房，进职加官近帝王，不可埋葬并放水，凶星临位女人亡，生离死别无心恋，要自归休别嫁郎，孔子九曲殊难度，放水开门天命伤。',
    '张' => '张星日好造龙轩，年年并见进庄田，埋葬不久升官职，代代为官近帝前，开门放水招财帛，婚姻和合福绵绵，田蚕人满仓库满，百般顺意自安然。',
    '翼' => '翼星不利架高堂，三年二载见瘟惶，埋葬若还逢此日，子孙必定走他乡，婚姻此日不宜利，归家定是不相当，开门放水家须破，少女恋花贪外郎。',
    '轸' => '轸星临水造龙宫，代代为官受皇封，富贵荣华增寿禄，库满仓盈自昌隆，埋葬文昌来照助，宅舍安宁不见凶，更有为官沾帝宠，婚姻龙子入龙宫。'
  );

  public static $SHOU = array(
    '东' => '青龙',
    '南' => '朱雀',
    '西' => '白虎',
    '北' => '玄武'
  );

  public static $CHONG = array('', '午', '未', '申', '酉', '戌', '亥', '子', '丑', '寅', '卯', '辰', '巳');

  public static $CHONG_GAN = array('', '戊', '己', '庚', '辛', '壬', '癸', '甲', '乙', '丙', '丁');

  public static $CHONG_GAN_BAD = array(
    '庚' => '甲',
    '辛' => '乙',
    '壬' => '丙',
    '癸' => '丁'
  );

  public static $CHONG_GAN_TIE = array('', '己', '戊', '辛', '庚', '癸', '壬', '乙', '甲', '丁', '丙');

  public static $CHONG_GAN_TIE_GOOD = array(
    '甲' => '己',
    '丙' => '辛',
    '戊' => '癸',
    '庚' => '乙',
    '壬' => '丁'
  );

  public static $SHA = array(
    '子' => '南',
    '丑' => '东',
    '寅' => '北',
    '卯' => '西',
    '辰' => '南',
    '巳' => '东',
    '午' => '北',
    '未' => '西',
    '申' => '南',
    '酉' => '东',
    '戌' => '北',
    '亥' => '西'
  );

  public static $POSITION_DESC = array(
    '坎' => '正北',
    '艮' => '东北',
    '震' => '正东',
    '巽' => '东南',
    '离' => '正南',
    '坤' => '西南',
    '兑' => '正西',
    '乾' => '西北'
  );

  public static $GONG = array(
    '角' => '东',
    '井' => '南',
    '奎' => '西',
    '斗' => '北',
    '亢' => '东',
    '鬼' => '南',
    '娄' => '西',
    '牛' => '北',
    '氐' => '南',
    '柳' => '南',
    '胃' => '西',
    '女' => '北',
    '房' => '东',
    '星' => '南',
    '昴' => '西',
    '虚' => '北',
    '心' => '东',
    '张' => '南',
    '毕' => '西',
    '危' => '北',
    '尾' => '东',
    '翼' => '南',
    '觜' => '西',
    '室' => '北',
    '箕' => '东',
    '轸' => '南',
    '参' => '西',
    '壁' => '北'
  );

  public static $ZHENG = array(
    '角' => '木',
    '井' => '木',
    '奎' => '木',
    '斗' => '木',
    '亢' => '金',
    '鬼' => '金',
    '娄' => '金',
    '牛' => '金',
    '氐' => '土',
    '柳' => '土',
    '胃' => '土',
    '女' => '土',
    '房' => '日',
    '星' => '日',
    '昴' => '日',
    '虚' => '日',
    '心' => '月',
    '张' => '月',
    '毕' => '月',
    '危' => '月',
    '尾' => '火',
    '翼' => '火',
    '觜' => '火',
    '室' => '火',
    '箕' => '水',
    '轸' => '水',
    '参' => '水',
    '壁' => '水'
  );

  public static $ANIMAL = array(
    '角' => '蛟',
    '斗' => '獬',
    '奎' => '狼',
    '井' => '犴',
    '亢' => '龙',
    '牛' => '牛',
    '娄' => '狗',
    '鬼' => '羊',
    '女' => '蝠',
    '氐' => '貉',
    '胃' => '彘',
    '柳' => '獐',
    '房' => '兔',
    '虚' => '鼠',
    '昴' => '鸡',
    '星' => '马',
    '心' => '狐',
    '危' => '燕',
    '毕' => '乌',
    '张' => '鹿',
    '尾' => '虎',
    '室' => '猪',
    '觜' => '猴',
    '翼' => '蛇',
    '箕' => '豹',
    '壁' => '獝',
    '参' => '猿',
    '轸' => '蚓'
  );

  public static $WU_XING_GAN = array(
    '甲' => '木',
    '乙' => '木',
    '丙' => '火',
    '丁' => '火',
    '戊' => '土',
    '己' => '土',
    '庚' => '金',
    '辛' => '金',
    '壬' => '水',
    '癸' => '水'
  );

  public static $WU_XING_ZHI = array(
    '寅' => '木',
    '卯' => '木',
    '巳' => '火',
    '午' => '火',
    '辰' => '土',
    '丑' => '土',
    '戌' => '土',
    '未' => '土',
    '申' => '金',
    '酉' => '金',
    '亥' => '水',
    '子' => '水'
  );

  public static $NAYIN = array(
    '甲子' => '海中金',
    '甲午' => '沙中金',
    '丙寅' => '炉中火',
    '丙申' => '山下火',
    '戊辰' => '大林木',
    '戊戌' => '平地木',
    '庚午' => '路旁土',
    '庚子' => '壁上土',
    '壬申' => '剑锋金',
    '壬寅' => '金箔金',
    '甲戌' => '山头火',
    '甲辰' => '覆灯火',
    '丙子' => '涧下水',
    '丙午' => '天河水',
    '戊寅' => '城头土',
    '戊申' => '大驿土',
    '庚辰' => '白蜡金',
    '庚戌' => '钗钏金',
    '壬午' => '杨柳木',
    '壬子' => '桑柘木',
    '甲申' => '泉中水',
    '甲寅' => '大溪水',
    '丙戌' => '屋上土',
    '丙辰' => '沙中土',
    '戊子' => '霹雳火',
    '戊午' => '天上火',
    '庚寅' => '松柏木',
    '庚申' => '石榴木',
    '壬辰' => '长流水',
    '壬戌' => '大海水',
    '乙丑' => '海中金',
    '乙未' => '沙中金',
    '丁卯' => '炉中火',
    '丁酉' => '山下火',
    '己巳' => '大林木',
    '己亥' => '平地木',
    '辛未' => '路旁土',
    '辛丑' => '壁上土',
    '癸酉' => '剑锋金',
    '癸卯' => '金箔金',
    '乙亥' => '山头火',
    '乙巳' => '覆灯火',
    '丁丑' => '涧下水',
    '丁未' => '天河水',
    '己卯' => '城头土',
    '己酉' => '大驿土',
    '辛巳' => '白蜡金',
    '辛亥' => '钗钏金',
    '癸未' => '杨柳木',
    '癸丑' => '桑柘木',
    '乙酉' => '泉中水',
    '乙卯' => '大溪水',
    '丁亥' => '屋上土',
    '丁巳' => '沙中土',
    '己丑' => '霹雳火',
    '己未' => '天上火',
    '辛卯' => '松柏木',
    '辛酉' => '石榴木',
    '癸巳' => '长流水',
    '癸亥' => '大海水'
  );

  public static $SHI_SHEN_GAN = array(
    '甲甲' => '比肩',
    '甲乙' => '劫财',
    '甲丙' => '食神',
    '甲丁' => '伤官',
    '甲戊' => '偏财',
    '甲己' => '正财',
    '甲庚' => '七杀',
    '甲辛' => '正官',
    '甲壬' => '偏印',
    '甲癸' => '正印',
    '乙乙' => '比肩',
    '乙甲' => '劫财',
    '乙丁' => '食神',
    '乙丙' => '伤官',
    '乙己' => '偏财',
    '乙戊' => '正财',
    '乙辛' => '七杀',
    '乙庚' => '正官',
    '乙癸' => '偏印',
    '乙壬' => '正印',
    '丙丙' => '比肩',
    '丙丁' => '劫财',
    '丙戊' => '食神',
    '丙己' => '伤官',
    '丙庚' => '偏财',
    '丙辛' => '正财',
    '丙壬' => '七杀',
    '丙癸' => '正官',
    '丙甲' => '偏印',
    '丙乙' => '正印',
    '丁丁' => '比肩',
    '丁丙' => '劫财',
    '丁己' => '食神',
    '丁戊' => '伤官',
    '丁辛' => '偏财',
    '丁庚' => '正财',
    '丁癸' => '七杀',
    '丁壬' => '正官',
    '丁乙' => '偏印',
    '丁甲' => '正印',
    '戊戊' => '比肩',
    '戊己' => '劫财',
    '戊庚' => '食神',
    '戊辛' => '伤官',
    '戊壬' => '偏财',
    '戊癸' => '正财',
    '戊甲' => '七杀',
    '戊乙' => '正官',
    '戊丙' => '偏印',
    '戊丁' => '正印',
    '己己' => '比肩',
    '己戊' => '劫财',
    '己辛' => '食神',
    '己庚' => '伤官',
    '己癸' => '偏财',
    '己壬' => '正财',
    '己乙' => '七杀',
    '己甲' => '正官',
    '己丁' => '偏印',
    '己丙' => '正印',
    '庚庚' => '比肩',
    '庚辛' => '劫财',
    '庚壬' => '食神',
    '庚癸' => '伤官',
    '庚甲' => '偏财',
    '庚乙' => '正财',
    '庚丙' => '七杀',
    '庚丁' => '正官',
    '庚戊' => '偏印',
    '庚己' => '正印',
    '辛辛' => '比肩',
    '辛庚' => '劫财',
    '辛癸' => '食神',
    '辛壬' => '伤官',
    '辛乙' => '偏财',
    '辛甲' => '正财',
    '辛丁' => '七杀',
    '辛丙' => '正官',
    '辛己' => '偏印',
    '辛戊' => '正印',
    '壬壬' => '比肩',
    '壬癸' => '劫财',
    '壬甲' => '食神',
    '壬乙' => '伤官',
    '壬丙' => '偏财',
    '壬丁' => '正财',
    '壬戊' => '七杀',
    '壬己' => '正官',
    '壬庚' => '偏印',
    '壬辛' => '正印',
    '癸癸' => '比肩',
    '癸壬' => '劫财',
    '癸乙' => '食神',
    '癸甲' => '伤官',
    '癸丁' => '偏财',
    '癸丙' => '正财',
    '癸己' => '七杀',
    '癸戊' => '正官',
    '癸辛' => '偏印',
    '癸庚' => '正印'
  );

  public static $SHI_SHEN_ZHI = array(
    '甲子癸' => '正印',
    '甲丑癸' => '正印',
    '甲丑己' => '正财',
    '甲丑辛' => '正官',
    '甲寅丙' => '食神',
    '甲寅甲' => '比肩',
    '甲寅戊' => '偏财',
    '甲卯乙' => '劫财',
    '甲辰乙' => '劫财',
    '甲辰戊' => '偏财',
    '甲辰癸' => '正印',
    '甲巳戊' => '偏财',
    '甲巳丙' => '食神',
    '甲巳庚' => '七杀',
    '甲午丁' => '伤官',
    '甲午己' => '正财',
    '甲未乙' => '劫财',
    '甲未己' => '正财',
    '甲未丁' => '伤官',
    '甲申戊' => '偏财',
    '甲申庚' => '七杀',
    '甲申壬' => '偏印',
    '甲酉辛' => '正官',
    '甲戌辛' => '正官',
    '甲戌戊' => '偏财',
    '甲戌丁' => '伤官',
    '甲亥壬' => '偏印',
    '甲亥甲' => '比肩',
    '乙子癸' => '偏印',
    '乙丑癸' => '偏印',
    '乙丑己' => '偏财',
    '乙丑辛' => '七杀',
    '乙寅丙' => '伤官',
    '乙寅甲' => '劫财',
    '乙寅戊' => '正财',
    '乙卯乙' => '比肩',
    '乙辰乙' => '比肩',
    '乙辰戊' => '正财',
    '乙辰癸' => '偏印',
    '乙巳戊' => '正财',
    '乙巳丙' => '伤官',
    '乙巳庚' => '正官',
    '乙午丁' => '食神',
    '乙午己' => '偏财',
    '乙未乙' => '比肩',
    '乙未己' => '偏财',
    '乙未丁' => '食神',
    '乙申戊' => '正财',
    '乙申庚' => '正官',
    '乙申壬' => '正印',
    '乙酉辛' => '七杀',
    '乙戌辛' => '七杀',
    '乙戌戊' => '正财',
    '乙戌丁' => '食神',
    '乙亥壬' => '正印',
    '乙亥甲' => '劫财',
    '丙子癸' => '正官',
    '丙丑癸' => '正官',
    '丙丑己' => '伤官',
    '丙丑辛' => '正财',
    '丙寅丙' => '比肩',
    '丙寅甲' => '偏印',
    '丙寅戊' => '食神',
    '丙卯乙' => '正印',
    '丙辰乙' => '正印',
    '丙辰戊' => '食神',
    '丙辰癸' => '正官',
    '丙巳戊' => '食神',
    '丙巳丙' => '比肩',
    '丙巳庚' => '偏财',
    '丙午丁' => '劫财',
    '丙午己' => '伤官',
    '丙未乙' => '正印',
    '丙未己' => '伤官',
    '丙未丁' => '劫财',
    '丙申戊' => '食神',
    '丙申庚' => '偏财',
    '丙申壬' => '七杀',
    '丙酉辛' => '正财',
    '丙戌辛' => '正财',
    '丙戌戊' => '食神',
    '丙戌丁' => '劫财',
    '丙亥壬' => '七杀',
    '丙亥甲' => '偏印',
    '丁子癸' => '七杀',
    '丁丑癸' => '七杀',
    '丁丑己' => '食神',
    '丁丑辛' => '偏财',
    '丁寅丙' => '劫财',
    '丁寅甲' => '正印',
    '丁寅戊' => '伤官',
    '丁卯乙' => '偏印',
    '丁辰乙' => '偏印',
    '丁辰戊' => '伤官',
    '丁辰癸' => '七杀',
    '丁巳戊' => '伤官',
    '丁巳丙' => '劫财',
    '丁巳庚' => '正财',
    '丁午丁' => '比肩',
    '丁午己' => '食神',
    '丁未乙' => '偏印',
    '丁未己' => '食神',
    '丁未丁' => '比肩',
    '丁申戊' => '伤官',
    '丁申庚' => '正财',
    '丁申壬' => '正官',
    '丁酉辛' => '偏财',
    '丁戌辛' => '偏财',
    '丁戌戊' => '伤官',
    '丁戌丁' => '比肩',
    '丁亥壬' => '正官',
    '丁亥甲' => '正印',
    '戊子癸' => '正财',
    '戊丑癸' => '正财',
    '戊丑己' => '劫财',
    '戊丑辛' => '伤官',
    '戊寅丙' => '偏印',
    '戊寅甲' => '七杀',
    '戊寅戊' => '比肩',
    '戊卯乙' => '正官',
    '戊辰乙' => '正官',
    '戊辰戊' => '比肩',
    '戊辰癸' => '正财',
    '戊巳戊' => '比肩',
    '戊巳丙' => '偏印',
    '戊巳庚' => '食神',
    '戊午丁' => '正印',
    '戊午己' => '劫财',
    '戊未乙' => '正官',
    '戊未己' => '劫财',
    '戊未丁' => '正印',
    '戊申戊' => '比肩',
    '戊申庚' => '食神',
    '戊申壬' => '偏财',
    '戊酉辛' => '伤官',
    '戊戌辛' => '伤官',
    '戊戌戊' => '比肩',
    '戊戌丁' => '正印',
    '戊亥壬' => '偏财',
    '戊亥甲' => '七杀',
    '己子癸' => '偏财',
    '己丑癸' => '偏财',
    '己丑己' => '比肩',
    '己丑辛' => '食神',
    '己寅丙' => '正印',
    '己寅甲' => '正官',
    '己寅戊' => '劫财',
    '己卯乙' => '七杀',
    '己辰乙' => '七杀',
    '己辰戊' => '劫财',
    '己辰癸' => '偏财',
    '己巳戊' => '劫财',
    '己巳丙' => '正印',
    '己巳庚' => '伤官',
    '己午丁' => '偏印',
    '己午己' => '比肩',
    '己未乙' => '七杀',
    '己未己' => '比肩',
    '己未丁' => '偏印',
    '己申戊' => '劫财',
    '己申庚' => '伤官',
    '己申壬' => '正财',
    '己酉辛' => '食神',
    '己戌辛' => '食神',
    '己戌戊' => '劫财',
    '己戌丁' => '偏印',
    '己亥壬' => '正财',
    '己亥甲' => '正官',
    '庚子癸' => '伤官',
    '庚丑癸' => '伤官',
    '庚丑己' => '正印',
    '庚丑辛' => '劫财',
    '庚寅丙' => '七杀',
    '庚寅甲' => '偏财',
    '庚寅戊' => '偏印',
    '庚卯乙' => '正财',
    '庚辰乙' => '正财',
    '庚辰戊' => '偏印',
    '庚辰癸' => '伤官',
    '庚巳戊' => '偏印',
    '庚巳丙' => '七杀',
    '庚巳庚' => '比肩',
    '庚午丁' => '正官',
    '庚午己' => '正印',
    '庚未乙' => '正财',
    '庚未己' => '正印',
    '庚未丁' => '正官',
    '庚申戊' => '偏印',
    '庚申庚' => '比肩',
    '庚申壬' => '食神',
    '庚酉辛' => '劫财',
    '庚戌辛' => '劫财',
    '庚戌戊' => '偏印',
    '庚戌丁' => '正官',
    '庚亥壬' => '食神',
    '庚亥甲' => '偏财',
    '辛子癸' => '食神',
    '辛丑癸' => '食神',
    '辛丑己' => '偏印',
    '辛丑辛' => '比肩',
    '辛寅丙' => '正官',
    '辛寅甲' => '正财',
    '辛寅戊' => '正印',
    '辛卯乙' => '偏财',
    '辛辰乙' => '偏财',
    '辛辰戊' => '正印',
    '辛辰癸' => '食神',
    '辛巳戊' => '正印',
    '辛巳丙' => '正官',
    '辛巳庚' => '劫财',
    '辛午丁' => '七杀',
    '辛午己' => '偏印',
    '辛未乙' => '偏财',
    '辛未己' => '偏印',
    '辛未丁' => '七杀',
    '辛申戊' => '正印',
    '辛申庚' => '劫财',
    '辛申壬' => '伤官',
    '辛酉辛' => '比肩',
    '辛戌辛' => '比肩',
    '辛戌戊' => '正印',
    '辛戌丁' => '七杀',
    '辛亥壬' => '伤官',
    '辛亥甲' => '正财',
    '壬子癸' => '劫财',
    '壬丑癸' => '劫财',
    '壬丑己' => '正官',
    '壬丑辛' => '正印',
    '壬寅丙' => '偏财',
    '壬寅甲' => '食神',
    '壬寅戊' => '七杀',
    '壬卯乙' => '伤官',
    '壬辰乙' => '伤官',
    '壬辰戊' => '七杀',
    '壬辰癸' => '劫财',
    '壬巳戊' => '七杀',
    '壬巳丙' => '偏财',
    '壬巳庚' => '偏印',
    '壬午丁' => '正财',
    '壬午己' => '正官',
    '壬未乙' => '伤官',
    '壬未己' => '正官',
    '壬未丁' => '正财',
    '壬申戊' => '七杀',
    '壬申庚' => '偏印',
    '壬申壬' => '比肩',
    '壬酉辛' => '正印',
    '壬戌辛' => '正印',
    '壬戌戊' => '七杀',
    '壬戌丁' => '正财',
    '壬亥壬' => '比肩',
    '壬亥甲' => '食神',
    '癸子癸' => '比肩',
    '癸丑癸' => '比肩',
    '癸丑己' => '七杀',
    '癸丑辛' => '偏印',
    '癸寅丙' => '正财',
    '癸寅甲' => '伤官',
    '癸寅戊' => '正官',
    '癸卯乙' => '食神',
    '癸辰乙' => '食神',
    '癸辰戊' => '正官',
    '癸辰癸' => '比肩',
    '癸巳戊' => '正官',
    '癸巳丙' => '正财',
    '癸巳庚' => '正印',
    '癸午丁' => '偏财',
    '癸午己' => '七杀',
    '癸未乙' => '食神',
    '癸未己' => '七杀',
    '癸未丁' => '偏财',
    '癸申戊' => '正官',
    '癸申庚' => '正印',
    '癸申壬' => '劫财',
    '癸酉辛' => '偏印',
    '癸戌辛' => '偏印',
    '癸戌戊' => '正官',
    '癸戌丁' => '偏财',
    '癸亥壬' => '劫财',
    '癸亥甲' => '伤官'
  );

  public static $ZHI_HIDE_GAN = array(
    '子' => array('癸'),
    '丑' => array('己', '癸', '辛'),
    '寅' => array('甲', '丙', '戊'),
    '卯' => array('乙'),
    '辰' => array('戊', '乙', '癸'),
    '巳' => array('丙', '庚', '戊'),
    '午' => array('丁', '己'),
    '未' => array('己', '丁', '乙'),
    '申' => array('庚', '壬', '戊'),
    '酉' => array('辛'),
    '戌' => array('戊', '辛', '丁'),
    '亥' => array('壬', '甲')
  );

  /**
   * 计算指定日期距离基准日期的天数
   * @param int $year 农历年
   * @param int $month 农历月
   * @param int $day 农历日
   * @return int 距离天数
   */
  public static function computeAddDays($year, $month, $day)
  {
    $y = LunarUtil::$BASE_YEAR;
    $m = LunarUtil::$BASE_MONTH;
    $diff = LunarUtil::getDaysOfMonth($y, $m) - LunarUtil::$BASE_DAY;
    $m = LunarUtil::nextMonth($y, $m);
    while (true) {
      $diff += LunarUtil::getDaysOfMonth($y, $m);
      $m = LunarUtil::nextMonth($y, $m);
      if ($m === 1) {
        $y++;
      }
      if ($y === $year && $m === $month) {
        $diff += $day;
        break;
      }
    }
    return $diff;
  }

  /**
   * 获取指定年份的闰月，1代表闰1月，0代表无闰月
   * @param int $year 农历年
   * @return int 闰月数字，1代表闰1月，0代表无闰月
   */
  public static function getLeapMonth($year)
  {
    $index = $year - LunarUtil::$BASE_YEAR + LunarUtil::$BASE_INDEX;
    $v = LunarUtil::$LUNAR_MONTH[2 * $index + 1];
    $v = ($v >> 4) & 0x0F;
    return $v;
  }

  /**
   * 获取指定年月的下一个月是第几月，1到12，闰月为负数
   * @param int $y 农历年
   * @param int $m 农历月，闰月为负数
   * @return int 1到12，闰月为负数
   */
  public static function nextMonth($y, $m)
  {
    $n = abs($m) + 1;
    if ($m > 0) {
      $index = $y - LunarUtil::$BASE_YEAR + LunarUtil::$BASE_INDEX;
      $v = LunarUtil::$LUNAR_MONTH[2 * $index + 1];
      $v = ($v >> 4) & 0x0F;
      if ($v === $m) {
        $n = -$m;
      }
    }
    if ($n == 13) {
      $n = 1;
    }
    return (int)$n;
  }

  /**
   * 获取某年某月有多少天
   * @param int $year 农历年
   * @param int $month 农历月，闰月为负数
   * @return int 天数
   */
  public static function getDaysOfMonth($year, $month)
  {
    $index = $year - LunarUtil::$BASE_YEAR + LunarUtil::$BASE_INDEX;
    $d = 30;
    if (1 <= $month && $month <= 8) {
      $v = LunarUtil::$LUNAR_MONTH[2 * $index];
      $l = $month - 1;
      if ((($v >> $l) & 0x01) === 1) {
        $d = 29;
      }
    } else if (9 <= $month && $month <= 12) {
      $v = LunarUtil::$LUNAR_MONTH[2 * $index + 1];
      $l = $month - 9;
      if ((($v >> $l) & 0x01) === 1) {
        $d = 29;
      }
    } else {
      $v = LunarUtil::$LUNAR_MONTH[2 * $index + 1];
      $v = ($v >> 4) & 0x0F;
      if ($v !== abs($month)) {
        $d = 0;
      } else {
        $d = 29;
        foreach (LunarUtil::$LEAP_MONTH_YEAR as $i) {
          if ($i === $index) {
            $d = 30;
            break;
          }
        }
      }
    }
    return $d;
  }

  /**
   * 获取HH:mm时刻的地支序号(0到11)，非法的时刻返回0
   * @param string $hm HH:mm时刻
   * @return int 地支序号，0到11
   */
  public static function getTimeZhiIndex($hm)
  {
    if (null == $hm) {
      return 0;
    }
    if (strlen($hm) > 5) {
      $hm = substr($hm, 0, 5);
    }
    $x = 1;
    for ($i = 1; $i < 22; $i += 2) {
      if (strcmp($hm, ($i < 10 ? '0' : '') . $i . ':00') >= 0 && strcmp($hm, ($i + 1 < 10 ? '0' : '') . ($i + 1) . ':59') <= 0) {
        return $x;
      }
      $x++;
    }
    return 0;
  }

  /**
   * 将HH:mm时刻转换为时辰（地支），非法的时刻返回子
   * @param string $hm HH:mm时刻
   * @return string 时辰(地支)，如子
   */
  public static function convertTime($hm)
  {
    return LunarUtil::$ZHI[LunarUtil::getTimeZhiIndex($hm) + 1];
  }
}

/**
 * 法定节假日工具（自2011年1月1日起）
 * @package com\nlf\calendar\util
 */
class HolidayUtil
{

  /**
   * 数据段长度
   * @var int
   */
  private static $SIZE = 18;

  /**
   * 0
   * @var int
   */
  private static $ZERO = 48;

  /**
   * 节假日名称（元旦0，春节1，清明2，劳动3，端午4，中秋5，国庆6，国庆中秋7，抗战胜利日8）
   * @var array
   */
  private static $NAMES = array('元旦节', '春节', '清明节', '劳动节', '端午节', '中秋节', '国庆节', '国庆中秋', '抗战胜利日');

  /**
   * 节假日数据，日期YYYYMMDD+名称下标+是否调休+对应节日YYYYMMDD
   * @var string
   */
  private static $DATA = '201101010120110101201101020120110101201101030120110101201101301020110203201102021120110203201102031120110203201102041120110203201102051120110203201102061120110203201102071120110203201102081120110203201102121020110203201104022020110405201104032120110405201104042120110405201104052120110405201104303120110501201105013120110501201105023120110501201106044120110606201106054120110606201106064120110606201109105120110912201109115120110912201109125120110912201110016120111001201110026120111001201110036120111001201110046120111001201110056120111001201110066120111001201110076120111001201110086020111001201110096020111001201112310020120101201201010120120101201201020120120101201201030120120101201201211020120123201201221120120123201201231120120123201201241120120123201201251120120123201201261120120123201201271120120123201201281120120123201201291020120123201203312020120404201204012020120404201204022120120404201204032120120404201204042120120404201204283020120501201204293120120501201204303120120501201205013120120501201205023020120501201206224120120623201206234120120623201206244120120623201209295020120930201209305120120930201210016120121001201210026120121001201210036120121001201210046120121001201210056120121001201210066120121001201210076120121001201210086020121001201301010120130101201301020120130101201301030120130101201301050020130101201301060020130101201302091120130210201302101120130210201302111120130210201302121120130210201302131120130210201302141120130210201302151120130210201302161020130210201302171020130210201304042120130404201304052120130404201304062120130404201304273020130501201304283020130501201304293120130501201304303120130501201305013120130501201306084020130612201306094020130612201306104120130612201306114120130612201306124120130612201309195120130919201309205120130919201309215120130919201309225020130919201309296020131001201310016120131001201310026120131001201310036120131001201310046120131001201310056120131001201310066120131001201310076120131001201401010120140101201401261020140131201401311120140131201402011120140131201402021120140131201402031120140131201402041120140131201402051120140131201402061120140131201402081020140131201404052120140405201404062120140405201404072120140405201405013120140501201405023120140501201405033120140501201405043020140501201405314120140602201406014120140602201406024120140602201409065120140908201409075120140908201409085120140908201409286020141001201410016120141001201410026120141001201410036120141001201410046120141004201410056120141001201410066120141001201410076120141001201410116020141001201501010120150101201501020120150101201501030120150101201501040020150101201502151020150219201502181120150219201502191120150219201502201120150219201502211120150219201502221120150219201502231120150219201502241120150219201502281020150219201504042120150405201504052120150405201504062120150405201505013120150501201505023120150501201505033120150501201506204120150620201506214120150620201506224120150620201509038120150903201509048120150903201509058120150903201509068020150903201509265120150927201509275120150927201510016120151001201510026120151001201510036120151001201510046120151004201510056120151001201510066120151001201510076120151001201510106020151001201601010120160101201601020120160101201601030120160101201602061020160208201602071120160208201602081120160208201602091120160208201602101120160208201602111120160208201602121120160208201602131120160208201602141020160208201604022120160404201604032120160404201604042120160404201604303120160501201605013120160501201605023120160501201606094120160609201606104120160609201606114120160609201606124020160609201609155120160915201609165120160915201609175120160915201609185020160915201610016120161001201610026120161001201610036120161001201610046120161004201610056120161001201610066120161001201610076120161001201610086020161001201610096020161001201612310120170101201701010120170101201701020120170101201701221020170128201701271120170128201701281120170128201701291120170128201701301120170128201701311120170128201702011120170128201702021120170128201702041020170128201704012020170404201704022120170404201704032120170404201704042120170404201704293120170501201704303120170501201705013120170501201705274020170530201705284120170530201705294120170530201705304120170530201709306020171001201710016120171001201710026120171001201710036120171001201710045120171004201710056120171001201710066120171001201710076120171001201710086120171001201712300120180101201712310120180101201801010120180101201802111020180216201802151120180216201802161120180216201802171120180216201802181120180216201802191120180216201802201120180216201802211120180216201802241020180216201804052120180405201804062120180405201804072120180405201804082020180405201804283020180501201804293120180501201804303120180501201805013120180501201806164120180618201806174120180618201806184120180618201809225120180924201809235120180924201809245120180924201809296020181001201809306020181001201810016120181001201810026120181001201810036120181001201810046120181001201810056120181001201810066120181001201810076120181001201812290020190101201812300120190101201812310120190101201901010120190101201902021020190205201902031020190205201902041120190205201902051120190205201902061120190205201902071120190205201902081120190205201902091120190205201902101120190205201904052120190405201904062120190405201904072120190405201904283020190501201905013120190501201905023120190501201905033120190501201905043120190501201905053020190501201906074120190607201906084120190607201906094120190607201909135120190913201909145120190913201909155120190913201909296020191001201910016120191001201910026120191001201910036120191001201910046120191001201910056120191001201910066120191001201910076120191001201910126020191001202001010120200101202001191020200125202001241120200125202001251120200125202001261120200125202001271120200125202001281120200125202001291120200125202001301120200125202001311120200125202002011120200125202002021120200125202004042120200404202004052120200404202004062120200404202004263020200501202005013120200501202005023120200501202005033120200501202005043120200501202005053120200501202005093020200501202006254120200625202006264120200625202006274120200625202006284020200625202009277020201001202010017120201001202010026120201001202010036120201001202010046120201001202010056120201001202010066120201001202010076120201001202010086120201001202010106020201001';

  private static function padding($n)
  {
    return ($n < 10 ? '0' : '') . $n;
  }

  private static function buildHolidayForward($s)
  {
    $day = substr($s, 0, 8);
    $name = HolidayUtil::$NAMES[ord(substr($s, 8, 1)) - HolidayUtil::$ZERO];
    $work = ord(substr($s, 9, 1)) === HolidayUtil::$ZERO;
    $target = substr($s, 10, 8);
    return new Holiday($day, $name, $work, $target);
  }

  private static function buildHolidayBackward($s)
  {
    $size = strlen($s);
    $day = substr($s, $size - 18, 8);
    $name = HolidayUtil::$NAMES[ord(substr($s, $size - 10, 1)) - HolidayUtil::$ZERO];
    $work = ord(substr($s, $size - 9, 1)) === HolidayUtil::$ZERO;
    $target = substr($s, $size - 8);
    return new Holiday($day, $name, $work, $target);
  }

  private static function findForward($key)
  {
    $start = strpos(HolidayUtil::$DATA, $key);
    if (!$start) {
      return null;
    }
    $right = substr(HolidayUtil::$DATA, $start);
    $n = strlen($right) % HolidayUtil::$SIZE;
    if ($n > 0) {
      $right = substr($right, $n);
    }
    while ((strpos($right, $key) !== 0) && strlen($right) >= HolidayUtil::$SIZE) {
      $right = substr($right, HolidayUtil::$SIZE);
    }
    return $right;
  }

  private static function findBackward($key)
  {
    $start = strrpos(HolidayUtil::$DATA, $key);
    if (!$start) {
      return null;
    }
    $left = substr(HolidayUtil::$DATA, 0, $start + strlen($key));
    $size = strlen($left);
    $n = $size % HolidayUtil::$SIZE;
    if ($n > 0) {
      $left = substr($left, 0, $size - $n);
    }
    $size = strlen($left);
    while ((substr_compare($left, $key, -strlen($key)) !== 0) && $size >= HolidayUtil::$SIZE) {
      $left = substr($left, 0, $size - HolidayUtil::$SIZE);
      $size = strlen($left);
    }
    return $left;
  }

  private static function findHolidaysForward($key)
  {
    $l = array();
    $s = HolidayUtil::findForward($key);
    if (null == $s) {
      return $l;
    }
    while (strpos($s, $key) === 0) {
      $l[] = HolidayUtil::buildHolidayForward($s);
      $s = substr($s, HolidayUtil::$SIZE);
    }
    return $l;
  }

  private static function findHolidaysBackward($key)
  {
    $l = array();
    $s = HolidayUtil::findBackward($key);
    if (null == $s) {
      return $l;
    }
    while (substr_compare($s, $key, -strlen($key)) === 0) {
      $l[] = HolidayUtil::buildHolidayBackward($s);
      $s = substr($s, 0, strlen($s) - HolidayUtil::$SIZE);
    }
    return array_reverse($l);
  }

  /**
   * 获取指定年月日的节假日信息，如果不存在，返回null
   * @param int $year 年
   * @param int $month 月，1-12
   * @param int $day 日，1-31
   * @return Holiday|null
   */
  public static function getHolidayByYmd($year, $month, $day)
  {
    $l = HolidayUtil::findHolidaysForward($year . HolidayUtil::padding($month) . HolidayUtil::padding($day));
    return empty($l) ? null : $l[0];
  }

  /**
   * 获取指定年月日的节假日信息，如果不存在，返回null
   * @param string $ymd 年月日
   * @return Holiday|null
   */
  public static function getHoliday($ymd)
  {
    $l = HolidayUtil::findHolidaysForward(str_replace('-', '', $ymd));
    return empty($l) ? null : $l[0];
  }

  /**
   * 获取指定年月的节假日列表
   * @param int $year 年
   * @param int $month 月，1-12
   * @return array
   */
  public static function getHolidaysByYm($year, $month)
  {
    return HolidayUtil::findHolidaysForward($year . HolidayUtil::padding($month));
  }

  /**
   * 获取指定年的节假日列表
   * @param int $year 年
   * @return array
   */
  public static function getHolidaysByYear($year)
  {
    return HolidayUtil::findHolidaysForward($year . '');
  }

  /**
   * 获取指定年月日的节假日列表
   * @param string $ymd 年、年月、年月日
   * @return array 节假日列表
   */
  public static function getHolidays($ymd)
  {
    return HolidayUtil::findHolidaysForward(str_replace('-', '', $ymd));
  }

  /**
   * 获取指定节日（仅节日当天）的相关节假日列表
   * @param int $year 年
   * @param int $month 月，1-12
   * @param int $day 日，1-31
   * @return array
   */
  public static function getHolidaysByTargetYmd($year, $month, $day)
  {
    return HolidayUtil::findHolidaysBackward($year . HolidayUtil::padding($month) . HolidayUtil::padding($day));
  }

  /**
   * 获取指定节日（仅节日当天）的相关节假日列表
   * @param string $ymd 年月日
   * @return array
   */
  public static function getHolidaysByTarget($ymd)
  {
    return HolidayUtil::findHolidaysBackward(str_replace('-', '', $ymd));
  }
}

namespace com\nlf\calendar;

use com\nlf\calendar\util\LunarUtil;
use com\nlf\calendar\util\SolarUtil;
use DateTime;
use Exception;

/**
 * 阳历日期
 * @package com\nlf\calendar
 */
class Solar
{

  /**
   * 2000年儒略日数(2000-1-1 12:00:00 UTC)
   * @var int
   */
  public static $J2000 = 2451545;

  /**
   * 年
   * @var int
   */
  private $year;

  /**
   * 月
   * @var int
   */
  private $month;

  /**
   * 日
   * @var int
   */
  private $day;

  /**
   * 时
   * @var int
   */
  private $hour;

  /**
   * 分
   * @var int
   */
  private $minute;

  /**
   * 秒
   * @var int
   */
  private $second;

  /**
   * 日期
   * @var
   */
  private $calendar;

  function __construct($year, $month, $day, $hour, $minute, $second)
  {
    $this->year = $year;
    $this->month = $month;
    $this->day = $day;
    $this->hour = $hour;
    $this->minute = $minute;
    $this->second = $second;
    try {
      $this->calendar = new DateTime($year . '-' . $month . '-' . $day . ' ' . $hour . ':' . $minute . ':' . $second);
    } catch (Exception $e) {
    }
  }

  public static function fromDate($date)
  {
    $year = (int)date_format($date, 'Y');
    $month = (int)date_format($date, 'n');
    $day = (int)date_format($date, 'j');
    $hour = (int)date_format($date, 'G');
    $minute = (int)date_format($date, 'i');
    $second = (int)date_format($date, 's');
    return new Solar($year, $month, $day, $hour, $minute, $second);
  }

  private static function int2($v)
  {
    $v = floor(doubleval($v));
    return $v < 0 ? $v + 1 : $v;
  }

  public static function fromJulianDay($julianDay)
  {
    $julianDay += 0.5;

    // 日数的整数部份
    $a = Solar::int2($julianDay);
    // 日数的小数部分
    $f = $julianDay - $a;
    if ($a > 2299161) {
      $dd = Solar::int2(($a - 1867216.25) / 36524.25);
      $a += 1 + $dd - Solar::int2($dd / 4);
    }
    // 向前移4年零2个月
    $a += 1524;
    $y = Solar::int2(($a - 122.1) / 365.25);
    // 去除整年日数后余下日数
    $dd = $a - Solar::int2(365.25 * $y);
    $m = (int)Solar::int2($dd / 30.6001);
    // 去除整月日数后余下日数
    $d = (int)Solar::int2($dd - Solar::int2($m * 30.6001));
    $y -= 4716;
    $m--;
    if ($m > 12) {
      $m -= 12;
    }
    if ($m <= 2) {
      $y++;
    }

    // 日的小数转为时分秒
    $f *= 24;
    $h = (int)Solar::int2($f);

    $f -= $h;
    $f *= 60;
    $mi = Solar::int2($f);

    $f -= $mi;
    $f *= 60;
    $s = Solar::int2($f);

    return Solar::fromYmdHms($y, $m, $d, $h, $mi, $s);
  }

  public static function fromYmd($year, $month, $day)
  {
    return new Solar($year, $month, $day, 0, 0, 0);
  }

  public static function fromYmdHms($year, $month, $day, $hour, $minute, $second)
  {
    return new Solar($year, $month, $day, $hour, $minute, $second);
  }

  public function toYmd()
  {
    $month = $this->month;
    $day = $this->day;
    return $this->year . '-' . ($month < 10 ? '0' : '') . $month . '-' . ($day < 10 ? '0' : '') . $day;
  }

  public function toYmdHms()
  {
    $hour = $this->hour;
    $minute = $this->minute;
    $second = $this->second;
    return $this->toYmd() . ' ' . ($hour < 10 ? '0' : '') . $hour . ':' . ($minute < 10 ? '0' : '') . $minute . ':' . ($second < 10 ? '0' : '') . $second;
  }

  public function toFullString()
  {
    $s = $this->toYmdHms();
    if ($this->isLeapYear()) {
      $s .= ' 闰年';
    }
    $s .= ' 星期' . $this->getWeekInChinese();
    foreach ($this->getFestivals() as $f) {
      $s .= ' (' . $f . ')';
    }
    $s .= ' ' . $this->getXingZuo() . '座';
    return $s;
  }

  public function getYear()
  {
    return $this->year;
  }

  public function getMonth()
  {
    return $this->month;
  }

  public function getDay()
  {
    return $this->day;
  }

  public function getHour()
  {
    return $this->hour;
  }

  public function getMinute()
  {
    return $this->minute;
  }

  public function getSecond()
  {
    return $this->second;
  }

  public function getCalendar()
  {
    return $this->calendar;
  }

  public function __toString()
  {
    return $this->toYmd();
  }

  public function isLeapYear()
  {
    return SolarUtil::isLeapYear($this->year);
  }

  public function getWeek()
  {
    return (int)$this->calendar->format('w');
  }

  public function getWeekInChinese()
  {
    return SolarUtil::$WEEK[$this->getWeek()];
  }

  public function getXingZuo()
  {
    $index = 11;
    $m = $this->month;
    $d = $this->day;
    $y = $m * 100 + $d;
    if ($y >= 321 && $y <= 419) {
      $index = 0;
    } else if ($y >= 420 && $y <= 520) {
      $index = 1;
    } else if ($y >= 521 && $y <= 620) {
      $index = 2;
    } else if ($y >= 621 && $y <= 722) {
      $index = 3;
    } else if ($y >= 723 && $y <= 822) {
      $index = 4;
    } else if ($y >= 823 && $y <= 922) {
      $index = 5;
    } else if ($y >= 923 && $y <= 1022) {
      $index = 6;
    } else if ($y >= 1023 && $y <= 1121) {
      $index = 7;
    } else if ($y >= 1122 && $y <= 1221) {
      $index = 8;
    } else if ($y >= 1222 || $y <= 119) {
      $index = 9;
    } else if ($y <= 218) {
      $index = 10;
    }
    return SolarUtil::$XING_ZUO[$index];
  }

  public function getFestivals()
  {
    $l = array();
    if (!empty(SolarUtil::$FESTIVAL[$this->month . '-' . $this->day])) {
      $l[] = SolarUtil::$FESTIVAL[$this->month . '-' . $this->day];
    }
    $week = $this->getWeek();
    $weekInMonth = ceil(($this->day - $week) / 7);
    if ($week > 0) {
      $weekInMonth++;
    }
    if (!empty(SolarUtil::$WEEK_FESTIVAL[$this->month . '-' . $weekInMonth . '-' . $week])) {
      $l[] = SolarUtil::$WEEK_FESTIVAL[$this->month . '-' . $weekInMonth . '-' . $week];
    }
    return $l;
  }

  public function getOtherFestivals()
  {
    $l = array();
    if (!empty(SolarUtil::$OTHER_FESTIVAL[$this->month . '-' . $this->day])) {
      $l[] = SolarUtil::$OTHER_FESTIVAL[$this->month . '-' . $this->day];
    }
    return $l;
  }

  /**
   * 获取往后推几天的阳历日期，如果要往前推，则天数用负数
   * @param int $days 天数
   * @return Solar|null
   */
  public function next($days)
  {
    if ($days == 0) {
      return Solar::fromYmdHms($this->year, $this->month, $this->day, $this->hour, $this->minute, $this->second);
    }
    try {
      $calendar = new DateTime($this->year . '-' . $this->month . '-' . $this->day . ' ' . $this->hour . ':' . $this->minute . ':' . $this->second);
    } catch (Exception $e) {
      return null;
    }
    $calendar->modify(($days > 0 ? '+' : '') . $days . ' day');
    return Solar::fromDate($calendar);
  }

}

/**
 * 农历日期
 * @package com\nlf\calendar
 */
class Lunar
{
  /**
   * 节气表，国标以冬至为首个节气
   * @var array
   */
  private static $JIE_QI = array('冬至', '小寒', '大寒', '立春', '雨水', '惊蛰', '春分', '清明', '谷雨', '立夏', '小满', '芒种', '夏至', '小暑', '大暑', '立秋', '处暑', '白露', '秋分', '寒露', '霜降', '立冬', '小雪', '大雪');

  /**
   * 黄经周期项
   * @var array
   */
  private static $E10 = array(1.75347045673, 0.00000000000, 0.0000000000, 0.03341656456, 4.66925680417, 6283.0758499914, 0.00034894275, 4.62610241759, 12566.1516999828, 0.00003417571, 2.82886579606, 3.5231183490, 0.00003497056, 2.74411800971, 5753.3848848968, 0.00003135896, 3.62767041758, 77713.7714681205, 0.00002676218, 4.41808351397, 7860.4193924392, 0.00002342687, 6.13516237631, 3930.2096962196, 0.00001273166, 2.03709655772, 529.6909650946, 0.00001324292, 0.74246356352, 11506.7697697936, 0.00000901855, 2.04505443513, 26.2983197998, 0.00001199167, 1.10962944315, 1577.3435424478, 0.00000857223, 3.50849156957, 398.1490034082, 0.00000779786, 1.17882652114, 5223.6939198022, 0.00000990250, 5.23268129594, 5884.9268465832, 0.00000753141, 2.53339053818, 5507.5532386674, 0.00000505264, 4.58292563052, 18849.2275499742, 0.00000492379, 4.20506639861, 775.5226113240, 0.00000356655, 2.91954116867, 0.0673103028, 0.00000284125, 1.89869034186, 796.2980068164, 0.00000242810, 0.34481140906, 5486.7778431750, 0.00000317087, 5.84901952218, 11790.6290886588, 0.00000271039, 0.31488607649, 10977.0788046990, 0.00000206160, 4.80646606059, 2544.3144198834, 0.00000205385, 1.86947813692, 5573.1428014331, 0.00000202261, 2.45767795458, 6069.7767545534, 0.00000126184, 1.08302630210, 20.7753954924, 0.00000155516, 0.83306073807, 213.2990954380, 0.00000115132, 0.64544911683, 0.9803210682, 0.00000102851, 0.63599846727, 4694.0029547076, 0.00000101724, 4.26679821365, 7.1135470008, 0.00000099206, 6.20992940258, 2146.1654164752, 0.00000132212, 3.41118275555, 2942.4634232916, 0.00000097607, 0.68101272270, 155.4203994342, 0.00000085128, 1.29870743025, 6275.9623029906, 0.00000074651, 1.75508916159, 5088.6288397668, 0.00000101895, 0.97569221824, 15720.8387848784, 0.00000084711, 3.67080093025, 71430.6956181291, 0.00000073547, 4.67926565481, 801.8209311238, 0.00000073874, 3.50319443167, 3154.6870848956, 0.00000078756, 3.03698313141, 12036.4607348882, 0.00000079637, 1.80791330700, 17260.1546546904, 0.00000085803, 5.98322631256, 161000.6857376741, 0.00000056963, 2.78430398043, 6286.5989683404, 0.00000061148, 1.81839811024, 7084.8967811152, 0.00000069627, 0.83297596966, 9437.7629348870, 0.00000056116, 4.38694880779, 14143.4952424306, 0.00000062449, 3.97763880587, 8827.3902698748, 0.00000051145, 0.28306864501, 5856.4776591154, 0.00000055577, 3.47006009062, 6279.5527316424, 0.00000041036, 5.36817351402, 8429.2412664666, 0.00000051605, 1.33282746983, 1748.0164130670, 0.00000051992, 0.18914945834, 12139.5535091068, 0.00000049000, 0.48735065033, 1194.4470102246, 0.00000039200, 6.16832995016, 10447.3878396044, 0.00000035566, 1.77597314691, 6812.7668150860, 0.00000036770, 6.04133859347, 10213.2855462110, 0.00000036596, 2.56955238628, 1059.3819301892, 0.00000033291, 0.59309499459, 17789.8456197850, 0.00000035954, 1.70876111898, 2352.8661537718);

  /**
   * 黄经泊松1项
   * @var array
   */
  private static $E11 = array(6283.31966747491, 0.00000000000, 0.0000000000, 0.00206058863, 2.67823455584, 6283.0758499914, 0.00004303430, 2.63512650414, 12566.1516999828, 0.00000425264, 1.59046980729, 3.5231183490, 0.00000108977, 2.96618001993, 1577.3435424478, 0.00000093478, 2.59212835365, 18849.2275499742, 0.00000119261, 5.79557487799, 26.2983197998, 0.00000072122, 1.13846158196, 529.6909650946, 0.00000067768, 1.87472304791, 398.1490034082, 0.00000067327, 4.40918235168, 5507.5532386674, 0.00000059027, 2.88797038460, 5223.6939198022, 0.00000055976, 2.17471680261, 155.4203994342, 0.00000045407, 0.39803079805, 796.2980068164, 0.00000036369, 0.46624739835, 775.5226113240, 0.00000028958, 2.64707383882, 7.1135470008, 0.00000019097, 1.84628332577, 5486.7778431750, 0.00000020844, 5.34138275149, 0.9803210682, 0.00000018508, 4.96855124577, 213.2990954380, 0.00000016233, 0.03216483047, 2544.3144198834, 0.00000017293, 2.99116864949, 6275.9623029906);

  /** 黄经泊松2项 */
  private static $E12 = array(0.00052918870, 0.00000000000, 0.0000000000, 0.00008719837, 1.07209665242, 6283.0758499914, 0.00000309125, 0.86728818832, 12566.1516999828, 0.00000027339, 0.05297871691, 3.5231183490, 0.00000016334, 5.18826691036, 26.2983197998, 0.00000015752, 3.68457889430, 155.4203994342, 0.00000009541, 0.75742297675, 18849.2275499742, 0.00000008937, 2.05705419118, 77713.7714681205, 0.00000006952, 0.82673305410, 775.5226113240, 0.00000005064, 4.66284525271, 1577.3435424478);
  private static $E13 = array(0.00000289226, 5.84384198723, 6283.0758499914, 0.00000034955, 0.00000000000, 0.0000000000, 0.00000016819, 5.48766912348, 12566.1516999828);
  private static $E14 = array(0.00000114084, 3.14159265359, 0.0000000000, 0.00000007717, 4.13446589358, 6283.0758499914, 0.00000000765, 3.83803776214, 12566.1516999828);
  private static $E15 = array(0.00000000878, 3.14159265359, 0.0000000000);
  /** 黄纬周期项 */
  private static $E20 = array(0.00000279620, 3.19870156017, 84334.6615813083, 0.00000101643, 5.42248619256, 5507.5532386674, 0.00000080445, 3.88013204458, 5223.6939198022, 0.00000043806, 3.70444689758, 2352.8661537718, 0.00000031933, 4.00026369781, 1577.3435424478, 0.00000022724, 3.98473831560, 1047.7473117547, 0.00000016392, 3.56456119782, 5856.4776591154, 0.00000018141, 4.98367470263, 6283.0758499914, 0.00000014443, 3.70275614914, 9437.7629348870, 0.00000014304, 3.41117857525, 10213.2855462110);
  private static $E21 = array(0.00000009030, 3.89729061890, 5507.5532386674, 0.00000006177, 1.73038850355, 5223.6939198022);
  /** 离心率 */
  private static $GXC_E = array(0.016708634, -0.000042037, -0.0000001267);
  /** 章动表 */
  private static $ZD = array(2.1824391966, -33.757045954, 0.0000362262, 3.7340E-08, -2.8793E-10, -171996, -1742, 92025, 89, 3.5069406862, 1256.663930738, 0.0000105845, 6.9813E-10, -2.2815E-10, -13187, -16, 5736, -31, 1.3375032491, 16799.418221925, -0.0000511866, 6.4626E-08, -5.3543E-10, -2274, -2, 977, -5, 4.3648783932, -67.514091907, 0.0000724525, 7.4681E-08, -5.7586E-10, 2062, 2, -895, 5, 0.0431251803, -628.301955171, 0.0000026820, 6.5935E-10, 5.5705E-11, -1426, 34, 54, -1, 2.3555557435, 8328.691425719, 0.0001545547, 2.5033E-07, -1.1863E-09, 712, 1, -7, 0, 3.4638155059, 1884.965885909, 0.0000079025, 3.8785E-11, -2.8386E-10, -517, 12, 224, -6, 5.4382493597, 16833.175267879, -0.0000874129, 2.7285E-08, -2.4750E-10, -386, -4, 200, 0, 3.6930589926, 25128.109647645, 0.0001033681, 3.1496E-07, -1.7218E-09, -301, 0, 129, -1, 3.5500658664, 628.361975567, 0.0000132664, 1.3575E-09, -1.7245E-10, 217, -5, -95, 3);

  private $year;

  private $month;

  private $day;

  private $hour;

  private $minute;

  private $second;

  /**
   * 对应阳历
   * @var Solar
   */
  private $solar;

  /**
   * 相对于基准日的偏移天数
   * @var int
   */
  private $dayOffset;

  /**
   * 时对应的天干下标，0-9
   * @var int
   */
  private $timeGanIndex;

  /**
   * 时对应的地支下标，0-11
   * @var int
   */
  private $timeZhiIndex;

  /**
   * 日对应的天干下标，0-9
   * @var int
   */
  private $dayGanIndex;

  /**
   * 日对应的地支下标，0-11
   * @var int
   */
  private $dayZhiIndex;

  /**
   * 月对应的天干下标（以节交接当天起算），0-9
   * @var int
   */
  private $monthGanIndex;

  /**
   * 月对应的地支下标（以节交接当天起算），0-11
   * @var int
   */
  private $monthZhiIndex;

  /**
   * 月对应的天干下标（最精确的，供八字用，以节交接时刻起算），0-9
   * @var int
   */
  private $monthGanIndexExact;

  /**
   * 月对应的地支下标（最精确的，供八字用，以节交接时刻起算），0-11
   * @var int
   */
  private $monthZhiIndexExact;

  /**
   * 年对应的天干下标（国标，以正月初一为起点），0-9
   * @var int
   */
  private $yearGanIndex;

  /**
   * 年对应的地支下标（国标，以正月初一为起点），0-11
   * @var int
   */
  private $yearZhiIndex;

  /**
   * 年对应的天干下标（月干计算用，以立春为起点），0-9
   * @var int
   */
  private $yearGanIndexByLiChun;

  /**
   * 年对应的地支下标（月支计算用，以立春为起点），0-11
   * @var int
   */
  private $yearZhiIndexByLiChun;

  /**
   * 年对应的天干下标（最精确的，供八字用，以立春交接时刻为起点），0-9
   * @var int
   */
  private $yearGanIndexExact;

  /**
   * 年对应的地支下标（最精确的，供八字用，以立春交接时刻为起点），0-11
   * @var int
   */
  private $yearZhiIndexExact;

  /**
   * 周下标，0-6
   * @var int
   */
  private $weekIndex;

  /**
   * 24节气表（对应阳历的准确时刻）
   * @var array
   */
  private $jieQi = array();

  function __construct($year, $month, $day, $hour, $minute, $second)
  {
    $this->year = $year;
    $this->month = $month;
    $this->day = $day;
    $this->hour = $hour;
    $this->minute = $minute;
    $this->second = $second;
    $this->dayOffset = LunarUtil::computeAddDays($year, $month, $day);
    $this->solar = $this->toSolar();
    $this->compute();
  }

  /**
   * 转换为阳历日期
   * @return Solar|null
   */
  private function toSolar()
  {
    try {
      $date = new DateTime(SolarUtil::$BASE_YEAR . '-' . SolarUtil::$BASE_MONTH . '-' . SolarUtil::$BASE_DAY . ' ' . $this->hour . ':' . $this->minute . ':' . $this->second);
    } catch (Exception $e) {
      return null;
    }
    $date->modify($this->dayOffset . ' day');
    return Solar::fromDate($date);
  }

  /**
   * 通过指定农历年月日获取农历
   * @param int $year 年（农历）
   * @param int $month 月（农历），1到12，闰月为负，即闰2月=-2
   * @param int $day 日（农历），1到31
   * @return Lunar
   */
  public static function fromYmd($year, $month, $day)
  {
    return new Lunar($year, $month, $day, 0, 0, 0);
  }

  /**
   * 通过指定农历年月日时分秒获取农历
   * @param int $year 年（农历）
   * @param int $month 月（农历），1到12，闰月为负，即闰2月=-2
   * @param int $day 日（农历），1到31
   * @param int $hour 小时（阳历）
   * @param int $minute 分钟（阳历）
   * @param int $second 秒钟（阳历）
   * @return Lunar
   */
  public static function fromYmdHms($year, $month, $day, $hour, $minute, $second)
  {
    return new Lunar($year, $month, $day, $hour, $minute, $second);
  }

  /**
   * 通过阳历日期初始化
   * @param DateTime $date 阳历日期
   * @return Lunar
   */
  public static function fromDate($date)
  {
    $solar = Solar::fromDate($date);
    $y = $solar->getYear();
    $m = $solar->getMonth();
    $d = $solar->getDay();
    if ($y < 2000) {
      $startYear = SolarUtil::$BASE_YEAR;
      $startMonth = SolarUtil::$BASE_MONTH;
      $startDay = SolarUtil::$BASE_DAY;
      $lunarYear = LunarUtil::$BASE_YEAR;
      $lunarMonth = LunarUtil::$BASE_MONTH;
      $lunarDay = LunarUtil::$BASE_DAY;
    } else {
      $startYear = SolarUtil::$BASE_YEAR + 99;
      $startMonth = 1;
      $startDay = 1;
      $lunarYear = LunarUtil::$BASE_YEAR + 99;
      $lunarMonth = 11;
      $lunarDay = 25;
    }
    $diff = 0;
    for ($i = $startYear; $i < $y; $i++) {
      $diff += 365;
      if (SolarUtil::isLeapYear($i)) {
        $diff += 1;
      }
    }
    for ($i = $startMonth; $i < $m; $i++) {
      $diff += SolarUtil::getDaysOfMonth($y, $i);
    }
    $diff += $d - $startDay;
    $lunarDay += $diff;
    $lastDate = LunarUtil::getDaysOfMonth($lunarYear, $lunarMonth);
    while ($lunarDay > $lastDate) {
      $lunarDay -= $lastDate;
      $lunarMonth = LunarUtil::nextMonth($lunarYear, $lunarMonth);
      if ($lunarMonth == 1) {
        $lunarYear++;
      }
      $lastDate = LunarUtil::getDaysOfMonth($lunarYear, $lunarMonth);
    }
    return new Lunar($lunarYear, $lunarMonth, $lunarDay, $solar->getHour(), $solar->getMinute(), $solar->getSecond());
  }

  /**
   * 计算节气表（冬至的太阳黄经是-90度或270度）
   */
  private function computeJieQi()
  {
    //儒略日，冬至在阳历上一年，所以这里多减1年以从去年开始
    $jd = 365.2422 * ($this->solar->getYear() - 2001);
    for ($i = 0, $j = count(Lunar::$JIE_QI); $i < $j; $i++) {
      $t = doubleval(bcadd(bcadd($this->calJieQi($jd + $i * 15.2, $i * 15 - 90) . '', Solar::$J2000 . ''), bcdiv(8, 24)));
      $this->jieQi[Lunar::$JIE_QI[$i]] = Solar::fromJulianDay($t);
    }
  }

  /**
   * 计算干支纪年
   */
  private function computeYear()
  {
    $yearGanIndex = ($this->year + LunarUtil::$BASE_YEAR_GAN_ZHI_INDEX) % 10;
    $yearZhiIndex = ($this->year + LunarUtil::$BASE_YEAR_GAN_ZHI_INDEX) % 12;

    //以立春作为新一年的开始的干支纪年
    $g = $yearGanIndex;
    $z = $yearZhiIndex;

    //精确的干支纪年，以立春交接时刻为准
    $gExact = $yearGanIndex;
    $zExact = $yearZhiIndex;

    if ($this->year === $this->solar->getYear()) {
      //获取立春的阳历时刻
      $liChun = $this->jieQi['立春'];
      //立春日期判断
      if (strcmp($this->solar->toYmd(), $liChun->toYmd()) < 0) {
        $g--;
        if ($g < 0) {
          $g += 10;
        }
        $z--;
        if ($z < 0) {
          $z += 12;
        }
      }
      //立春交接时刻判断
      if (strcmp($this->solar->toYmdHms(), $liChun->toYmdHms()) < 0) {
        $gExact--;
        if ($gExact < 0) {
          $gExact += 10;
        }
        $zExact--;
        if ($zExact < 0) {
          $zExact += 12;
        }
      }
    }

    $this->yearGanIndex = $yearGanIndex;
    $this->yearZhiIndex = $yearZhiIndex;

    $this->yearGanIndexByLiChun = $g;
    $this->yearZhiIndexByLiChun = $z;

    $this->yearGanIndexExact = $gExact;
    $this->yearZhiIndexExact = $zExact;
  }

  /**
   * 干支纪月计算
   */
  private function computeMonth()
  {
    $start = null;
    //干偏移值（以立春当天起算）
    $gOffset = (($this->yearGanIndexByLiChun % 5 + 1) * 2) % 10;
    //干偏移值（以立春交接时刻起算）
    $gOffsetExact = (($this->yearGanIndexExact % 5 + 1) * 2) % 10;

    //序号：大雪到小寒之间-2，小寒到立春之间-1，立春之后0
    $index = -2;
    foreach (LunarUtil::$JIE as $jie) {
      $end = $this->jieQi[$jie];
      $ymd = $this->solar->toYmd();
      $symd = (null == $start) ? $ymd : $start->toYmd();
      $eymd = $end->toYmd();
      if (strcmp($ymd, $symd) >= 0 && strcmp($ymd, $eymd) < 0) {
        break;
      }
      $start = $end;
      $index++;
    }
    if ($index < 0) {
      $index += 12;
    }

    $this->monthGanIndex = ($index + $gOffset) % 10;
    $this->monthZhiIndex = ($index + LunarUtil::$BASE_MONTH_ZHI_INDEX) % 12;

    $start = null;
    //序号：大雪到小寒之间-2，小寒到立春之间-1，立春之后0
    $indexExact = -2;
    foreach (LunarUtil::$JIE as $jie) {
      $end = $this->jieQi[$jie];
      $time = $this->solar->toYmdHms();
      $stime = null == $start ? $time : $start->toYmdHms();
      $etime = $end->toYmdHms();
      if (strcmp($time, $stime) >= 0 && strcmp($time, $etime) < 0) {
        break;
      }
      $start = $end;
      $indexExact++;
    }
    if ($indexExact < 0) {
      $indexExact += 12;
    }
    $this->monthGanIndexExact = ($indexExact + $gOffsetExact) % 10;
    $this->monthZhiIndexExact = ($indexExact + LunarUtil::$BASE_MONTH_ZHI_INDEX) % 12;
  }

  /**
   * 干支纪日计算
   */
  private function computeDay()
  {
    $addDays = ($this->dayOffset + LunarUtil::$BASE_DAY_GAN_ZHI_INDEX) % 60;
    $this->dayGanIndex = $addDays % 10;
    $this->dayZhiIndex = $addDays % 12;
  }

  /**
   * 干支纪时计算
   */
  private function computeTime()
  {
    $this->timeZhiIndex = LunarUtil::getTimeZhiIndex(($this->hour < 10 ? '0' : '') . $this->hour . ':' . ($this->minute < 10 ? '0' : '') . $this->minute);
    $this->timeGanIndex = $this->timeZhiIndex % 10;
  }

  /**
   * 星期计算
   */
  private function computeWeek()
  {
    $this->weekIndex = ($this->dayOffset + LunarUtil::$BASE_WEEK_INDEX) % 7;
  }

  private function compute()
  {
    $this->computeJieQi();
    $this->computeYear();
    $this->computeMonth();
    $this->computeDay();
    $this->computeTime();
    $this->computeWeek();
  }

  public function getYear()
  {
    return $this->year;
  }

  public function getMonth()
  {
    return $this->month;
  }

  public function getDay()
  {
    return $this->day;
  }

  public function getHour()
  {
    return $this->hour;
  }

  public function getMinute()
  {
    return $this->minute;
  }

  public function getSecond()
  {
    return $this->second;
  }

  public function getSolar()
  {
    return $this->solar;
  }

  /**
   * 获取年份的天干（以正月初一作为新年的开始）
   * @return string 天干，如辛
   */
  public function getYearGan()
  {
    return LunarUtil::$GAN[$this->yearGanIndex + 1];
  }

  /**
   * 获取年份的天干（以立春当天作为新年的开始）
   *
   * @return string 天干，如辛
   */
  public function getYearGanByLiChun()
  {
    return LunarUtil::$GAN[$this->yearGanIndexByLiChun + 1];
  }

  /**
   * 获取最精确的年份天干（以立春交接的时刻作为新年的开始）
   *
   * @return string 天干，如辛
   */
  public function getYearGanExact()
  {
    return LunarUtil::$GAN[$this->yearGanIndexExact + 1];
  }

  /**
   * 获取年份的地支（以正月初一作为新年的开始）
   *
   * @return string 地支，如亥
   */
  public function getYearZhi()
  {
    return LunarUtil::$ZHI[$this->yearZhiIndex + 1];
  }

  /**
   * 获取年份的地支（以立春当天作为新年的开始）
   *
   * @return string 地支，如亥
   */
  public function getYearZhiByLiChun()
  {
    return LunarUtil::$ZHI[$this->yearZhiIndexByLiChun + 1];
  }

  /**
   * 获取最精确的年份地支（以立春交接的时刻作为新年的开始）
   *
   * @return string 地支，如亥
   */
  public function getYearZhiExact()
  {
    return LunarUtil::$ZHI[$this->yearZhiIndexExact + 1];
  }

  /**
   * 获取干支纪年（年柱）（以正月初一作为新年的开始）
   * @return string 年份的干支（年柱），如辛亥
   */
  public function getYearInGanZhi()
  {
    return $this->getYearGan() . $this->getYearZhi();
  }

  /**
   * 获取干支纪年（年柱）（以立春当天作为新年的开始）
   * @return string 年份的干支（年柱），如辛亥
   */
  public function getYearInGanZhiByLiChun()
  {
    return $this->getYearGanByLiChun() . $this->getYearZhiByLiChun();
  }

  /**
   * 获取干支纪年（年柱）（以立春交接的时刻作为新年的开始）
   * @return string 年份的干支（年柱），如辛亥
   */
  public function getYearInGanZhiExact()
  {
    return $this->getYearGanExact() . $this->getYearZhiExact();
  }

  /**
   * 获取干支纪月（月柱）（以节交接当天起算）
   * <p>月天干口诀：甲己丙寅首，乙庚戊寅头。丙辛从庚寅，丁壬壬寅求，戊癸甲寅居，周而复始流。</p>
   * <p>月地支：正月起寅</p>
   *
   * @return string 干支纪月（月柱），如己卯
   */
  public function getMonthInGanZhi()
  {
    return $this->getMonthGan() . $this->getMonthZhi();
  }

  /**
   * 获取精确的干支纪月（月柱）（以节交接时刻起算）
   * <p>月天干口诀：甲己丙寅首，乙庚戊寅头。丙辛从庚寅，丁壬壬寅求，戊癸甲寅居，周而复始流。</p>
   * <p>月地支：正月起寅</p>
   *
   * @return string 干支纪月（月柱），如己卯
   */
  public function getMonthInGanZhiExact()
  {
    return $this->getMonthGanExact() . $this->getMonthZhiExact();
  }

  /**
   * 获取月天干（以节交接当天起算）
   * @return string 月天干，如己
   */
  public function getMonthGan()
  {
    return LunarUtil::$GAN[$this->monthGanIndex + 1];
  }

  /**
   * 获取精确的月天干（以节交接时刻起算）
   * @return string 月天干，如己
   */
  public function getMonthGanExact()
  {
    return LunarUtil::$GAN[$this->monthGanIndexExact + 1];
  }

  /**
   * 获取月地支（以节交接当天起算）
   * @return string 月地支，如卯
   */
  public function getMonthZhi()
  {
    return LunarUtil::$ZHI[$this->monthZhiIndex + 1];
  }

  /**
   * 获取精确的月地支（以节交接时刻起算）
   * @return string 月地支，如卯
   */
  public function getMonthZhiExact()
  {
    return LunarUtil::$ZHI[$this->monthZhiIndexExact + 1];
  }

  /**
   * 获取干支纪日（日柱）
   *
   * @return string 干支纪日（日柱），如己卯
   */
  public function getDayInGanZhi()
  {
    return $this->getDayGan() . $this->getDayZhi();
  }

  /**
   * 获取日天干
   *
   * @return string 日天干，如甲
   */
  public function getDayGan()
  {
    return LunarUtil::$GAN[$this->dayGanIndex + 1];
  }

  /**
   * 获取日地支
   *
   * @return string 日地支，如卯
   */
  public function getDayZhi()
  {
    return LunarUtil::$ZHI[$this->dayZhiIndex + 1];
  }

  /**
   * 获取年生肖（以正月初一起算）
   *
   * @return string 年生肖，如虎
   */
  public function getYearShengXiao()
  {
    return LunarUtil::$SHENG_XIAO[$this->yearZhiIndex + 1];
  }

  /**
   * 获取年生肖（以立春当天起算）
   *
   * @return string 年生肖，如虎
   */
  public function getYearShengXiaoByLiChun()
  {
    return LunarUtil::$SHENG_XIAO[$this->yearZhiIndexByLiChun + 1];
  }

  /**
   * 获取精确的年生肖（以立春交接时刻起算）
   *
   * @return string 年生肖，如虎
   */
  public function getYearShengXiaoExact()
  {
    return LunarUtil::$SHENG_XIAO[$this->yearZhiIndexExact + 1];
  }

  /**
   * 获取月生肖
   *
   * @return string 月生肖，如虎
   */
  public function getMonthShengXiao()
  {
    return LunarUtil::$SHENG_XIAO[$this->monthZhiIndex + 1];
  }

  /**
   * 获取日生肖
   *
   * @return string 日生肖，如虎
   */
  public function getDayShengXiao()
  {
    return LunarUtil::$SHENG_XIAO[$this->dayZhiIndex + 1];
  }

  /**
   * 获取时辰生肖
   *
   * @return string 时辰生肖，如虎
   */
  public function getTimeShengXiao()
  {
    return LunarUtil::$SHENG_XIAO[$this->timeZhiIndex + 1];
  }

  /**
   * 获取中文的年
   *
   * @return string 中文年，如二零零一
   */
  public function getYearInChinese()
  {
    $y = ($this->year . '');
    $s = '';
    for ($i = 0, $j = strlen($y); $i < $j; $i++) {
      $s .= LunarUtil::$NUMBER[ord(substr($y, $i, 1)) - 48];
    }
    return $s;
  }

  /**
   * 获取中文的月
   *
   * @return string 中文月，如正
   */
  public function getMonthInChinese()
  {
    return ($this->month < 0 ? '闰' : '') . LunarUtil::$MONTH[abs($this->month)];
  }

  /**
   * 获取中文日
   *
   * @return string 中文日，如初一
   */
  public function getDayInChinese()
  {
    return LunarUtil::$DAY[$this->day];
  }

  /**
   * 获取时辰（地支）
   * @return string 时辰（地支）
   */
  public function getTimeZhi()
  {
    return LunarUtil::$ZHI[$this->timeZhiIndex + 1];
  }

  /**
   * 获取时辰（天干）
   * @return string 时辰（天干）
   */
  public function getTimeGan()
  {
    return LunarUtil::$GAN[$this->timeGanIndex + 1];
  }

  /**
   * 获取时辰干支（时柱）
   * @return string 时辰干支（时柱）
   */
  public function getTimeInGanZhi()
  {
    return $this->getTimeGan() . $this->getTimeZhi();
  }

  /**
   * 获取季节
   * @return string 农历季节
   */
  public function getSeason()
  {
    return LunarUtil::$SEASON[abs($this->month)];
  }

  private function mrad($rad)
  {
    $pi2 = bcmul(2, pi());
    $rad = bcmod($rad, $pi2);
    return $rad < 0 ? bcadd($rad, $pi2) : $rad;
  }

  private function gxc($t, $pos)
  {
    $pi = pi();
    $degreePerRad = bcdiv(180, $pi);
    $secondPerRad = bcdiv(180 * 3600, $pi);
    /** 近点 */
    $gxcp = array(bcdiv(102.93735, $degreePerRad), bcdiv(1.71946, $degreePerRad), bcdiv(0.00046, $degreePerRad));
    /** 太平黄经 */
    $gxcl = array(bcdiv(280.4664567, $degreePerRad), bcdiv(36000.76982779, $degreePerRad), bcdiv(0.0003032028, $degreePerRad), bcdiv(bcdiv(1, 49931000), $degreePerRad), bcdiv(bcdiv(-1, 153000000), $degreePerRad));
    /** 光行差常数 */
    $gxck = bcdiv(20.49552, $secondPerRad);
    $t1 = bcdiv($t, 36525);
    $t2 = bcmul($t1, $t1);
    $t3 = bcmul($t2, $t1);
    $t4 = bcmul($t3, $t1);

    $a1 = bcmul($this->str($gxcl[1]), $t1);
    $a2 = bcmul($this->str($gxcl[2]), $t2);
    $a3 = bcmul($this->str($gxcl[3]), $t3);
    $a4 = bcmul($this->str($gxcl[4]), $t4);

    $l = $gxcl[0];
    $l = bcadd($l, $a1);
    $l = bcadd($l, $a2);
    $l = bcadd($l, $a3);
    $l = bcadd($l, $a4);

    $p1 = bcmul($this->str($gxcp[1]), $t1);
    $p2 = bcmul($this->str($gxcp[2]), $t2);

    $p = $gxcp[0];
    $p = bcadd($p, $p1);
    $p = bcadd($p, $p2);

    $e1 = bcmul($this->str(Lunar::$GXC_E[1]), $t1);
    $e2 = bcmul($this->str(Lunar::$GXC_E[2]), $t2);

    $e = Lunar::$GXC_E[0];
    $e = bcadd($e, $e1);
    $e = bcadd($e, $e2);

    $dl = bcsub($l, $pos[0]);
    $dp = bcsub($p, $pos[0]);

    $cose = bcsub(cos($dl), bcmul($e, cos($dp)));
    $sine = bcsub(sin($dl), bcmul($e, sin($dp)));

    $pos[0] = bcsub($pos[0], bcdiv(bcmul($gxck, $cose), $this->str(cos($pos[1]))));

    $gsin = bcmul($gxck, $this->str(sin($pos[1])));

    $pos[1] = bcsub($pos[1], bcmul($gsin, $sine));
    $pos[0] = $this->mrad($pos[0]);
  }

  private function enn($f, $ennt)
  {
    $v = 0;
    for ($i = 0, $j = count($f); $i < $j; $i += 3) {
      $cos = cos(bcadd($f[$i + 1], bcmul($ennt, $f[$i + 2])));
      $v = bcadd($v, bcmul($this->str($f[$i]), $cos));
    }
    return $v;
  }

  /**
   * 计算日心坐标中地球的位置
   * @param double $t 儒略日
   * @return array 地球坐标
   */
  private function calEarth($t)
  {
    $t1 = bcdiv($t, '365250');
    $r = array(2);
    $t2 = bcmul($t1, $t1);
    $t3 = bcmul($t2, $t1);
    $t4 = bcmul($t3, $t1);
    $t5 = bcmul($t4, $t1);
    $r[0] = $this->mrad($this->enn(Lunar::$E10, $t1) + $this->enn(Lunar::$E11, $t1) * $t1 + $this->enn(Lunar::$E12, $t1) * $t2 + $this->enn(Lunar::$E13, $t1) * $t3 + $this->enn(Lunar::$E14, $t1) * $t4 + $this->enn(Lunar::$E15, $t1) * $t5);
    $r[1] = bcadd($this->enn(Lunar::$E20, $t1), bcmul($this->enn(Lunar::$E21, $t1), $t1));
    return $r;
  }

  private function str($num)
  {
    if (false !== stripos($num, 'e')) {
      $a = explode('e', strtolower($num));
      return bcmul($a[0], bcpow(10, $a[1]));
    }else{
      return $num.'';
    }
  }

  /**
   * 计算黄经章动
   * @param double $t J2000起算儒略日数
   * @return double 黄经章动
   */
  private function hjzd($t)
  {
    $lon = 0;
    $t1 = bcdiv($t, '36525');
    $t2 = bcmul($t1, $t1);
    $t3 = bcmul($t2, $t1);
    $t4 = bcmul($t3, $t1);
    for ($i = 0, $j = count(Lunar::$ZD); $i < $j; $i += 9) {
      $a1 = bcmul($this->str(Lunar::$ZD[$i + 1]), $t1);
      $a2 = bcmul($this->str(Lunar::$ZD[$i + 2]), $t2);
      $a3 = bcmul($this->str(Lunar::$ZD[$i + 3]), $t3);
      $a4 = bcmul($this->str(Lunar::$ZD[$i + 4]), $t4);

      $c = bcadd(Lunar::$ZD[$i], $a1);
      $c = bcadd($c, $a2);
      $c = bcadd($c, $a3);
      $c = bcadd($c, $a4);

      $a6 = bcmul($this->str(Lunar::$ZD[$i + 6]), $t1);
      $lon = bcadd($lon, bcmul(bcadd($this->str(Lunar::$ZD[$i + 5]), bcdiv($a6, 10)), sin($c)));
    }
    $lon = bcdiv($lon, bcdiv(180 * 3600 * 10000, pi()));
    return $lon;
  }

  /**
   * 地心坐标中的日月位置计算（计算t时刻太阳黄经与角度的差）
   * @param double $t J2000起算儒略日数
   * @param double $rad 弧度
   * @return double 角度差
   */
  private function calRad($t, $rad)
  {
    // 计算太阳真位置(先算出日心坐标中地球的位置)
    $pos = $this->calEarth($t);
    $pos[0] = bcadd($pos[0], pi());
    // 转为地心坐标
    $pos[1] = bcsub(0, $pos[1]);
    // 补周年光行差
    $this->gxc($t, $pos);
    // 补黄经章动
    $pos[0] = bcadd($pos[0], $this->hjzd($t));
    return $this->mrad(bcsub($rad, $pos[0]));
  }

  /**
   * 太阳黄经达某角度的时刻计算(用于节气计算)
   * @param double $t1 J2000起算儒略日数
   * @param double $degree 角度
   * @return double 时刻
   */
  private function calJieQi($t1, $degree)
  {
    // 对于节气计算,应满足t在t1到t1+360天之间,对于Y年第n个节气(n=0是春分),t1可取值Y*365.2422+n*15.2
    $pi = pi();
    $t2 = $t1;
    $t = 0;;
    // 在t1到t2范围内求解(范气360天范围),结果置于t
    $t2 += 360;
    // 待搜索目标角
    $rad = bcdiv(bcmul($degree, $pi), 180);
    // 利用截弦法计算
    // v1,v2为t1,t2时对应的黄经
    $v1 = $this->calRad($t1, $rad);
    $v2 = $this->calRad($t2, $rad);
    // 减2pi作用是将周期性角度转为连续角度
    if ($v1 < $v2) {
      $v2 = bcsub($v2, bcmul(2, $pi));
    }
    // k是截弦的斜率
    $k = 1;
    // 快速截弦求根,通常截弦三四次就已达所需精度
    for ($i = 0; $i < 10; $i++) {
      // 算出斜率
      $k2 = bcdiv(bcsub($v2, $v1), bcsub($t2, $t1));
      // 差商可能为零,应排除
      if (abs($k2) > 1e-15) {
        $k = $k2;
      }
      $t = bcsub($t1, bcdiv($v1, $k));
      // 直线逼近法求根(直线方程的根)
      $v = $this->calRad($t, $rad);
      // 一次逼近后,v1就已接近0,如果很大,则应减1周
      if ($v > 1) {
        $v = bcsub($v, bcmul(2, $pi));
      }
      // 已达精度
      if (abs($v) < 1e-8) {
        break;
      }
      $t1 = $t2;
      $v1 = $v2;
      $t2 = $t;
      // 下一次截弦
      $v2 = $v;
    }
    return $t;
  }

  /**
   * 获取节
   *
   * @return string 节
   */
  public function getJie()
  {
    foreach (LunarUtil::$JIE as $jie) {
      $d = $this->jieQi[$jie];
      if ($d->getYear() === $this->solar->getYear() && $d->getMonth() === $this->solar->getMonth() && $d->getDay() === $this->solar->getDay()) {
        return $jie;
      }
    }
    return '';
  }

  /**
   * 获取气
   *
   * @return string 气
   */
  public function getQi()
  {
    foreach (LunarUtil::$QI as $qi) {
      $d = $this->jieQi[$qi];
      if ($d->getYear() === $this->solar->getYear() && $d->getMonth() === $this->solar->getMonth() && $d->getDay() === $this->solar->getDay()) {
        return $qi;
      }
    }
    return '';
  }

  /**
   * 获取星期，0代表周日，1代表周一
   *
   * @return int 0123456
   */
  public function getWeek()
  {
    return $this->weekIndex;
  }

  /**
   * 获取星期的中文
   *
   * @return string 日一二三四五六
   */
  public function getWeekInChinese()
  {
    return SolarUtil::$WEEK[$this->getWeek()];
  }

  /**
   * 获取宿
   *
   * @return string 宿
   */
  public function getXiu()
  {
    return LunarUtil::$XIU[$this->getDayZhi() . $this->getWeek()];
  }

  /**
   * 获取宿吉凶
   *
   * @return string 吉/凶
   */
  public function getXiuLuck()
  {
    return LunarUtil::$XIU_LUCK[$this->getXiu()];
  }

  /**
   * 获取宿歌诀
   *
   * @return string 宿歌诀
   */
  public function getXiuSong()
  {
    return LunarUtil::$XIU_SONG[$this->getXiu()];
  }

  /**
   * 获取政
   *
   * @return string 政
   */
  public function getZheng()
  {
    return LunarUtil::$ZHENG[$this->getXiu()];
  }

  /**
   * 获取动物
   * @return string 动物
   */
  public function getAnimal()
  {
    return LunarUtil::$ANIMAL[$this->getXiu()];
  }

  /**
   * 获取宫
   * @return string 宫
   */
  public function getGong()
  {
    return LunarUtil::$GONG[$this->getXiu()];
  }

  /**
   * 获取兽
   * @return string 兽
   */
  public function getShou()
  {
    return LunarUtil::$SHOU[$this->getGong()];
  }

  /**
   * 获取节日，有可能一天会有多个节日
   *
   * @return array 节日列表，如春节
   */
  public function getFestivals()
  {
    $l = array();
    if (!empty(LunarUtil::$FESTIVAL[$this->month . '-' . $this->day])) {
      $l[] = LunarUtil::$FESTIVAL[$this->month . '-' . $this->day];
    }
    return $l;
  }

  /**
   * 获取非正式的节日，有可能一天会有多个节日
   *
   * @return array 非正式的节日列表，如中元节
   */
  public function getOtherFestivals()
  {
    $l = array();
    if (!empty(LunarUtil::$OTHER_FESTIVAL[$this->month . '-' . $this->day])) {
      $l[] = LunarUtil::$OTHER_FESTIVAL[$this->month . '-' . $this->day];
    }
    return $l;
  }

  /**
   * 获取彭祖百忌天干
   * @return string 彭祖百忌天干
   */
  public function getPengZuGan()
  {
    return LunarUtil::$PENG_ZU_GAN[$this->dayGanIndex + 1];
  }

  /**
   * 获取彭祖百忌地支
   * @return string 彭祖百忌地支
   */
  public function getPengZuZhi()
  {
    return LunarUtil::$PENG_ZU_ZHI[$this->dayZhiIndex + 1];
  }

  /**
   * 获取喜神方位
   * @return string 喜神方位，如艮
   */
  public function getPositionXi()
  {
    return LunarUtil::$POSITION_XI[$this->dayGanIndex + 1];
  }

  /**
   * 获取喜神方位描述
   * @return string 喜神方位描述，如东北
   */
  public function getPositionXiDesc()
  {
    return LunarUtil::$POSITION_DESC[$this->getPositionXi()];
  }

  /**
   * 获取阳贵神方位
   * @return string 阳贵神方位，如艮
   */
  public function getPositionYangGui()
  {
    return LunarUtil::$POSITION_YANG_GUI[$this->dayGanIndex + 1];
  }

  /**
   * 获取阳贵神方位描述
   * @return string 阳贵神方位描述，如东北
   */
  public function getPositionYangGuiDesc()
  {
    return LunarUtil::$POSITION_DESC[$this->getPositionYangGui()];
  }

  /**
   * 获取阴贵神方位
   * @return string 阴贵神方位，如艮
   */
  public function getPositionYinGui()
  {
    return LunarUtil::$POSITION_YIN_GUI[$this->dayGanIndex + 1];
  }

  /**
   * 获取阴贵神方位描述
   * @return string 阴贵神方位描述，如东北
   */
  public function getPositionYinGuiDesc()
  {
    return LunarUtil::$POSITION_DESC[$this->getPositionYinGui()];
  }

  /**
   * 获取福神方位
   * @return string 福神方位，如艮
   */
  public function getPositionFu()
  {
    return LunarUtil::$POSITION_FU[$this->dayGanIndex + 1];
  }

  /**
   * 获取福神方位描述
   * @return string 福神方位描述，如东北
   */
  public function getPositionFuDesc()
  {
    return LunarUtil::$POSITION_DESC[$this->getPositionFu()];
  }

  /**
   * 获取财神方位
   * @return string 财神方位，如艮
   */
  public function getPositionCai()
  {
    return LunarUtil::$POSITION_CAI[$this->dayGanIndex + 1];
  }

  /**
   * 获取财神方位描述
   * @return string 财神方位描述，如东北
   */
  public function getPositionCaiDesc()
  {
    return LunarUtil::$POSITION_DESC[$this->getPositionCai()];
  }

  /**
   * 获取冲
   * @return string 冲，如申
   */
  public function getChong()
  {
    return LunarUtil::$CHONG[$this->dayZhiIndex + 1];
  }

  /**
   * 获取无情之克的冲天干
   * @return string 无情之克的冲天干，如甲
   */
  public function getChongGan()
  {
    return LunarUtil::$CHONG_GAN[$this->dayGanIndex + 1];
  }

  /**
   * 获取有情之克的冲天干
   * @return string 有情之克的冲天干，如甲
   */
  public function getChongGanTie()
  {
    return LunarUtil::$CHONG_GAN_TIE[$this->dayGanIndex + 1];
  }

  /**
   * 获取冲生肖
   * @return string 冲生肖，如猴
   */
  public function getChongShengXiao()
  {
    $chong = $this->getChong();
    for ($i = 0, $j = count(LunarUtil::$ZHI); $i < $j; $i++) {
      if (strcmp(LunarUtil::$ZHI[$i], $chong) === 0) {
        return LunarUtil::$SHENG_XIAO[$i];
      }
    }
    return '';
  }

  /**
   * 获取冲描述
   * @return string 冲描述，如(壬申)猴
   */
  public function getChongDesc()
  {
    return '(' . $this->getChongGan() . $this->getChong() . ')' . $this->getChongShengXiao();
  }

  /**
   * 获取煞
   * @return string 煞，如北
   */
  public function getSha()
  {
    return LunarUtil::$SHA[$this->getDayZhi()];
  }

  /**
   * 获取年纳音
   * @return string 年纳音，如剑锋金
   */
  public function getYearNaYin()
  {
    return LunarUtil::$NAYIN[$this->getYearInGanZhi()];
  }

  /**
   * 获取月纳音
   * @return string 月纳音，如剑锋金
   */
  public function getMonthNaYin()
  {
    return LunarUtil::$NAYIN[$this->getMonthInGanZhi()];
  }

  /**
   * 获取日纳音
   * @return string 日纳音，如剑锋金
   */
  public function getDayNaYin()
  {
    return LunarUtil::$NAYIN[$this->getDayInGanZhi()];
  }

  /**
   * 获取时辰纳音
   * @return string 时辰纳音，如剑锋金
   */
  public function getTimeNaYin()
  {
    return LunarUtil::$NAYIN[$this->getTimeInGanZhi()];
  }

  /**
   * 获取八字，男性也称乾造，女性也称坤造（以立春交接时刻作为新年的开始）
   * @return array 八字（男性也称乾造，女性也称坤造）
   */
  public function getBaZi()
  {
    $l = array(4);
    $timeGan = LunarUtil::$GAN[($this->dayGanIndex % 5 * 12 + $this->timeZhiIndex) % 10 + 1];
    $l[] = $this->getYearInGanZhiExact();
    $l[] = $this->getMonthInGanZhiExact();
    $l[] = $this->getDayInGanZhi();
    $l[] = $timeGan . $this->getTimeZhi();
    return $l;
  }

  /**
   * 获取八字五行
   * @return array 八字五行
   */
  public function getBaZiWuXing()
  {
    $baZi = $this->getBaZi();
    $l = array(count($baZi));
    foreach ($baZi as $ganZhi) {
      $gan = substr($ganZhi, 0, 1);
      $zhi = substr($ganZhi, 1);
      $l[] = LunarUtil::$WU_XING_GAN[$gan] . LunarUtil::$WU_XING_ZHI[$zhi];
    }
    return $l;
  }

  /**
   * 获取八字纳音
   * @return array 八字纳音
   */
  public function getBaZiNaYin()
  {
    $baZi = $this->getBaZi();
    $l = array(count($baZi));
    foreach ($baZi as $ganZhi) {
      $l[] = LunarUtil::$NAYIN[$ganZhi];
    }
    return $l;
  }

  /**
   * 获取八字天干十神，日柱十神为日主，其余三柱根据天干十神表查询
   * @return array 八字天干十神
   */
  public function getBaZiShiShenGan()
  {
    $baZi = $this->getBaZi();
    $yearGan = substr($baZi[0], 0, 1);
    $monthGan = substr($baZi[1], 0, 1);
    $dayGan = substr($baZi[2], 0, 1);
    $timeGan = substr($baZi[3], 0, 1);
    $l = array(count($baZi));
    $l[] = LunarUtil::$SHI_SHEN_GAN[$dayGan . $yearGan];
    $l[] = LunarUtil::$SHI_SHEN_GAN[$dayGan . $monthGan];
    $l[] = '日主';
    $l[] = LunarUtil::$SHI_SHEN_GAN[$dayGan . $timeGan];
    return $l;
  }

  /**
   * 获取八字地支十神，根据地支十神表查询
   * @return array 八字地支十神
   */
  public function getBaZiShiShenZhi()
  {
    $baZi = $this->getBaZi();
    $dayGan = substr($baZi[2], 0, 1);
    $l = array(count($baZi));
    foreach ($baZi as $ganZhi) {
      $zhi = substr($ganZhi, 1);
      $l[] = LunarUtil::$SHI_SHEN_ZHI[$dayGan . $zhi . LunarUtil::$ZHI_HIDE_GAN[$zhi][0]];
    }
    return $l;
  }

  /**
   * 获取十二执星：建、除、满、平、定、执、破、危、成、收、开、闭。当月支与日支相同即为建，依次类推
   * @return string 执星
   */
  public function getZhiXing()
  {
    $offset = $this->dayZhiIndex - $this->monthZhiIndex;
    if ($offset < 0) {
      $offset += 12;
    }
    return LunarUtil::$ZHI_XING[$offset + 1];
  }

  /**
   * 获取值日天神
   * @return string 值日天神
   */
  public function getDayTianShen()
  {
    $monthZhi = $this->getMonthZhi();
    $offset = LunarUtil::$MONTH_ZHI_TIAN_SHEN_OFFSET[$monthZhi];
    return LunarUtil::$TIAN_SHEN[($this->dayZhiIndex + $offset) % 12 + 1];
  }

  /**
   * 获取值日天神类型：黄道/黑道
   * @return string 值日天神类型：黄道/黑道
   */
  public function getDayTianShenType()
  {
    return LunarUtil::$TIAN_SHEN_TYPE[$this->getDayTianShen()];
  }

  /**
   * 获取值日天神吉凶
   * @return string 吉/凶
   */
  public function getDayTianShenLuck()
  {
    return LunarUtil::$TIAN_SHEN_TYPE_LUCK[$this->getDayTianShenType()];
  }

  /**
   * 获取逐日胎神方位
   * @return string 逐日胎神方位
   */
  public function getDayPositionTai()
  {
    $offset = $this->dayGanIndex - $this->dayZhiIndex;
    if ($offset < 0) {
      $offset += 12;
    }
    return LunarUtil::$POSITION_TAI_DAY[$offset * 5 + $this->dayGanIndex];
  }

  /**
   * 获取逐月胎神方位，闰月无
   * @return string 逐月胎神方位
   */
  public function getMonthPositionTai()
  {
    if ($this->month < 0) {
      return '';
    }
    return LunarUtil::$POSITION_TAI_MONTH[$this->month - 1];
  }

  /**
   * 获取节气表（节气名称:阳历），节气交接时刻精确到秒，以冬至开头，按先后顺序排列
   * @return array 节气表
   */
  public function getJieQiTable()
  {
    return $this->jieQi;
  }

  public function toFullString()
  {
    $s = '';
    $s .= $this;
    $s .= ' ';
    $s .= $this->getYearInGanZhi();
    $s .= '(';
    $s .= $this->getYearShengXiao();
    $s .= ')年 ';
    $s .= $this->getMonthInGanZhi();
    $s .= '(';
    $s .= $this->getMonthShengXiao();
    $s .= ')月 ';
    $s .= $this->getDayInGanZhi();
    $s .= '(';
    $s .= $this->getDayShengXiao();
    $s .= ')日 ';
    $s .= $this->getTimeZhi();
    $s .= '(';
    $s .= $this->getTimeShengXiao();
    $s .= ')时 纳音[';
    $s .= $this->getYearNaYin();
    $s .= ' ';
    $s .= $this->getMonthNaYin();
    $s .= ' ';
    $s .= $this->getDayNaYin();
    $s .= ' ';
    $s .= $this->getTimeNaYin();
    $s .= '] 星期';
    $s .= $this->getWeekInChinese();
    foreach ($this->getFestivals() as $f) {
      $s .= ' ('.$f.')';
    }
    foreach ($this->getOtherFestivals() as $f) {
      $s .= ' ('.$f.')';
    }
    $jq = $this->getJie() . $this->getQi();
    if (strlen($jq) > 0) {
      $s .= ' ('.$jq.')';
    }
    $s .= ' ';
    $s .= $this->getGong();
    $s .= '方';
    $s .= $this->getShou();
    $s .= ' 星宿[';
    $s .= $this->getXiu();
    $s .= $this->getZheng();
    $s .= $this->getAnimal();
    $s .= '](';
    $s .= $this->getXiuLuck();
    $s .= ') 彭祖百忌[';
    $s .= $this->getPengZuGan();
    $s .= ' ';
    $s .= $this->getPengZuZhi();
    $s .= '] 喜神方位[';
    $s .= $this->getPositionXi();
    $s .= '](';
    $s .= $this->getPositionXiDesc();
    $s .= ') 阳贵神方位[';
    $s .= $this->getPositionYangGui();
    $s .= '](';
    $s .= $this->getPositionYangGuiDesc();
    $s .= ') 阴贵神方位[';
    $s .= $this->getPositionYinGui();
    $s .= '](';
    $s .= $this->getPositionYinGuiDesc();
    $s .= ') 福神方位[';
    $s .= $this->getPositionFu();
    $s .= '](';
    $s .= $this->getPositionFuDesc();
    $s .= ') 财神方位[';
    $s .= $this->getPositionCai();
    $s .= '](';
    $s .= $this->getPositionCaiDesc();
    $s .= ') 冲[';
    $s .= $this->getChongDesc();
    $s .= '] 煞[';
    $s .= $this->getSha();
    $s .= ']';
    return $s;
  }

  public function __toString()
  {
    return $this->getYearInChinese() . '年' . $this->getMonthInChinese() . '月' . $this->getDayInChinese();
  }

}

/**
 * 阳历周
 * @package com\nlf\calendar
 */
class SolarWeek
{

  /**
   * 年
   * @var int
   */
  private $year;

  /**
   * 月
   * @var int
   */
  private $month;

  /**
   * 日
   * @var int
   */
  private $day;

  /**
   * 星期几作为一周的开始，1234560分别代表星期一至星期天
   * @var int
   */
  private $start;

  function __construct($year, $month, $day, $start)
  {
    $this->year = $year;
    $this->month = $month;
    $this->day = $day;
    $this->start = $start;
  }

  public function __toString()
  {
    return $this->year . '.' . $this->month . '.' . $this->getIndex();
  }

  public function toFullString()
  {
    return $this->year . '年' . $this->month . '月第' . $this->getIndex() . '周';
  }

  /**
   * 通过指定年月日获取阳历周
   * @param int $year 年
   * @param int $month 月，1到12
   * @param int $day 日，1到31
   * @param int $start 星期几作为一周的开始，1234560分别代表星期一至星期天
   * @return SolarWeek
   */
  public static function fromYmd($year, $month, $day, $start)
  {
    return new SolarWeek($year, $month, $day, $start);
  }

  /**
   * 通过指定日期获取阳历周
   * @param DateTime $date 日期DateTime
   * @param int $start 星期几作为一周的开始，1234560分别代表星期一至星期天
   * @return SolarWeek
   */
  public static function fromDate($date, $start)
  {
    $year = (int)date_format($date, 'Y');
    $month = (int)date_format($date, 'n');
    $day = (int)date_format($date, 'j');
    return new SolarWeek($year, $month, $day, $start);
  }

  public function getYear()
  {
    return $this->year;
  }

  public function getMonth()
  {
    return $this->month;
  }

  public function getDay()
  {
    return $this->day;
  }

  public function getStart()
  {
    return $this->start;
  }

  /**
   * 获取当前日期是在当月第几周
   * @return int
   */
  public function getIndex()
  {
    $firstDayWeek = (int)date('w', strtotime($this->year . '-' . $this->month . '-1'));
    if ($firstDayWeek === 0) {
      $firstDayWeek = 7;
    }
    return ceil(($this->day + $firstDayWeek - $this->start) / 7);
  }

  /**
   * 周推移
   * @param int $weeks 推移的周数，负数为倒推
   * @param bool $separateMonth 是否按月单独计算
   * @return SolarWeek|null
   */
  public function next($weeks, $separateMonth)
  {
    if (0 === $weeks) {
      return SolarWeek::fromYmd($this->year, $this->month, $this->day, $this->start);
    }
    if ($separateMonth) {
      $n = $weeks;
      try {
        $date = new DateTime($this->year . '-' . $this->month . '-' . $this->day);
      } catch (Exception $e) {
        return null;
      }
      $week = SolarWeek::fromDate($date, $this->start);
      $month = $this->month;
      $plus = $n > 0;
      while (0 !== $n) {
        $date->modify(($plus ? 7 : -7) . ' day');
        $week = SolarWeek::fromDate($date, $this->start);
        $weekMonth = $week->getMonth();
        if ($month !== $weekMonth) {
          $index = $week->getIndex();
          if ($plus) {
            if (1 === $index) {
              $firstDay = $week->getFirstDay();
              $week = SolarWeek::fromYmd($firstDay->getYear(), $firstDay->getMonth(), $firstDay->getDay(), $this->start);
              $weekMonth = $week->getMonth();
            } else {
              try {
                $date = new DateTime($week->year . '-' . $week->month . '-1');
              } catch (Exception $e) {
                return null;
              }
              $week = SolarWeek::fromDate($date, $this->start);
            }
          } else {
            $size = SolarUtil::getWeeksOfMonth($week->getYear(), $week->getMonth(), $week->getStart());
            if ($size === $index) {
              $lastDay = $week->getFirstDay()->next(6);
              $week = SolarWeek::fromYmd($lastDay->getYear(), $lastDay->getMonth(), $lastDay->getDay(), $this->start);
              $weekMonth = $week->getMonth();
            } else {
              try {
                $date = new DateTime($this->year . '-' . $this->month . '-' . SolarUtil::getDaysOfMonth($week->getYear(), $week->getMonth()));
              } catch (Exception $e) {
                return null;
              }
              $week = SolarWeek::fromDate($date, $this->start);
            }
          }
          $month = $weekMonth;
        }
        $n -= $plus ? 1 : -1;
      }
      return $week;
    } else {
      try {
        $date = new DateTime($this->year . '-' . $this->month . '-' . $this->day);
      } catch (Exception $e) {
        return null;
      }
      $date->modify(($weeks * 7) . ' day');
      return SolarWeek::fromDate($date, $this->start);
    }
  }

  /**
   * 获取本周第一天的阳历日期（可能跨月）
   * @return Solar|null
   */
  public function getFirstDay()
  {
    try {
      $date = new DateTime($this->year . '-' . $this->month . '-' . $this->day);
    } catch (Exception $e) {
      return null;
    }
    $week = (int)$date->format('w');
    $prev = $week - $this->start;
    if ($prev < 0) {
      $prev += 7;
    }
    $date->modify(-$prev . ' day');
    return Solar::fromDate($date);
  }

  /**
   * 获取本周第一天的阳历日期（仅限当月）
   * @return Solar|null
   */
  public function getFirstDayInMonth()
  {
    $days = $this->getDays();
    foreach ($days as $day) {
      if ($this->month === $day->getMonth()) {
        return $day;
      }
    }
    return null;
  }

  /**
   * 获取本周的阳历日期列表（可能跨月）
   * @return array
   */
  public function getDays()
  {
    $firstDay = $this->getFirstDay();
    $l = array();
    if (null == $firstDay) {
      return $l;
    }
    $l[] = $firstDay;
    for ($i = 1; $i < 7; $i++) {
      $l[] = $firstDay->next($i);
    }
    return $l;
  }

  /**
   * 获取本周的阳历日期列表（仅限当月）
   * @return array
   */
  public function getDaysInMonth()
  {
    $days = $this->getDays();
    $l = array();
    foreach ($days as $day) {
      if ($this->month !== $day->getMonth()) {
        continue;
      }
      $l[] = $day;
    }
    return $l;
  }

}

/**
 * 阳历月
 * @package com\nlf\calendar
 */
class SolarMonth
{

  /**
   * 年
   * @var int
   */
  private $year;

  /**
   * 月
   * @var int
   */
  private $month;

  function __construct($year, $month)
  {
    $this->year = $year;
    $this->month = $month;
  }

  public function __toString()
  {
    return $this->year . '-' . $this->month;
  }

  public function toFullString()
  {
    return $this->year . '年' . $this->month . '月';
  }

  /**
   * 通过指定年月获取阳历月
   * @param int $year 年
   * @param int $month 月，1到12
   * @return SolarMonth
   */
  public static function fromYm($year, $month)
  {
    return new SolarMonth($year, $month);
  }

  /**
   * 通过指定日期获取阳历月
   * @param DateTime $date 日期DateTime
   * @return SolarMonth
   */
  public static function fromDate($date)
  {
    $year = (int)date_format($date, 'Y');
    $month = (int)date_format($date, 'n');
    return new SolarMonth($year, $month);
  }

  public function getYear()
  {
    return $this->year;
  }

  public function getMonth()
  {
    return $this->month;
  }

  /**
   * 获取本月的阳历日期列表
   * @return array
   */
  public function getDays()
  {
    $l = array();
    $d = Solar::fromYmd($this->year, $this->month, 1);
    $l[] = $d;
    $days = SolarUtil::getDaysOfMonth($this->year, $this->month);
    for ($i = 1; $i < $days; $i++) {
      $l[] = $d->next($i);
    }
    return $l;
  }

  /**
   * 获取往后推几个月的阳历月，如果要往前推，则月数用负数
   * @param int $months 月数
   * @return SolarMonth|null
   */
  public function next($months)
  {
    try {
      $date = new DateTime($this->year . '-' . $this->month . '-1');
    } catch (Exception $e) {
      return null;
    }
    $date->modify($months . ' month');
    return SolarMonth::fromDate($date);
  }
}

/**
 * 阳历季度
 * @package com\nlf\calendar
 */
class SolarSeason
{

  /**
   * 年
   * @var int
   */
  private $year;

  /**
   * 月
   * @var int
   */
  private $month;

  /**
   * 一个季度的月数
   * @var int
   */
  public static $MONTH_COUNT = 3;

  function __construct($year, $month)
  {
    $this->year = $year;
    $this->month = $month;
  }

  public function __toString()
  {
    return $this->year . '.' . $this->getIndex();
  }

  public function toFullString()
  {
    return $this->year . '年' . $this->getIndex() . '季度';
  }

  /**
   * 通过指定年月获取阳历季度
   * @param int $year 年
   * @param int $month 月，1到12
   * @return SolarSeason
   */
  public static function fromYm($year, $month)
  {
    return new SolarSeason($year, $month);
  }

  /**
   * 通过指定日期获取阳历季度
   * @param DateTime $date 日期DateTime
   * @return SolarSeason
   */
  public static function fromDate($date)
  {
    $year = (int)date_format($date, 'Y');
    $month = (int)date_format($date, 'n');
    return new SolarSeason($year, $month);
  }

  public function getYear()
  {
    return $this->year;
  }

  public function getMonth()
  {
    return $this->month;
  }

  /**
   * 获取当月是第几季度，从1开始
   * @return int
   */
  public function getIndex()
  {
    return (int)ceil($this->month / SolarSeason::$MONTH_COUNT);
  }

  /**
   * 获取本季度的月份
   * @return array
   */
  public function getMonths()
  {
    $l = array();
    $index = $this->getIndex() - 1;
    for ($i = 0; $i < SolarSeason::$MONTH_COUNT; $i++) {
      $l[] = new SolarMonth($this->year, SolarSeason::$MONTH_COUNT * $index + $i + 1);
    }
    return $l;
  }

  /**
   * 季度推移
   * @param int $seasons 推移的季度数，负数为倒推
   * @return SolarSeason|null
   */
  public function next($seasons)
  {
    if (0 === $seasons) {
      return new SolarSeason($this->year, $this->month);
    }
    try {
      $date = new DateTime($this->year . '-' . $this->month . '-1');
    } catch (Exception $e) {
      return null;
    }
    $date->modify((SolarSeason::$MONTH_COUNT * $seasons) . ' month');
    return SolarSeason::fromDate($date);
  }

}

/**
 * 阳历半年
 * @package com\nlf\calendar
 */
class SolarHalfYear
{
  /**
   * 年
   * @var int
   */
  private $year;

  /**
   * 月
   * @var int
   */
  private $month;

  /**
   * 一个半年的月数
   * @var int
   */
  public static $MONTH_COUNT = 6;

  function __construct($year, $month)
  {
    $this->year = $year;
    $this->month = $month;
  }

  public function __toString()
  {
    return $this->year . '.' . $this->getIndex();
  }

  public function toFullString()
  {
    return $this->year . '年' . (1 === $this->getIndex() ? '上' : '下') . '半年';
  }

  /**
   * 通过指定年月获取阳历半年
   * @param int $year 年
   * @param int $month 月，1到12
   * @return SolarHalfYear
   */
  public static function fromYm($year, $month)
  {
    return new SolarHalfYear($year, $month);
  }

  /**
   * 通过指定日期获取阳历半年
   * @param DateTime $date 日期DateTime
   * @return SolarHalfYear
   */
  public static function fromDate($date)
  {
    $year = (int)date_format($date, 'Y');
    $month = (int)date_format($date, 'n');
    return new SolarHalfYear($year, $month);
  }

  public function getYear()
  {
    return $this->year;
  }

  public function getMonth()
  {
    return $this->month;
  }

  /**
   * 获取当月是第几半年，从1开始
   * @return int
   */
  public function getIndex()
  {
    return (int)ceil($this->month / SolarHalfYear::$MONTH_COUNT);
  }

  /**
   * 获取本半年的月份
   * @return array
   */
  public function getMonths()
  {
    $l = array();
    $index = $this->getIndex() - 1;
    for ($i = 0; $i < SolarHalfYear::$MONTH_COUNT; $i++) {
      $l[] = new SolarHalfYear($this->year, SolarHalfYear::$MONTH_COUNT * $index + $i + 1);
    }
    return $l;
  }

  /**
   * 半年推移
   * @param int $halfYears 推移的半年数，负数为倒推
   * @return SolarHalfYear|null
   */
  public function next($halfYears)
  {
    if (0 === $halfYears) {
      return new SolarHalfYear($this->year, $this->month);
    }
    try {
      $date = new DateTime($this->year . '-' . $this->month . '-1');
    } catch (Exception $e) {
      return null;
    }
    $date->modify((SolarHalfYear::$MONTH_COUNT * $halfYears) . ' month');
    return SolarHalfYear::fromDate($date);
  }
}

/**
 * 阳历年
 * @package com\nlf\calendar
 */
class SolarYear
{
  /**
   * 年
   * @var int
   */
  private $year;

  /**
   * 一年的月数
   * @var int
   */
  public static $MONTH_COUNT = 12;

  function __construct($year)
  {
    $this->year = $year;
  }

  public function __toString()
  {
    return $this->year . '';
  }

  public function toFullString()
  {
    return $this->year . '年';
  }

  /**
   * 通过指定年获取阳历年
   * @param int $year 年
   * @return SolarYear
   */
  public static function fromYear($year)
  {
    return new SolarYear($year);
  }

  /**
   * 通过指定日期获取阳历年
   * @param DateTime $date 日期DateTime
   * @return SolarYear
   */
  public static function fromDate($date)
  {
    $year = (int)date_format($date, 'Y');
    return new SolarYear($year);
  }

  public function getYear()
  {
    return $this->year;
  }

  /**
   * 获取本年的月份
   * @return array
   */
  public function getMonths()
  {
    $l = array();
    $month = SolarMonth::fromYm($this->year, 1);
    $l[] = $month;
    for ($i = 1; $i < SolarYear::$MONTH_COUNT; $i++) {
      $l[] = $month->next($i);
    }
    return $l;
  }

  /**
   * 年推移
   * @param int $years 推移的年数，负数为倒推
   * @return SolarYear|null
   */
  public function next($years)
  {
    if (0 === $years) {
      return new SolarYear($this->year);
    }
    try {
      $date = new DateTime($this->year . '-1-1');
    } catch (Exception $e) {
      return null;
    }
    $date->modify($years . ' year');
    return SolarYear::fromDate($date);
  }
}

/**
 * 节假日
 * @package com\nlf\calendar
 */
class Holiday
{

  /**
   * 日期，YYYY-MM-DD格式
   * @var string
   */
  private $day;

  /**
   * 名称，如：国庆
   * @var string
   */
  private $name;

  /**
   * 是否调休，即是否要上班
   * @var bool
   */
  private $work = false;

  /**
   * 关联的节日，YYYY-MM-DD格式
   * @var string
   */
  private $target;

  function __construct($day, $name, $work, $target)
  {
    if (strpos($day, '-')) {
      $this->day = $day;
    } else {
      $this->day = substr($day, 0, 4) . '-' . substr($day, 4, 2) . '-' . substr($day, 6);
    }
    $this->name = $name;
    $this->work = $work;
    if (strpos($day, '-')) {
      $this->target = $target;
    } else {
      $this->target = substr($target, 0, 4) . '-' . substr($target, 4, 2) . '-' . substr($target, 6);
    }
  }

  public function setDay($day)
  {
    $this->day = $day;
  }

  public function setName($name)
  {
    $this->name = $name;
  }

  public function setWork($work)
  {
    $this->work = $work;
  }

  public function setTarget($target)
  {
    $this->target = $target;
  }

  public function getDay()
  {
    return $this->day;
  }

  public function getName()
  {
    return $this->name;
  }

  public function isWork()
  {
    return $this->work;
  }

  public function getTarget()
  {
    return $this->target;
  }

  public function __toString()
  {
    return $this->day . ' ' . $this->name . ($this->work ? '调休' : '') . ' ' . $this->target;
  }
}