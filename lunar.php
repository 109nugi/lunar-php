<?php
/**
 * lunar
 * @author 6tail
 */

namespace com\nlf\calendar\util;

use com\nlf\calendar\Holiday;

date_default_timezone_set('PRC');
bcscale(12);

/**
 * 阳历工具，基准日期为1901年1月1日，对应农历1900年十一月十一
 * @package com\nlf\calendar\util
 */
class SolarUtil
{
  /**
   * 阳历基准年
   * @var int
   */
  public static $BASE_YEAR = 1901;

  /**
   * 阳历基准月
   * @var int
   */
  public static $BASE_MONTH = 1;

  /**
   * 阳历基准日
   * @var int
   */
  public static $BASE_DAY = 1;

  /**
   * 星期
   * @var array
   */
  public static $WEEK = array('日', '一', '二', '三', '四', '五', '六');

  /**
   * 每月天数
   * @var array
   */
  public static $DAYS_OF_MONTH = array(31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31);

  /**
   * 星座
   * @var array
   */
  public static $XING_ZUO = array('白羊', '金牛', '双子', '巨蟹', '狮子', '处女', '天秤', '天蝎', '射手', '摩羯', '水瓶', '双鱼');

  /**
   * 日期对应的节日
   * @var array
   */
  public static $FESTIVAL = array(
    '1-1' => '元旦节',
    '2-14' => '情人节',
    '3-8' => '妇女节',
    '3-12' => '植树节',
    '3-15' => '消费者权益日',
    '4-1' => '愚人节',
    '5-1' => '劳动节',
    '5-4' => '青年节',
    '6-1' => '儿童节',
    '7-1' => '建党节',
    '8-1' => '建军节',
    '9-10' => '教师节',
    '10-1' => '国庆节',
    '12-24' => '平安夜',
    '12-25' => '圣诞节'
  );

  /**
   * 几月第几个星期几对应的节日
   * @var array
   */
  public static $WEEK_FESTIVAL = array(
    '5-2-0' => '母亲节',
    '6-3-0' => '父亲节',
    '11-4-4' => '感恩节'
  );

  /**
   * 日期对应的非正式节日
   * @var array
   */
  public static $OTHER_FESTIVAL = array(
    '1-8' => array('周恩来逝世纪念日'),
    '1-10' => array('中国公安110宣传日'),
    '1-21' => array('列宁逝世纪念日'),
    '1-26' => array('国际海关日'),
    '2-2' => array('世界湿地日'),
    '2-4' => array('世界抗癌日'),
    '2-7' => array('京汉铁路罢工纪念'),
    '2-10' => array('国际气象节'),
    '2-19' => array('邓小平逝世纪念日'),
    '2-21' => array('国际母语日'),
    '2-24' => array('第三世界青年日'),
    '3-1' => array('国际海豹日'),
    '3-3' => array('全国爱耳日'),
    '3-5' => array('周恩来诞辰纪念日', '中国青年志愿者服务日'),
    '3-6' => array('世界青光眼日'),
    '3-12' => array('孙中山逝世纪念日'),
    '3-14' => array('马克思逝世纪念日'),
    '3-17' => array('国际航海日'),
    '3-18' => array('全国科技人才活动日'),
    '3-21' => array('世界森林日', '世界睡眠日'),
    '3-22' => array('世界水日'),
    '3-23' => array('世界气象日'),
    '3-24' => array('世界防治结核病日'),
    '4-2' => array('国际儿童图书日'),
    '4-7' => array('世界卫生日'),
    '4-22' => array('列宁诞辰纪念日'),
    '4-23' => array('世界图书和版权日'),
    '4-26' => array('世界知识产权日'),
    '5-3' => array('世界新闻自由日'),
    '5-5' => array('马克思诞辰纪念日'),
    '5-8' => array('世界红十字日'),
    '5-11' => array('世界肥胖日'),
    '5-23' => array('世界读书日'),
    '5-27' => array('上海解放日'),
    '5-31' => array('世界无烟日'),
    '6-5' => array('世界环境日'),
    '6-6' => array('全国爱眼日'),
    '6-8' => array('世界海洋日'),
    '6-11' => array('中国人口日'),
    '6-14' => array('世界献血日'),
    '7-1' => array('香港回归纪念日'),
    '7-7' => array('中国人民抗日战争纪念日'),
    '7-11' => array('世界人口日'),
    '8-5' => array('恩格斯逝世纪念日'),
    '8-6' => array('国际电影节'),
    '8-12' => array('国际青年日'),
    '8-22' => array('邓小平诞辰纪念日'),
    '9-3' => array('中国抗日战争胜利纪念日'),
    '9-8' => array('世界扫盲日'),
    '9-9' => array('毛泽东逝世纪念日'),
    '9-14' => array('世界清洁地球日'),
    '9-18' => array('九一八事变纪念日'),
    '9-20' => array('全国爱牙日'),
    '9-21' => array('国际和平日'),
    '9-27' => array('世界旅游日'),
    '10-4' => array('世界动物日'),
    '10-10' => array('辛亥革命纪念日'),
    '10-13' => array('中国少年先锋队诞辰日'),
    '10-25' => array('抗美援朝纪念日'),
    '11-12' => array('孙中山诞辰纪念日'),
    '11-28' => array('恩格斯诞辰纪念日'),
    '12-1' => array('世界艾滋病日'),
    '12-12' => array('西安事变纪念日'),
    '12-13' => array('南京大屠杀纪念日'),
    '12-26' => array('毛泽东诞辰纪念日')
  );

  /**
   * 是否闰年
   * @param int $year 年
   * @return bool 是否闰年
   */
  public static function isLeapYear($year)
  {
    $leap = false;
    if ($year % 4 == 0) {
      $leap = true;
    }
    if ($year % 100 == 0) {
      $leap = false;
    }
    if ($year % 400 == 0) {
      $leap = true;
    }
    return $leap;
  }

  /**
   * 获取某年某月有多少天
   * @param int $year 年
   * @param int $month 月
   * @return int 天数
   */
  public static function getDaysOfMonth($year, $month)
  {
    $d = SolarUtil::$DAYS_OF_MONTH[$month - 1];
    //公历闰年2月多一天
    if ($month == 2 && SolarUtil::isLeapYear($year)) {
      $d++;
    }
    return $d;
  }

  /**
   * 获取某年某月有多少周
   * @param int $year 年
   * @param int $month 月
   * @param int $start 星期几作为一周的开始，1234560分别代表星期一至星期天
   * @return int 周数
   */
  public static function getWeeksOfMonth($year, $month, $start)
  {
    $days = SolarUtil::getDaysOfMonth($year, $month);
    $week = date('w', strtotime($year . '-' . $month . '-1'));
    return ceil(($days + $week - $start) / count(SolarUtil::$WEEK));
  }
}

/**
 * 农历工具，基准日期为1900年十一月十一，对应阳历1901年1月1日，最远仅支持到2099年
 * @package com\nlf\calendar\util
 */
class LunarUtil
{
  public static $BASE_YEAR = 1900;
  public static $BASE_MONTH = 11;
  public static $BASE_DAY = 11;
  public static $BASE_INDEX = 0;
  public static $BASE_YEAR_JIU_XING_INDEX = 0;
  public static $BASE_YEAR_GAN_ZHI_INDEX = -4;
  public static $BASE_DAY_GAN_ZHI_INDEX = 15;
  public static $BASE_MONTH_ZHI_INDEX = 2;
  public static $BASE_WEEK_INDEX = 2;
  public static $LEAP_MONTH_YEAR = array(6, 14, 19, 25, 33, 36, 38, 41, 44, 52, 55, 79, 117, 136, 147, 150, 155, 158, 185, 193);
  public static $LUNAR_MONTH = array(0x00, 0x04, 0xad, 0x08, 0x5a, 0x01, 0xd5, 0x54, 0xb4, 0x09, 0x64, 0x05, 0x59, 0x45, 0x95, 0x0a, 0xa6, 0x04, 0x55, 0x24, 0xad, 0x08, 0x5a, 0x62, 0xda, 0x04, 0xb4, 0x05, 0xb4, 0x55, 0x52, 0x0d, 0x94, 0x0a, 0x4a, 0x2a, 0x56, 0x02, 0x6d, 0x71, 0x6d, 0x01, 0xda, 0x02, 0xd2, 0x52, 0xa9, 0x05, 0x49, 0x0d, 0x2a, 0x45, 0x2b, 0x09, 0x56, 0x01, 0xb5, 0x20, 0x6d, 0x01, 0x59, 0x69, 0xd4, 0x0a, 0xa8, 0x05, 0xa9, 0x56, 0xa5, 0x04, 0x2b, 0x09, 0x9e, 0x38, 0xb6, 0x08, 0xec, 0x74, 0x6c, 0x05, 0xd4, 0x0a, 0xe4, 0x6a, 0x52, 0x05, 0x95, 0x0a, 0x5a, 0x42, 0x5b, 0x04, 0xb6, 0x04, 0xb4, 0x22, 0x6a, 0x05, 0x52, 0x75, 0xc9, 0x0a, 0x52, 0x05, 0x35, 0x55, 0x4d, 0x0a, 0x5a, 0x02, 0x5d, 0x31, 0xb5, 0x02, 0x6a, 0x8a, 0x68, 0x05, 0xa9, 0x0a, 0x8a, 0x6a, 0x2a, 0x05, 0x2d, 0x09, 0xaa, 0x48, 0x5a, 0x01, 0xb5, 0x09, 0xb0, 0x39, 0x64, 0x05, 0x25, 0x75, 0x95, 0x0a, 0x96, 0x04, 0x4d, 0x54, 0xad, 0x04, 0xda, 0x04, 0xd4, 0x44, 0xb4, 0x05, 0x54, 0x85, 0x52, 0x0d, 0x92, 0x0a, 0x56, 0x6a, 0x56, 0x02, 0x6d, 0x02, 0x6a, 0x41, 0xda, 0x02, 0xb2, 0xa1, 0xa9, 0x05, 0x49, 0x0d, 0x0a, 0x6d, 0x2a, 0x09, 0x56, 0x01, 0xad, 0x50, 0x6d, 0x01, 0xd9, 0x02, 0xd1, 0x3a, 0xa8, 0x05, 0x29, 0x85, 0xa5, 0x0c, 0x2a, 0x09, 0x96, 0x54, 0xb6, 0x08, 0x6c, 0x09, 0x64, 0x45, 0xd4, 0x0a, 0xa4, 0x05, 0x51, 0x25, 0x95, 0x0a, 0x2a, 0x72, 0x5b, 0x04, 0xb6, 0x04, 0xac, 0x52, 0x6a, 0x05, 0xd2, 0x0a, 0xa2, 0x4a, 0x4a, 0x05, 0x55, 0x94, 0x2d, 0x0a, 0x5a, 0x02, 0x75, 0x61, 0xb5, 0x02, 0x6a, 0x03, 0x61, 0x45, 0xa9, 0x0a, 0x4a, 0x05, 0x25, 0x25, 0x2d, 0x09, 0x9a, 0x68, 0xda, 0x08, 0xb4, 0x09, 0xa8, 0x59, 0x54, 0x03, 0xa5, 0x0a, 0x91, 0x3a, 0x96, 0x04, 0xad, 0xb0, 0xad, 0x04, 0xda, 0x04, 0xf4, 0x62, 0xb4, 0x05, 0x54, 0x0b, 0x44, 0x5d, 0x52, 0x0a, 0x95, 0x04, 0x55, 0x22, 0x6d, 0x02, 0x5a, 0x71, 0xda, 0x02, 0xaa, 0x05, 0xb2, 0x55, 0x49, 0x0b, 0x4a, 0x0a, 0x2d, 0x39, 0x36, 0x01, 0x6d, 0x80, 0x6d, 0x01, 0xd9, 0x02, 0xe9, 0x6a, 0xa8, 0x05, 0x29, 0x0b, 0x9a, 0x4c, 0xaa, 0x08, 0xb6, 0x08, 0xb4, 0x38, 0x6c, 0x09, 0x54, 0x75, 0xd4, 0x0a, 0xa4, 0x05, 0x45, 0x55, 0x95, 0x0a, 0x9a, 0x04, 0x55, 0x44, 0xb5, 0x04, 0x6a, 0x82, 0x6a, 0x05, 0xd2, 0x0a, 0x92, 0x6a, 0x4a, 0x05, 0x55, 0x0a, 0x2a, 0x4a, 0x5a, 0x02, 0xb5, 0x02, 0xb2, 0x31, 0x69, 0x03, 0x31, 0x73, 0xa9, 0x0a, 0x4a, 0x05, 0x2d, 0x55, 0x2d, 0x09, 0x5a, 0x01, 0xd5, 0x48, 0xb4, 0x09, 0x68, 0x89, 0x54, 0x0b, 0xa4, 0x0a, 0xa5, 0x6a, 0x95, 0x04, 0xad, 0x08, 0x6a, 0x44, 0xda, 0x04, 0x74, 0x05, 0xb0, 0x25, 0x54, 0x03);
  public static $GAN = array('', '甲', '乙', '丙', '丁', '戊', '己', '庚', '辛', '壬', '癸');
  public static $POSITION_XI = array('', '艮', '乾', '坤', '离', '巽', '艮', '乾', '坤', '离', '巽');
  public static $POSITION_YANG_GUI = array('', '坤', '坤', '兑', '乾', '艮', '坎', '离', '艮', '震', '巽');
  public static $POSITION_YIN_GUI = array('', '艮', '坎', '乾', '兑', '坤', '坤', '艮', '离', '巽', '震');
  public static $POSITION_FU = array('', '巽', '巽', '震', '震', '坎', '离', '坤', '坤', '乾', '兑');
  public static $POSITION_CAI = array('', '艮', '艮', '坤', '坤', '坎', '坎', '震', '震', '离', '离');
  public static $POSITION_TAI_DAY = array('占门碓外东南', '碓磨厕外东南', '厨灶炉外正南', '仓库门外正南', '房床厕外正南', '占门床外正南', '占碓磨外正南', '厨灶厕外西南', '仓库炉外西南', '房床门外西南', '门鸡栖外西南', '碓磨床外西南', '厨灶碓外西南', '仓库厕外西南', '房床厕外正南', '房床炉外正西', '碓磨栖外正西', '厨灶床外正西', '仓库碓外西北', '房床厕外西北', '占门炉外西北', '碓磨门外西北', '厨灶栖外西北', '仓库床外西北', '房床碓外正北', '占门厕外正北', '碓磨炉外正北', '厨灶门外正北', '仓库栖外正北', '占房床房内北', '占门碓房内北', '碓磨厕房内北', '厨灶炉房内北', '仓库门房内北', '门鸡栖外西南', '占门床房内南', '占碓磨房内南', '厨灶厕房内南', '仓库炉房内南', '房床门房内南', '门鸡栖房内东', '碓磨床房内东', '厨灶碓房内东', '仓库厕房内东', '房床炉房内东', '占大门外东北', '碓磨栖外东北', '厨灶床外东北', '仓库碓外东北', '房床厕外东北', '占门炉外东北', '碓磨门外正东', '厨灶栖外正东', '仓库床外正东', '房床碓外正东', '占门厕外正东', '碓磨炉外东南', '仓库栖外东南', '占房床外东南', '占门碓外东南');
  public static $POSITION_TAI_MONTH = array('占房床', '占户窗', '占门堂', '占厨灶', '占身床', '占床仓', '占碓磨', '占厕户', '占门房', '占房床', '占炉灶', '占房床');
  public static $ZHI = array('', '子', '丑', '寅', '卯', '辰', '巳', '午', '未', '申', '酉', '戌', '亥');
  public static $JIA_ZI = array('甲子', '乙丑', '丙寅', '丁卯', '戊辰', '己巳', '庚午', '辛未', '壬申', '癸酉', '甲戌', '乙亥', '丙子', '丁丑', '戊寅', '己卯', '庚辰', '辛巳', '壬午', '癸未', '甲申', '乙酉', '丙戌', '丁亥', '戊子', '己丑', '庚寅', '辛卯', '壬辰', '癸巳', '甲午', '乙未', '丙申', '丁酉', '戊戌', '己亥', '庚子', '辛丑', '壬寅', '癸卯', '甲辰', '乙巳', '丙午', '丁未', '戊申', '己酉', '庚戌', '辛亥', '壬子', '癸丑', '甲寅', '乙卯', '丙辰', '丁巳', '戊午', '己未', '庚申', '辛酉', '壬戌', '癸亥');
  public static $ZHI_XING = array('', '建', '除', '满', '平', '定', '执', '破', '危', '成', '收', '开', '闭');
  public static $TIAN_SHEN = array('', '青龙', '明堂', '天刑', '朱雀', '金匮', '天德', '白虎', '玉堂', '天牢', '玄武', '司命', '勾陈');
  private static $YI_JI = array('祭祀', '祈福', '求嗣', '开光', '塑绘', '齐醮', '斋醮', '沐浴', '酬神', '造庙', '祀灶', '焚香', '谢土', '出火', '雕刻', '嫁娶', '订婚', '纳采', '问名', '纳婿', '归宁', '安床', '合帐', '冠笄', '订盟', '进人口', '裁衣', '挽面', '开容', '修坟', '启钻', '破土', '安葬', '立碑', '成服', '除服', '开生坟', '合寿木', '入殓', '移柩', '普渡', '入宅', '安香', '安门', '修造', '起基', '动土', '上梁', '竖柱', '开井开池', '作陂放水', '拆卸', '破屋', '坏垣', '补垣', '伐木做梁', '作灶', '解除', '开柱眼', '穿屏扇架', '盖屋合脊', '开厕', '造仓', '塞穴', '平治道涂', '造桥', '作厕', '筑堤', '开池', '伐木', '开渠', '掘井', '扫舍', '放水', '造屋', '合脊', '造畜稠', '修门', '定磉', '作梁', '修饰垣墙', '架马', '开市', '挂匾', '纳财', '求财', '开仓', '买车', '置产', '雇庸', '出货财', '安机械', '造车器', '经络', '酝酿', '作染', '鼓铸', '造船', '割蜜', '栽种', '取渔', '结网', '牧养', '安碓磑', '习艺', '入学', '理发', '探病', '见贵', '乘船', '渡水', '针灸', '出行', '移徙', '分居', '剃头', '整手足甲', '纳畜', '捕捉', '畋猎', '教牛马', '会亲友', '赴任', '求医', '治病', '词讼', '起基动土', '破屋坏垣', '盖屋', '造仓库', '立券交易', '交易', '立券', '安机', '会友', '求医疗病', '诸事不宜', '馀事勿取', '行丧', '断蚁', '归岫', '无');
  private static $DAY_YI_JI = '30=192531010D:838454151A4C200C1E23221D212726,030F522E1F00=2430000C18:8319000776262322200C1E1D,06292C2E1F04=32020E1A26:791715795B0001025D,0F522E38201D=162E3A0A22:790F181113332C2E2D302F157954,7001203810=0E1A263202:79026A176576036A,522E201F05=0D19250131:7911192C2E302F00030401060F1571292A75,707C20522F=0C18243000:4F2C2E2B383F443D433663,0F01478A20151D=0E1A320226:3840,0001202B892F=14202C3808:3807504089,8829=0E1A263202:383940,6370018A75202B454F6605=32020E1A26:38394089,0001202B22=16223A0A2E:384C,8A2020=2B3707131F:2C2E5B000739337C38802D44484C2425201F1E272621,5229701535=121E2A3606:2C2E2D2B156343364C,0F4729710D708A20036A1904=0D19250131:5040262789,0F7129033B=202C380814:5040000738,0F7D7C584F012063452B35=1A2632020E:50400089,8813=1A2632020E:69687011180F791966762627201E,0352292E8034=182430000C:291503000D332E53261F2075,0F5238584F450B=000C182430:297170192C2E2D2F2B3E363F4C,0F52156320010347200B=131F2B3707:297115030102195283840D332C2E,0F1F5863201D8A02=222E3A0A16:261F1E20232289,52290058363F32=16222E3A0A:261F201E232289,8D39=0D19310125:262322271E201D21,52450F4F09=0D19253101:262322271E202189,1F4526=16222E3A0A:262322271F1E20,712906=0F1B273303:17262322274050,80387C6B2C=0915212D39:1707702C2E71291F20,0F52000106111D15=16222E3A0A:170007386A7448363F261F1E,030F79636F2026=030F1B2733:1784832C2E5B26201F,0F010D2913=182430000C:175447440D15838477656A49,2B2E1F8A202228=101C283404:70504C7889,8803=0D19250131:700F181126151E20001A7919,8D2F=0915212D39:705283845B0D2F71,0F202E4106=3606121E2A:70786289,06802E1F23=1824000C30:70076A363F,292017=202C380814:700718111A302F717566,0F2B2E2026=3B0B17232F:70545283842E71291A7933192A5D5A5040,090C384F45208A1D6B38=212D390915:7039170F45513A2C2E7129242526271F201D,00010352153A=15212D3909:703911170E2C2E2D2F4B15712952633D,092B8A2027=010D192531:702D155483840F63262720,53292F017D4F38442B2E1F4717=16222E3A0A:705C4C39171A4F0E7971295B4C5248,0F2E1F1D37=1A2632020E:2E260F27201F,523815292F1A22=0E1A260232:64262322271F2021,0F2F293822=2F3B0B1723:161A0F1526271F4C,586103473818=2430000C18:161A7889,292E1F0F386131=17232F3B0B:04795B3F651A5D,0F5201062016=14202C3808:04170F79195D1A637566363F76,01522E8A2039=132B37071F:0470170F191A134C8384662426232227201E,8D08=0D19253101:040370181123220F1326271E2021,29153B=0D19310125:040307177938494C,0F26207017=0E2632021A:0403010218111A17332C2E2D2B15713E6575,45382064291D=142C380820:04033918110F0D2C2E7129332D2B72528384547566,8D1C=1830000C24:040318111A17332C15290D200C7A,4745063835=0F2733031B:040318111A16175B795452848315302F6563395D,387029202E=14202C3808:04031975363F6366,0F5401202C5283842E2F1E=0E1A320226:0403080618111A16332E2F152A09537919702C5445490D75072B,8063203820=182430000C:04067033392C7161262322271E1D210C,8D2F=101C283404:3F4889,881C=2733030F1B:3F74397677658988,0F3847201D=293505111D:3F8B657789,0F2029702E7D35=111D293505:3F8B6589,1F200A=020E1A2632:3F656477,0F2B71292005=111D290535:3F6589,8810=0F1B273303:3F88,2B38200F1C=293505111D:0F83843D363F776424,15462F2C52032971152A=0F1B273303:0F17795B54838458,52807C3811=121E2A3606:0F172C2E387129363F7566512C2E2D4E4461,01034752203A=172F3B0B23:0F171511793F76584C,0347200C1D20=2D39091521:0F175B3975660745514F2B4825201E211D,010352292E2E=0F1B273303:0F170070792C2E261F,040341232228=05111D2935:0F1700707129385C363F3D1F1E232226,80412B202F14=14202C3808:0F17000728705448757A,522E1F15562F05=30000C1824:0F17000102061979454F3A15477677,241F8A2021=2F3B0B1723:0F17000102060370392E52838453331F,452F2C266A79292B203810=0C18243000:0F170001020E032A70692C2E302F802D2B0D7129474C201F2322,5211183809615D34=1A2632020E:0F171170792F5B1566770001032C2B802D,29387C207134=14202C3808:0F0D33000103452E528384297115752620,63386F7014=15212D3909:0F7045332C2E71201F1D21,4701155229530327=101C283404:0F70161715232238838426271F20,7D035219=121E2A3606:0F705B0004037C5D15653F1F26,522B473809=131F2B0737:0F705215261E20,012E1F25=182430000C:0F707B7C00012F75,52201B=2531010D19:0F706A151E201D528384544466,47010C2E292F2C3820=14202C3808:0F707500261E20,382E1F05=3606121E2A:0F161A17452F0D33712C2E2B5443633F,150170208A0327=0E1A263202:0F150370002E0D3979528384532971331F1E20,477D0D=06121E2A36:0F5B8370000102060403161A494447,386A418A201A=17232F3B0B:0F03700D332C2E2971152F52838463,01004547380C26=101C283404:0F03700D33195284835329711563,01260038206B0E=131F2B3707:0F03706A4F0D332C528384532E29711563,450075000F=131F2B3707:0F0370010239332E2C19528384532971156375262720,8D18=17232F3B0B:0F0370390D332C192E2971637547202322,581528=0E1A263202:0F0302791566046F,29710D722A38528384202E4530=0E1A263202:0F030102392E15634447001F1E,293845200D707538=1E2A360612:0F0300017039712952542D2C302F80380D2A363F3349483E616320,1118150C1F2E20=33030F1B27:0F03000102700D29713963451F0C20,528338542F15806128=121E2A3606:0F030001027039452971150D332C2F6327,2052838403=2C38081420:0F030001022A0D3945297115528384630D7020,476A382E1F4426=010D192531:0F03390D332C1929711563261D2E2322,382000521118750C706B15=131F2B3707:0F033915666A52261E272048,382E2F6329712C0114=0D19253101:0F52838403700D332C29712E1F27201E2322,1545017505=131F2B3707:0F528400012E7129,092026=3707131F2B:0F528471295B795D2B155333565A446375661F201E272621,00016B0C4113=14202C3808:0F280001363F8B4326232220,2E1F47032F7D35=16222E3A0A:0F0211195465756679,2F384570202B6A10=15212D3909:0F0102700D332C2E2F0319528384531529716345261F2322,8D32=101C283404:0F0102037039330D5284832971152E1F0C,0026206B37=16222E3A0A:0F003854,20521D2106=020E1A2632:0F00175058,5D6B80382E16=1B2733030F:0F00701784831952712C2E1526271F,033806201F=2B3707131F:0F00701A17830E544C5C0E78,7129632E1F38208A452F16=15212D3909:0F00040370396A742E15444948,458A384F2021=16222E3A0A:0F005B261F20,2E2F1D=2531010D19:0F0003450D3329712C2E2F1575,528A63705A20587D7C12=17232F3B0B:0F00030D70332C2E3952838453542971156375,6B2019=1B2733030F:0F000301020D297115332E1F0C,165220262E=121E2A3606:0F00030102700D332E2C192971155383846375261F1E20,8D1F=33030F1B27:0F00030102700D19297115332C2B535448,2E45208A00=2632020E1A:0F00030102705283842E544779,2920454F754C3836=16222E3A0A:0F0052037029710D332C15,7545584F8A201D2121=121E2A3606:0F00074850,8A2036=0D25310119:0F00071A706A717677492923221E202726,80522E1F39=1E2A360612:0F006A385040740717,1F70631E=212D390915:0F006A1938271779,565A4575522F801F1E632B=121E2A3606:0F00010D0302703352838453297115632E,208A454F2B=0E1A263202:0F000170390D332E2971152F63751F1E20,52846A381F=14202C3808:0F000106387129,2E1F24=14202C3808:0F0001062E7129,522010=0814202C38:0F0001062871292E7C528384032C5C2A15767765,11185D8A206B08=131F2B0737:0F0001067C1F20,522900=202C380814:0F0001020D700339332C192A83842971152E1F0C20262322,065256386110=111D293505:0F000102700D332C2E297115383F631F20,0347562B=14202C3808:0F000102700D332C712E15261F201E,80036A61473831=0C18243000:0F000102700D335283845329711563,38048A7D45202A=14202C3808:0F000102702E15471F1E,294F2B452C2F268011=0D19253101:0F0001022E792D3E75663D19,472063703852292B39=222E3A0A16:0F0001022E154826271F1E203874362322,036312=0D19253101:0F000102032971152C2E19,4720637038522B15=111D293505:0F000102030D70332E3919528384532971152B2F201F0C,8D1B=232F3B0B17:0F000102030D7033528384534529711520,63475814=131F2B3707:0F000102030D332C2E195283845329716375261E2322,8D19=15212D3909:0F00010203700D332C2E1929711552838453637526202322,8D09=111D293505:0F00010203700D332E2F192971152B52838453631F20,8D33=1A2632020E:0F00010203700D332E2F1929711552838453261F201E2322,8D03=2E3A0A1622:0F0001020370332C2E2F1575261F,2971476A458352380C=111D293505:0F0001020370332E2F0D19297115637566302B2C3979,8D08=000C182430:0F000102037039297175261F1D21,454F2E1563410F=17232F3B0B:0F0001020370390D703319297115632E2C752620212322,8D07=3606121E2A:0F0001020370390D332C1929712E157563548384534C,20248A38=16222E3A0A:0F0001020370390D1952838453542971631F0C,152036=14202C3808:0F00010203703915632719792322,80262045297158750F=111D293505:0F00010203528384157033,752971206B452F2B262E05=3404101C28:0F00010206030D7129302F79802D7C7C2B5C4744,11701D2052843833=111D293505:0F00010206181139702E1F686F6A792D2C2E304E15337566491F23221D21,52296B0D800D=15212D3909:0F000102070D70332C2E19528384297115637526201E2322,8D05=2C38081420:0F0001021A175D2C19152E302F7183846379,8A20704F7545410A=131F2B3707:0F001A651707,565A58202E1F476320=121E36062A:0F11707B7C5271291E20,2E1F39=111D293505:0F11700001522E71291F20,2B07=131F2B0737:0F11700001397129,2E2002=111D293505:0F11707129,2E1F2002=131F37072B:0F1152702E2F71291F20,000103=131F37072B:0F1152702E2F71291F20,7A3A=111D293505:0F117B7C2C2E71291F20,520300=111D350529:0F110001702E2F71291F20,0621=101C280434:0F11000170717B,522E1F0A=06121E2A36:0F110001708471292E1F20,03388051561C=121E2A3606:0F1100017B7C702E7129,522B22=2D39091521:0F110039702C2E522F1574487B7C2D4E804B,098A204538612B=05111D2935:0F1118795B65170002195D,52382E8A201E=2531010D19:0F111829711500010370390D332E750C201F,4552832F382B8004=2A3606121E:0F1118175C000301027039450D29332C2E2F15631F,8A582020=31010D1925:0F1118032A0D545283841A802D2C2E2B71296366774744201F26232221,010900150C06=2C38081420:0F11180300706A2E1549466319,292F26806B382B20754506=2E3A0A1622:0F1118528384530001035C53702971152B332C2E63201F1E23222621,6B75452D4F802E=111D293505:0F1118060300017B7C792E39767566261F20,7129805136=232F3B0B17:0F111800171A454F514E3A3871157765443D23221E262720,80612E1F1C=212D390915:0F11180003706A4F0D332C2E1929711571335363751F20262322,524746416128=3B0B17232F:0F111800037039450D2971332C632026,1F2E2B38528327=3B0B17232F:0F11180006032A0D700D332E011954838471152C202322,58477D630C=0814202C38:0F1118000106287129705B032C2E302F802D4E2B201F,528458384108=380814202C:0F11180001027039302971542F7526201E,63472E151F583A=1E2A360612:0F1118000102030D70332C2E192971158384535426201E2322,471F1B=1F2B370713:0F1118000102030D70332C2E195283845329711563261F0C20,4745752522=3505111D29:0F1118000102030D70332E2C192971153953631F0C262720,5284612528=390915212D:0F111800010203700D332C2E192971152F4B49471F270C2322,52562B2029=390915212D:0F111800010203391929710D1552838453,2075708A456309410F=0A16222E3A:0F111800010206032A0D09717029092D302F1575761320,521F47251D=1F2B370713:0F1118000102111A1703154F2C2E382D2F807566,7163708A1F207D2A=05111D2935:0F111800017C5C2C2E7129,527015382021=2B3707131F:0F11185C0370332D152322528384636626271E,2F292C2E1F00010601=2430000C18:0F11185C0001092A0D7014692983847B7C2C2E302F802D2B,06454F208A2E=0D19253101:0F11181200171A7919547638,5215201D09=3A0A16222E:0F1A1716007015713F261F2720,5263587D2B470304=111D293505:0F1A0070153871291F20,7A7629=010D192531:0F181179005B712980152D4E2A0D533358,5270208A11=0814202C38:0F181138171A7975665B52845415,47701F8A2013=121E2A3606:0F181117795B5C007054292A0D690403332D2C2E66632B3D,8A454F3822=121E2A3606:0F1811705200012E71291F20,382A=16222E0A3A:0F1811705200012E71291F20,062B27=14202C0838:0F18117052000171291E20,2E1F27=16222E0A3A:0F18117000012E71291F20,527A06=111D290535:0F1811700001062E2F1F20,712912=14202C3808:0F181100062839707952542C2E302F03565A7566441F1E,0D29802B2029=1824300C00:0F181100012C2E7129,522025=121E2A0636:0F18110001261F20,03522E=0915212D39:0F18110001702C2E7129,6F454F098A2025=030F1B2733:0F18110001702C2E71291F0D2B152F2127,5283162014=16222E3A0A:0F18110001707B7C0D7129,52565A152B2034=17232F3B0B:0F1811000104037115454F7677657B7C392023222726210C,52092E1F27=3707131F2B:0F181100010603797B7C802D302F2B6743441F202322,2952477D2528=14202C0838:0F181100017B7C2E71291F20,036F33=0D19253101:0F18110001027939706954528384685D15565A75201E1D26,29032E11=182430000C:0F1811000102062A0D2C2D804B2B672E2F7129,70471F8A2030=17232F3B0B:0F5C707971292C2E0E032A0D6A79804B2D8C2B3348634C,52110915462031=15212D3909:0F5C5B0001032A0D7052842C2E71291F20,1118517D462B=0F1B273303:0F5C111800015B712952841F20,756A251A=2733030F1B:1545332C2E2F84836375662620,0F0003700D71292B1C=0E1A320226:1516291211020056,06382007=000C182430:1551000403706A454F3A3D771F262322271E1D21,382B41522016=17232F3B0B:1500443626271F1E,29710F47380D19520337=182430000C:150001021745512E443D65262322,2B63387C18=192531010D:151A83842627202322,580F7003632E1F297C26=0E1A263202:15391A302F83845475662627201E,0F702E4629004708=3606121E2A:5B000102073911522C302F3A678C363F33490D482425200C1E2322,0F15382E1F6116=1E2A360612:5B71297000010611182A0D39792C2E332D4E712980152C1F202621,52454F3804=2C38081420:5B11180001020328700D332C2E195283847115632F751F2720,290F476630=0C18243000:201E27262322,8902=3404101C28:2A0D11180F52848353037039156358332C2E,3820002628=010D192531:4089,030F565A61206B27=1824300C00:4089,8836=1C28340410:0370833F0F6A5215,010D582E1F202C2F582938=112935051D:03700F,79192C2E2D715275262322271F201D217936=112935051D:0370110F45510D3371290941614C522623222720,8D3B=152D390921:03047039171A533852443D363F,8D11=0F1B273303:030402111A16175B4F3A2B153E0079015D5452848369026A51,7006200F05=0F1B270333:03041A174533302F56795B3E808339528454,700F292026=121E2A3606:037B7C2E2F261F20,0F14=1E2A360612:030270170F45513A2C7129528384702A0D532D2C24252623222720,155A382E1F2F=1B2733030F:03027011170D332D2C2E2F716152838454,010F201F2C=121E2A3606:03027039450D332C2F2D2971528384636626202322,581535=212D390915:03020E0F18110D332C2E2D2F4971293E615244756653,8A202531=1B2733030F:030102703945802D2C512B7129092322270C7566,112E528325=2D39091521:030102062C2E543E3D636679,380D19462971001F=293505111D:03111A171538193E3F,0F632C2E70454F200C19=17232F3B0B:031A2B7915656A,0F177001204529710D632E2F02=32020E1A26:033945302F838475262720,297071000F2E1F3810=17232F3B0B:0339332C2E1575201E26,0F520D631F29712A72473826=390915212D:0339332C2E302B66201D1F27,0D2971010015520F6B0E=15212D3909:03392D2E332F211D201F1E27,0F7015380029710D195824=16223A0A2E:036F791E20,522E1F31=1D29350511:5283845B79037B7C802D2C2E4E302F2B38493D4463664C1F2021,0F0D712917=15212D3909:5283845303702971150D2F,388A6A6D0F2012=111D293505:528384530370331929272E2B2F631F1D20,0F156B380E=0D19253101:528384530339454F0D297115332E2F637520,0F00705802=2A3606121E:528384530339332E152C2F58631F20,380D000F2900=283404101C:528384530003010215392C20,1112180F29560D2E1F754511=15212D3909:5283845300031929150D332C2E63,0F217045208A717521=3505111D29:5283845300010670528384802D2C2E4E155B201F1E232221,380F71296A0E=17232F3B0B:5283845354037029711575262720,631F58000F2E38010D=111D293505:528384000103451915332C2E631F2720,29716A0D0F7019=1D29350511:5283840001032E1570637566302F391F,0F4729712030=16222E3A0A:5283845479036A2627201E,0F380D70297115012F1A=1F2B370713:528384542E03700F1118705469565A7566631F1E2021,297138000C31=121E2A3606:52838454443D65002C2E15495D1F,0F417D712B38630F=0D19253101:5283845444360F11756415,2C2F29016B472E2B20381D=212D390915:528384545363000103332E15,0F1F197029710D757D2032=121E2A3606:528384546315332C2E2F26201F2322,0F0D45002971756B17=192531010D:52838454754C2971150301022E,0F63206A0938268A4117=1B2733030F:52848353000103297115332E2F19,0F8A514F6A6620754526=1824300C00:528403395B2F1E20,0F012D=0B17232F3B:5254700001020612692D4E584647336375662E1F1E,71290D262037=131F2B3707:525400045B17791A565D754C7866,2E1F207C34=0F2733031B:483F89,8838=232F3B0B17:767779392623222789,152B1F1D200E=0A16222E3A:767789,528300292025=14202C3808:7665261F20,0F291A=222E3A0A16:7665262322271F201E21,0F0029807124=1824000C30:7889,292E1F24=101C283404:8D,8832=1D29350511:63767789,522E0006206B31=131F2B3707:7B7C343589,0F7038=2632020E1A:7B7C343589,520F20=0E1A260232:7B34,8812=1C28340410:02703918110F7919155283756626232227201E,012C2E1F0C29=121E2A3606:020F11161A17454F2C2E2D302F2B38434C,2070016328=1824300C00:02060418110D332C2E415B637566262322271F20,520F23=142038082C:07504089,0F010C=15212D3909:07262723221F40,0F7129523B=2430000C18:0717363F1A2C4F3A67433D8B,71290F0103471A=2531010D19:0704031118528384542D2E4E49201F1E1D2127,292B000C3B=283404101C:073F7765644889,012014=111D293505:074048261F202322,0F71454F1500018008=111D293505:07404826271F1E2089,882C=0D19253101:07565A5283845463756677261F20,010F15296120=2F3B0B1723:07487677393F89,0F2952151F1D30=111D293505:074889,06520F3808=17232F3B0B:074889,883B=131F2B3707:074889,8832=15212D3909:07762623221F1E20,000F1552296B2F2A=0D19253101:0776776A742623221F200C211D1E,11180F2F5206802B0B=04101C2834:0776776564,000F29382011=101C283404:0706397B7C794C636A48,520F7129472026=14202C3808:077C343589,880A=380814202C:076A79040363660F5D363F,52292E1F20382F15560123=16223A0A2E:076A696819,0F2918=222E3A0A16:076A171552847983546578,712970010F2D=182430000C:076A48,45752F29384C0F204F612B30=131F2B3707:076A7626271F1E20,0D0F29382F2E0E=0814202C38:07343589,065238=1C28340410:070039201F0C2789,06030F292F23=101C280434:076564,0F292002=0D19253101:073918111A17332C2E71292322271F1E20481D45548384,38002F702A=1824300C00:7C343589,8801=172F3B0B23:6A79363F65,0F292B7118=1B2733030F:6A170F19,5845754C201F4F382430=1B2733030F:6A170F1963766F,5452201F32=0C18243000:6A0339332C20528384531563,29713801000F0C47806B3B=2A3606121E:77766564000789,0F52201E8A01=202C380814:1F2027260076232289,0F29528339=0F1B330327:3435,8809=0F1B273303:34357B7C,8818=121E2A3606:34357B7C7789,0F291D=232F3B0B17:34357B7C89,0F2021=33030F1B27:34357B7C89,030F27=390915212D:34357B7C89,712917=1D29350511:3435073989,8802=2C38081420:34357C89,0111180F292006=30000C1824:34357C89,71291A=14202C3808:34357C89,8A2036=182430000C:3435000789,8835=232F3B0B17:34350089,0F2025=3707131F2B:34353989,0F2037=0D25310119:343589,0F52202D=0F1B273303:343589,0F7152290D=131F2B3707:343589,8830=121E2A3606:343589,881C=16222E3A0A:343589,8819=131F2B3707:343589,880F=15212D3909:343589,8832=14202C3808:343589,8813=0D19253101:343589,8811=17232F3B0B:343589,881E=142C380820:017018110F1A2E15495247838463462322271F,8D03=0F1B270333:0103040818111A155284262322271E20217A79708330,38472E631B=14202C3808:010670170F0E3A294152838454262322271F201E,2E1815442C=0F1B273303:01067071292C2E1F20,1103150F520A=17232F0B3B:010670181126271F202165,293816=182430000C:0106111839513A2C2E2D2F8C804B4723221F63,7152292037=0F2733031B:010203040618110F3315292A271D200C6339171A712C2E30491E21,7A21=0E1A260232:010206040318110F2E292A27200C70072C302F541F392B49,381512=1A2632020E:010206110F452C2E7129095B5226232227201F0C,58804B036B2B381C=142C380820:01023918112E2D493E52756624262322271F20,8D12=121E2A3606:008354,06462F2E1F27=030F1B2733:00797084831754,0F2E472D4E1F06=0D19250131:0079701811072C2E01060F33152627200C7A1A302F4576631F2B,8052382900=172F3B0B23:00790F072C2E0103047018111A262322271E7A302F5448637545,293815561E=101C340428:007952151E20,0F2E1F33=0F1B273303:007984831A160F1719,632E20471D6B01=152D390921:0079110F0304062A528423222627207A19701A2C2E2F5D83,294513=0F1B273303:0079181A165B332F2B262322271E2021030469702D4E49712930845D,454F05=152139092D:0079192E2F030417332D1552847A5D,4E201F=162E3A0A22:003826232277,632E20523A=0D19310125:0038262389,521513=1C28340410:00384089,0F202E157C07=04101C2834:00384089,152967631F=101C283404:00384740,0F2037=1C28340410:00387765504089,0F157C04=131F37072B:00385476,521F13=16222E3A0A:003854767789,2E1F522010=131F2B3707:003854637519,205D1D1F52151E210F=121E2A3606:003889,52201F1D4733=121E2A3606:003889,881F=212D390915:001D23221E2789,52290F2E1F202B=07131F2B37:002C7080305C784C62,2E1F472001=283404101C:004D64547589,0F292E=131F2B3707:005040,522E1F0F2C2004=3404101C28:005089,032C2E1F33=182430000C:005089,8815=192531010D:00261F23221E201D2189,8D12=131F2B3707:00261F2322271E200C89,8D1E=121E2A3606:0026271E20,2F2E1F33=16222E3A0A:002627241F1E20232289,8D33=14202C3808:002627651E2027232289,881B=182430000C:00262789,292C2E1F2B2F2A=07131F2B37:00262322271F1E203F8B65,52290F038002=15212D3909:001779332D2322271E2007760304,38290F1C=1F2B370713:00173883546365756619,466115201F701D47522434=0D25310119:00170F79191A6540,712909387C2015=0E1A263202:00170F332C2E2D2F802952443F26232227201F,15637C383A=132B37071F:00170F7665776489,8D2A=390915212D:00177689,0F52804F2507=2E3A0A1622:00177179546A76,0F52443D1F2D=0915212D39:0070,0F292C2E791F13=131F2B3707:007083624C,0F38202E7D4F45471F7107=380814202C:00704F0D332C2E2D15363F261F20274C,0F2906036F4703=3404101C28:00702C2E164C157126271F1E202425363F,29386A032B0F=0F1B273303:00700F1715262720,472E386309=15212D0939:007022230726,2E17712952302F15=15212D3909:00704889,8834=1C28340410:0070784889,0345201F21=2D39091521:007007482089,2E1F58470B=0D19253101:0070071A010618110F5B52846775,6326202E=16222E3A0A:00701A17794C0F302F715475,2E454F8A20243A=0F1B330327:007018111A1617192E15382627201F656477,4F090A=0F1B273303:002E2F18110F5B3315292A26271F20210C7A70710102393E19,035A37=14202C3808:002E4344793F26271F20,03702C2F292B381A31=0E1A263202:00161A5D454F153826201E27,7D0D2904=152139092D:0004037039180F332D152952262322271F0C533A83,4117804735=1F2B370713:0004037B7C0F79494766754667,80293869208A1E=162E3A0A22:00040301067018111A0F332C15292A261E200C7A791970712F5D52838454,5617454F06=3404101C28:000403110F527079156523221E2027,0129802E1F6B1D=1830000C24:0004031A170F11332C2E302F1571292A657677451949,70201D5218=102834041C:0004031811171A5B332C2E155D52,0D29204504=17233B0B2F:00040318110F1519262322271E2021,52831F3825=3B0B17232F:00046A7966444C7765,010C202F38520F70292E31=14202C3808:003F261F202789,8836=131F2B3707:003F657789,7152290F032B3A=2632020E1A:003F651F0C2027232289,0F292B=16222E3A0A:003F89,8836=212D390915:000F76,032E1F522C292B22=2B3707131F:000F7765,2E1F7C4607=0F1B273303:000F01111A1615292A2627200C2C670279538384543E49,634512=0F1B273303:000F1320,6380382936=0F2733031B:000F1323222627,2E3829031535=0D25310119:00676589,0F200F=0C18243000:00401D232289,71290F47202B=101C283404:0040395089,8803=30000C1824:004023222089,0F291118470D=0A16222E3A:004089,0F5211=1A2632020E:004089,0F0147200B=3A0A16222E:00037039454F0D332971152C4C48,090F476341382E0A=111D293505:00037039041A26271F1E202322,0F2F2C335129452E0D3A3B=222E3A0A16:000370396A450D332F4B154C,0F208A7D41381F2E14=0F1B273303:00030401061A16170F332E71292627200C02696A45514F0D2C2D4E497A,2B0B=0F1B273303:000304111A33152D2E302F71292A5284530770022B,0F6345203B=0F1B330327:00030418111617332E2D2F292A52845407020D302B,090F452001=0F1B273303:000304080618110F1A2E2D0D3371292A2C302F7566010239454E802B,632039=2430000C18:00036A7415384878,45751F20240F522E834F2E=182430000C:000301394F2E154763751F27,0F707A802629710D192035=14202C3808:0003391983845475,2E1F0F6A702971722A0D04=0F1B270333:00483F,6338200F2A=3B0B17232F:00481F2023221E27262189,0F292C2E1B=122A36061E:0076645089,8819=202C380814:0076777566262322271F201E,0F111852290D=101C283404:00763989,0F2036=1E2A360612:00788B89,0671292E25=010D192531:00784C00793989,0F29702E1F208A21=31010D1925:0006261F1E201D212322,0F2938111801=2A3606121E:00060403702C2E4C154947443D651F,0D2920=101C283404:0006522E261F20,0F712939=2632020E1A:00060724232227261F2025,520F157929382F22=31010D1925:0006547677,0F5229151F201B=0E1A320226:00061A161718110F292A0C26271F212A79700102212F49,470D=0814202C38:002876396577261F20,5283290F37=212D390915:0028397976771E232227,0F522E47442027=121E2A3606:006389,8822=101C280434:007B7C3989,881E=1830000C24:007B343589,8805=2E3A0A1622:00021719792B155D5466774962,010611180F292030=14202C3808:00020370454F0D3933192C2E2D156375261F202322,0F7123=0E1A260232:0002070818111A16175B153E445D5452848365647576,2038454F15=182430000C:0007385476771548,52061F2024=2D39091521:0007504089,0F29157030=15212D3909:0007504089,060F71702F2918=15212D3909:0007504089,880B=17232F0B3B:000770171989,0F2E20382F=0B17232F3B:00077089,522E1F8A202C=07131F2B37:000704036939487C4466,0F7011293821=1824000C30:000715547776,521F18=0E2632021A:0007030401021811171A0F2E2322271F1E706749528483,202F293800=0F1B330327:00077663,0F297138202C=0B17232F3B:000776776548,0F1118152E1F2017=121E2A3606:00077665776489,52830F208A14=1A2632020E:00077B7C4834353989,2952203B=2632020E1A:00076A386563,0F7D8A2066454F52754C15=1E2A360612:00076A0F3874485040,06707C2509=3606121E2A:00076A74504089,5229702C7D15=14202C3808:00076A74173926271F1E20,0F7029522B09=000C182430:00076A54196348767765,7920297115528A0D382B16=101C283404:000734357B7C3989,0F528329200C=06121E2A36:0007343589,290F7104=2E3A0A1622:0007343589,0F292F702012=182430000C:0007343589,0F71296B708003=15212D3909:0007343589,7129706300=0D19310125:0007010618111A332D302F15262322271E530270164C,560F712924=0E1A263202:000701020618111A175284835407230C7027,262038292C=111D293505:0007711F204840,010F29153814=17232F3B0B:00076527262322,1552835A201D0F382D=0D19253101:0007363F8B3989,09292C208A0F28=030F1B2733:000739483F66,0F208A2B0A=04101C2834:0007397B7C343589,0106522008=020E1A2632:0007396A48343589,0F203A=283404101C:00073934357B7C89,0F5223=3505111D29:000739343589,032010=0A16222E3A:000739343589,520F2F=111D293505:000739343589,8A200A=15212D0939:00077A7089,8817=17232F3B0B:000789,8D3B=172F3B0B23:000789,8815=1B2733030F:007C343589,881B=212D390915:007C343589,8812=15212D3909:006A79190F6F2627,6B46204538290B=380814202C:006A38075040,0F630141202B454F2D=121E2A3606:006A5040077448,702B2C0F2F292E=0B17232F3B:006A583F232227261F20,0F291547031C=232F3B0B17:006A6F391974,0F2E614447702C292F71201F38521F=31010D1925:0034353989,522E1F2B=0D19253101:00343589,060F5200=2A3606121E:00343589,7129565A01=131F2B3707:00343589,883B=111D350529:00343589,8800=152D390921:000150402627,0F292F2B1E=2733030F1B:00010F17505840,565A80385283846315=101C283404:000103020611187B7C2D4E616439201E0C26,522E474429=101C283404:0001030239450D297115332C2E4C,0F542070528438632C=101C283404:000103392E54837548,19700F58157A20381F=1830000C24:00010670175B71292A152322271E,03637C2B380F=0E1A263202:0001067052842E71291F20,030F38477533=131F2B3707:0001067011185B0D332C2E2D712909262322271F200C,0F5263250C=17232F0B3B:000106040318111A170F33292A26276A201D0C7A71077C1F1E74694F,520A=0D19253101:0001060403232226380F767754,568020152D=111D293505:000106025B7571295B04032D302F382B2A0D801E20,2E1F0F0F0C=0D19253101:00010607155B5C26271E2021165D83,38470F2920=16222E3A0A:000106073018110F3329271E0C7A0D75,3826201508=0F1B273303:00010618111A16332C2E2F2D27200C07483A450D,1552843825=0E1A263202:000102261E2027,03476F700F2971382E39=15212D3909:0001027007834878,2E388A201D17=131F2B3707:00010203450D3329152C2E2F5375,0F638A6A1D8A382D=0E1A263202:000102030D70332C2E29712F534426201F1E,0F38152F=121E2A3606:0001020370450D332C2E2D152971,0F52838A201D1B=1D29350511:0001020370528384631575712D2E4E3E581F1E1D,292C2B452620803A=222E3A0A16:0001020370392F2971152B54754C,458A1F0F20462C=14202C3808:0001020370392F80712B546675201E26,1F58472E152F=16222E3A0A:000102037039714515750D33,201D381F092E0F1103=32020E1A26:000102030F7039453319152E2D2F63751F0C1E20,71290D38472C=16222E3A0A:000102035270392E2D5863,0F381D2B2921201511=131F2B3707:0001020352666A,0F7020262938172F3A=2430000C18:00010203332C2E2F1558631F,0F1920707A2971264627=05111D2935:0001020311180F702E1F7952838468332D6749443E46630C1E1D21,292B2035=1C28340410:000102031118396375664819,1D4138702080291F=232F3B0B17:000102033945332C6375201D21,0F1929710D702D=101C283404:00010203390D3329152C2B751E20,2E1F54475352458316=111D293505:0001020339161745514F2C190F1A16152E2D2F304979,8D13=17232F3B0B:00010203396A79637566201D211E,29387D71707A30=101C283404:000102033911170D3319152E2F0947442627201F,8D25=3505111D29:000102031811392E2D19528384543E4463751F20,152F1A290F0D=0E1A263202:0001020626232227201E,0F2E03801F0F=101C283404:0001020617385483,030F47202B6B1B=2733030F1B:000102060F17705283797823221E2027,2E712910=121E2A3606:000102062A397129797B7C2E1F2425,162F5D20262B=182430000C:0001020603691817452C2E2D498344,412B6A09633808=3A0A16222E:0001020603700F7B7C2E1F692D48302F565A586366240C21,2B151A292039=17232F3B0B:000102060717706A33392D2E4E674447482322271E210C,71292B4F2023=33030F1B27:0001020607036A5D397C7C2163664744,0F4E25208A08=04101C2834:000102060775261F20,71290F70150C=101C283404:00010206111803302F565A802D4E2B881F261E0C,0D0F521B=16222E3A0A:00010206090D5B7952838454685D7B7C443D77656366201F1E,030F47454F24=010D192531:000102071283542627201D210C4C78,29580F2E6352032E1F01=32020E1A26:00010275261E0C2322,6303706F0F292E1F19=0E2632021A:000102081A158483262322270C1E,700F292E1B=101C283404:00011A1615262322271F1E200C214C,472B0F1124=3707131F2B:00013974150726271F1E200C,0F06520D297170382B4507=17233B0B2F:000118111A16175B154C26271E200C232279302F5D528384547543,0F297C7A03=17232F3B0B:000118111A332C2E2D1571292A2627200C7A1979,387C02=172F3B0B23:000118111A332C2E2D1571292A23222627200C7A791970302F5D5283845456,387C454F1F=0E1A263202:0001081811171A160F1571292A26271E20396476452B0D,632E523813=15212D3909:00211D1E232289,8D16=0E2632021A:006526232227201F,8926=05111D2935:00657689,6B0F5225=16223A0A2E:00654C89,8D03=2A3606121E:006589,2970472008=15212D3909:001A170F5B332E2D7129261E203E5D,1503528306=152139092D:001A170F1379232227761926,71293833=1C28340410:001A1715838444363F261F1E200C2322,0F476B52036338=14202C3808:001A2B5448701938754C,152E20242510=0D19253101:0039504089,8D39=283404101C:003926271E20747677642322480C06,2E1F38=0F1B273303:0039262322271E201D210C0748766465776A,150F382939=202C380814:0039332C2E2D2F152B4644261F1E,0F7019382971637A31=192531010D:0039787989,1F2E2010=101C283404:0039787089,2E1F8A034F206B29=05111D2935:00398B7989,0F200C=131F2B3707:0039077426271F1E20,0F29713852832B632D=14202C3808:0039076A7426271F2048,0F79197029717A382C=0E1A263202:00397C343548,8929=3B0B17232F:003934357B7C89,0F2028=16222E0A3A:0039343589,8D34=16222E3A0A:0039343589,880B=111D293505:0039343589,8805=17233B0B2F:0039343589,882E=101C283404:0039343589,8806=17233B0B2F:00390103040618111A17332C2E262322271E157A7071302F45631F2075,807C2B=0915212D39:00396577647969271E2322,52012E1F2620612D=16222E3A0A:00391A6A15384C4943363F7448,0F0379472B6319=192531010D:00394C786F89,0F2E442035=182430000C:003989,882A=121E2A3606:003989,8816=13191F252B313701070D:003989,8801=0D19310125:003989,880D=0F1B273303:0018112C2E01040607332D292A09270C2322696870302F47023945,382052801C=101C340428:00190F153917701A48,472E1F200334=1F2B370713:00195475667689,5229152E2019=222E3A0A16:004C504089,0F5215470A=3A0A16222E:005C702C2F802B154C78,5A562E1F208A45466319=102834041C:0089,090F1538=131F2B3707:71297C790001062A710F802D,5215705D2F=0E1A263202:7100030170391959152E2D2F2B39,0F201F4F75668A3824=030F1B2733:5483846376656419786A,298030201A=2430000C18:5452838479195D00012A0D7B7C2C2E3348156366242526201E,0F71292D=07131F2B37:54528384700001020339482D301571565A363F637566,06292B201F8A29=030F1B2733:54528384036F796A153E65,7129631D=2733030F1B:5452848303152F802C2D,2E1F208A7A700F29710C7D22=33030F1B27:118384155B20272E1F21,0F03380E=0E1A263202:1179302F842627201E,0071292E1F0E=06121E2A36:11177B7C52842C2E5B1F20,060071292F0F0E=101C283404:110F70528475660D7129,012E1F20262A=101C283404:110F03706A795215636626271E,0C012F38062C292B07=020E1A2632:110F0001702C2E7129201F,52060C=0E1A263202:110F00017052792E1F1E,71290D2B2020=293505111D:110F1A6A702C2E1952838453712F6375,45201500011D=101C340428:11037B7C2E2F7129,0F52200B=0E1A263202:11000170792C2E7129,0F52201F01=111D350529:110001527B7C2E75,0F2009=04101C2834:1100010206702D804E2B2620,0F52540D00=131F2B3707:110001392E1F20,0F712932=17232F3B0B:11715452838454292C2E302D4E092A0D50407970443D,5680410023=2B3707131F:111879690001020370396A2E2D528384543E637566,0F380D580F292000=222E3A0A16:111879076A1A171523221E27207924,5229700F1D012E292B0C2F0B=06121E2A36:111817000106702C2E71292A0D33802D302F4E2B44,0F52252029=07131F2B37:11180F000704030D7C684580302F153867534775,70204119=2430000C18:11180F00012A0D70795D7B7C39332D2C2E4E4863664C,064F478A2037=1E2A360612:11180F000152548471702C2E2D4E303348492A156144474C63,8A201F38450618=202C380814:11180F000128032A0D7129302C2E302F2D802B09411F1E20,5284543824=2F3B0B1723:11180F0001020370391952845329712B632E7B7C792D2C8020,385D151E=293505111D:11180F0001020339700D29716375662E1F2620,3815568016=16222E3A0A:11180F000102587B7C5283847971302F804B2B497675,09612E1F201E=232F3B0B17:11180F00010E715229702E79692C2E2D2B15093954444C6666,2F565A806132=131F2B3707:11180F71297052838454792A0D33802D153853201F1E212627,012F56476628=3707131F2B:11180F71297000010604032A0D793969302F33802D636675,201F52565A1E18=1D29350511:11180F5C000102030D332C2E195329711563261F202322,52843A=202C380814:11180370392A0D3329712C2F156375795B5D,450C8A00382E1F20010C=3A0A16222E:11185283847975661271393D692D15565A201E262322,292F060D0C02=30000C1824:111852838470795B302F404533802D152B39201E23221D212726,0F2E1F010D2923=2D39091521:111852838453546319297115030D332B2C,060F8A2E38201F38=0D19253101:111800020D041A796933483E5347446563751F1D212026,010F09150C17=2430000C18:1118000717161A2C2E3371292B56433D6375363F,0F010347208A09=020E1A2632:111800012A0D2C705271292E201F,1538617904=30000C1824:11180001032A0D70795B2C2E302F802D4E152B33714161201F26,520958470A=000C182430:11180001020439332C2E302F2B5844477515634C1F2721,0F520D19267A2971702037=232F3B0B17:111800010206037939695483845D2D2E4E446375661F262120,0F52290D7123=31010D1925:111800010206071979697C67474475664C,0F16298A2014=182430000C:11187129705B79000106032A0D397B6F7C802D2C2B61756627261E0C1D21,0F2E15414732=192531010D:111871545283842979397B7C69152B2A0D3348295324251F1D1E26,6B00702F800C201E=1F2B370713:5D0007363F232227261E21,037C0F471F202E=0E1A263202:6526232227201F,880E=111D293505:653989,8806=131F2B3707:363F6526232227201E89,8832=1A2632020E:1A454F548384,881D=121E2A3606:1A38712975,0F201A=0E1A263202:1A162623227954,0001710F290C=0F1B273303:1A16170F13152654,3852204F32=0F1B273303:1A5D453A332C2E2F4B25262322271F201E1D21,000F704723=2F3B0B1723:3950177089,522E1F0F201A=1D29350511:39701117302F713819297566,004551152C2E201D1F34=121E2A3606:393589,881A=15212D3909:393589,882C=182430000C:393589,8825=101C283404:393589,881C=2531010D19:394089,71294709636F7C440D=0D19253101:3948007889,8D38=2430000C18:394889,8811=111D293505:394889,882A=0E1A263202:3907,8807=0D19253101:39343589,8831=101C283404:393489,8801=222E3A0A16:390050404C89,0F528329692018=131F2B3707:39006A26201F,0F520D38580629712B09=380814202C:390001022C2E302F1575804B2D261F20,0D0F0319707D5229717A15=17232F3B0B:3989,8D11=0A16222E3A:181179838454637566,0F5229012007=111D293505:18117915384C,52200E=0C18243000:1811795B032C2E302F802D4163754C27261E1D2120,010D0F29521F29=16222E0A3A:1811795B5466,01202F=192531010D:181179000607040D03302F5283844F3A45512B1533664C47,090F702E208A2B=0B17232F3B:18117900012C2E5B1F20,0F710D52291A=122A36061E:181179190E332C2E2D52637566262322271F20,8D02=0F1B273303:181117332C2E1526232227201F1E3E,38030F522922=142038082C:181170792C2F7129,52201F=121E36062A:18117001061579,71292023=121E2A3606:18117000012C2E7129,522024=3505111D29:18110F390001020370390D3329711563752E1F0C201D,38525D1A=101C283404:18110F197983842E230C271F1E7A70525463,2620291503=111D293505:1811002E1F8384,0F2022=1824000C30:181100012C2E2F1F,0F3821=142038082C:181100012C2E2F1F20,0F5229=14202C3808:181100015B3875,2E2034=15212D3909:181100012A0D2C2E2F2B2D302F4E447129841F,0F09416138200F=0814202C38:181100012A0D52842953411E20,2E1F0F47152F=131F2B3707:18110001032A0D845B7129302F791533536678,0F208A1F1D33=17232F3B0B:18115452840001712970802D2C2E302F2B2A0D78791F,0F204758610E=0F1B273303:18111A16175B3315262322271F1E201D215D838454433E363F754551,00030F290D=0C18243000:18115C0001702A2C2E2F5283847129795B6375802D154C,1F208A2407=15212D3909:88,262052830D=17232F3B0B:88,8D17=102834041C:88,8D0B=15212D0939:88,8D24=121E2A0636:88,8D09=17232F0B3B:88,8D13=111D293505:1979,3F2F2E45207D37=112935051D:1966583F6589,8831=16222E3A0A:4C4089,880C=0C18243000:4C78,297172380D2A2E0F47484112=16222E3A0A:5C0F1811790070528471291F20,2F0380512514=1C28340410:5C0001020652835B0E03804B2D4E2B752024210C06,292E565A36=1A2632020E:5C11180001027170520D298483292B15200C,03802E386333=15212D3909:89,6B34=111D293505:89,8D';
  private static
  private static $SHEN_SHA = array('无', '天恩', '母仓', '时阳', '生气', '益后', '青龙', '灾煞', '天火', '四忌', '八龙', '复日', '续世', '明堂', '月煞', '月虚', '血支', '天贼', '五虚', '土符', '归忌', '血忌', '月德', '月恩', '四相', '王日', '天仓', '不将', '要安', '五合', '鸣吠对', '月建', '小时', '土府', '往亡', '天刑', '天德', '官日', '吉期', '玉宇', '大时', '大败', '咸池', '朱雀', '守日', '天巫', '福德', '六仪', '金堂', '金匮', '厌对', '招摇', '九空', '九坎', '九焦', '相日', '宝光', '天罡', '死神', '月刑', '月害', '游祸', '重日', '时德', '民日', '三合', '临日', '天马', '时阴', '鸣吠', '死气', '地囊', '白虎', '月德合', '敬安', '玉堂', '普护', '解神', '小耗', '天德合', '月空', '驿马', '天后', '除神', '月破', '大耗', '五离', '天牢', '阴德', '福生', '天吏', '致死', '元武', '阳德', '天喜', '天医', '司命', '月厌', '地火', '四击', '大煞', '大会', '天愿', '六合', '五富', '圣心', '河魁', '劫煞', '四穷', '勾陈', '触水龙', '八风', '天赦', '五墓', '八专', '阴错', '四耗', '阳错', '四废', '三阴', '小会', '阴道冲阳', '单阴', '孤辰', '阴位', '行狠', '了戾', '绝阴', '纯阳', '七鸟', '岁薄', '阴阳交破', '阴阳俱错', '阴阳击冲', '逐阵', '阳错阴冲', '七符', '天狗', '九虎', '成日', '天符', '孤阳', '绝阳', '纯阴', '六蛇', '阴神', '解除', '阳破阴冲');
  private static $DAY_SHEN_SHA = '100=010203040506,0708090A0B101=010C0D,0E0F101112131415102=16011718191A1B1C1D1E,1F20212223103=24011825261B271D1E,28292A2B104=012C2D2E2F3031,3233343536105=3738,393A3B3C3D123E106=3F404142434445,464748107=494A4B4C4D,4E108=4F5051524C4D5345,54555657109=58595345,5A5B12565C10A=5D415E5F60,616263640B6510B=0266676869,6A6B6C0A3E6D10C=1602171803041B05061E,07086E10D=24181B0C0D,0E0F1011126F13141510E=70191A1C1D,1F2021222310F=0125261B271D,28292A2B110=012C2D2E2F3031,3233343536111=49013738,393A3B3C3D123E112=4F50013F404142434445,4648113=014A4B,4E6E114=51524C4D5345,54550B5657115=0158595345,5A5B12565C116=1601185D415E5F60,61626364117=24021867681B69,6A6B3E6D118=0203040506,0708119=1B0C0D,0E0F10111213141511A=191A1B1C1D1E,1F2021222311B=4925261B271D1E,28292A11C=4F502C2D2E2F3031,323334353611D=3738,393A3B3C3D123E11E=3F404142434445,460B4811F=4A4B,4E71120=16171851524C4D5345,545556121=241858595345,5A5B12565C122=5D415E5F60,61626364123=0267681B69,6A6B3E6D124=0203041B05061E,070847125=491B0C0D,0E0F101112131415126=4F50191A1C1D1E,1F20212223127=2526271D1E,28292A2B128=2C2D2E2F3031,32333435360B129=3738,393A3B3C3D123E12A=1617183F404142434445,464812B=24184A4B,4E7212C=51524C4D53,5455565712D=0158595345,5A5B12565C12E=015D415E5F60,616263647312F=49010267681B69,6A6B3E6D130=4F500102030405061E,070874131=010C0D,0E0F101112131415726E132=191A1C1D1E,1F2021220B722375133=2526271D1E,28292A2B134=1617182C2D2E2F3031,3233343536135=24183738,393A3B3C3D126F3E136=3F4041424344,4648137=4A4B,4E72138=51524C4D5345,545576567257139=4958595345,5A5B7612565C7713A=4F505D415E5F60,6162636413B=02676869,6A6B3E6D200=1601025D60,393B28292A11090A201=0103041A1B4A,123435360B6D202=011819681B4C1D061E,3D1014203=011718252F591D0D1E,1F20213233204=012C26,3C23205=493751522D2E69,121364223E2B206=503F4005311E,6A3A5A5B207=5841440C38,4615208=431C4D45,6B4E5648209=27534B45,545507086162125620A=16666730,0E0F635720B=0241425E5F1B,6C0A0B3E5C20C=02185D1B601E,393B28292A116E20D=171803041B4A,126F3435366D20E=7019684C1D06,3D101420F=4901252F591D0D,1F2021323378210=50012C26,3C23211=013751522D2E69,121364223E2B212=013F40053145,6A3A5A5B213=015841440C38,46156E214=16431C4D5345,6B4E5648215=27534B45,545507086162120B5648216=18671B30,0E0F6357217=02171841425E5F1B,3E5C218=025D60,393B28292A11219=4903041A1B4A,123435366D21A=5019681B4C1D061E,3D101421B=252F591D0D45,1F2021323321C=2C26,3C2321D=3751522D2E69,121364223E2B21E=163F40053145,6A3A5A5B21F=5841440C38,467147150B220=18431C4D5345,6B4E5648221=171827534B45,5455070861621256222=6730,0E0F6357223=490241425E5F1B,3E5C224=50025D1B601E,393B28292A11225=03041A4A,123435366D226=19684C1D061E,3D1014227=252F591D0D1E,1F20213233228=162C26,3C23229=3751522D2E69,121364220B3E2B22A=183F40053145,6A3A5A5B22B=17185841440C38,46157222C=431C4D53,6B4E564822D=490127534B45,54550708616212567922E=5001671B30,0E0F635722F=010241425E5F,3E5C230=01025D601E,393B28292A1174231=0103041A4A,1234353647726E6D232=1619684C1D061E,3D1014233=252F591D0D1E,1F202132330B75234=182C26,3C23235=17183751522D2E69,126F1364223E2B236=3F400531,6A3A5A5B237=495841440C38,461572238=50431C4D5345,6B4E76567248239=27534B45,5455070861627612567323A=6730,0E0F635723B=0241425E5F,3E5C300=0102415E5F1A1B69,090A471457301=011B05,6A125C302=5001185D19515203042F0C1D601E,323315303=4F490118251C1D1E,3C5A5B106D304=012C2706,1F20213B710B787A305=58372668300D,6B123E306=173F402D2E45,07086423307=00,393A0E2B308=24164142444A533145,61624622567B309=674C533845,28292A4E12135630A=431B594D,5455633435364830B=021B27,3D116C0A3E30C=500218415E5F1A1B691E,146E5730D=4F49181B05,6A126F5C30E=705D19515203042F0C1D60,3233150B30F=01251C1D,3C5A5B106D310=01172C2706,1F20213B7C311=0158372668300D,6B123E312=2416013F402D2E45,0708476423313=01,393A0E0F6E2B314=4142444A533145,61624622567D315=66671B4C533845,28292A4E121356316=5018431B594D,54556334353648317=4F4902181B4B,3D113E318=02415E5F1A69,140B57319=1B05,6A125C31A=175D19515203042F0C1D601E,32331531B=251C1D1E,3C5A5B106D31C=24162C2706,1F20213B31D=58372668300D,6B123E31E=3F402D2E45,0708642331F=00,393A0E0F2B320=50184142444A533145,61624622567E321=4F4918671B4C533845,28292A4E121356322=43594D,5455633435360B48323=021B4B,3D113E324=0217415E5F1A691E,1457325=05,6A125C326=58165D19515203042F0C1D601E,323315327=251C1D1E,3C5A5B106D328=2C2706,1F20213B75329=58372668300D,6B123E32A=50183F402D2E45,0708642332B=4F4918,393A0E0F722B32C=4142444A5331,616246220B567B32D=01671B4C533845,28292A4E12135632E=011743594D,5455633435364832F=01024B,3D113E330=24160102415E5F1A691E,741457331=0105,6A12726E5C332=5D19515203042F0C1D601E,32331572333=251C1D1E,3C5A5B106D334=50182C2706,1F20213B335=4F491858372668300D,6B126F3E336=3F402D2E,0708640B23337=00,393A0E0F722B338=174142444A533145,616246762256727B73339=674C533845,28292A4E7612135633A=241643594D,5455633435364833B=024B,3D113E400=5001431B,5A5B1248401=490141425E5F2F4B,32336314402=4F01024A1D1E,396B3C130B57403=01025803044C1D1E,07085C404=01183F5D5960,0E0F10127F405=171819,1F20213E6D788075406=162526690645,28292A407=242C2D2E050D,6162343536647B408=3767680C5345,6A3A3B3D12155623409=4041441C5345,46562B40A=501B274D31,4E1140B=4951521A1B3038,5455223E40C=4F431B1E,5A5B0981120B6E4840D=41425E5F2F4B,3233631440E=02184A1D,396B3C135740F=010217185803044C1D,0708475C410=16013F585960,0E0F1012411=240119,1F20213E6D412=012526690645,28292A413=012C2D2E050D,6162343536646E7B414=503767681B0C5345,6A3A3B3D126F155623415=494041441B1C5345,46562B416=4F1B274D31,4E11710B417=51521A1B3038,54556C81223E418=18431B,5A5B1248419=171841425E5F2F4B,3233631441A=16024A1D1E,396B3C135741B=24025844044C1D1E,07085C41C=3F5D5960,0E0F101241D=19,1F20213E6D41E=50702526690645,28292A41F=492C2D2E050D,6162343536647D420=4F663767681B0C5345,6A3A3B3D12150B5623421=4041441B1C5345,46562B422=181B274D31,4E11423=171851521A3038,5455223E424=16431E,5A5B1248425=2441425E5F2F4B,32336314426=024A1D1E,396B3C1357427=025803044C1D1E,07085C428=503F5D5960,0E0F10126F429=4919,1F20213E6D42A=4F2526690645,28292A0B8242B=2C2D2E050D,616234353664727E7342C=183767681B0C53,6A3A3B3D1215562342D=0117184041441C5345,4647562B42E=1601274D31,4E1142F=240151521A3038,5455223E430=01431E,5A5B761248431=0141425E5F2F4B,32336314726E432=50024A1D1E,396B3C137257433=49025844044C1D1E,0708745C434=4F3F5D5960,0E0F10120B435=19,1F20213E6D75436=1825266906,28292A82437=17182C2D2E050D,616234353664727B73438=163767680C5345,6A3A3B3D1215567223439=244041441C5345,46562B43A=274D31,4E1143B=51521A3038,545576223E83500=012F4D31,54550708323312501=01586938,0E0F3C63502=16010241435E5F051D1E,641448503=01020C1D4B1E,6A28292A353615220B504=0117183F03041C,123457505=181927,3D103E5C506=5D25306045,1F20213B616213507=492C2667,6D508=503751522D2E530645,1256509=401B4A530D45,393A5A5B115650A=4142441A1B4C,462350B=681B59,6B4E3E2B50C=162F4D311E,5455070832330981126E50D=586938,0E0F3C0B50E=02171841435E5F051D,64144850F=0102180C1D4B,6A28292A35361522510=013F03041C,123457511=49011927,3D103E5C512=50015D25306045,1F20213B616213513=012C26671B,6E6D514=3751522D2E1B530645,126F56515=401B4A530D45,393A5A5B1156516=164142441A1B4C,467123517=6859,6B4E6C810B3E2B518=17182F4D31,54550708323312519=18586938,0E0F3C6351A=0241435E5F051D1E,64144851B=49020C1D4B1E,6A28292A3536152251C=503F03041C,12345751D=1927,3D103E5C51E=705D25306045,1F20213B61621351F=2C26671B,6D520=163751522D2E1B530645,1256521=404A530D45,393A5A5B110B56522=17184142441A1B,4623523=186859,6B4E3E2B524=2F4D311E,54550708323312525=49586938,0E0F3C63526=500241435E5F051D1E,641448527=020C1D4B1E,6A28292A35361522528=3F03041C,126F344757529=1927,3D103E5C52A=165D25306045,1F20213B616213658452B=662C2667,0B726D52C=17183751522D2E1B5306,125652D=0118404A530D45,393A5A5B115652E=014142441A4C,462352F=49016859,6B4E3E2B530=50012F4D311E,545507083233761285531=01586938,0E0F3C63726E532=0241435E5F051D1E,64147248533=020C1D4B1E,6A28292A7435361522534=163F03041C,123457535=1927,3D100B3E5C536=16185D253060,1F20213B61621378537=182C2667,726D538=3751522D2E530645,125672539=49404A530D45,393A5A5B115653A=504142441A4C,46472353B=681B59,6B4E763E2B600=241601304D,3C28292A4E1235361423601=01,54553B63342B602=0102681D311E,3D603=010241425E5F4A1D381E,64604=01183F434C,39127148605=4F49181951520304594B,61620B3E73606=50256745,5A5B102257607=172C69,1F20215C608=5D37261B05536045,6B111256609=402D2E1A1B0C5345,6B11125660A=24161B1C06,6A3A0E0F1360B=5841442F270D,3233463E60C=304D1E,3C28292A4E0981123536146E2360D=00,54553B63342B60E=0218681D31,3D60F=4F4901021841425E5F4A1D38,640B610=50013F434C,391248611=01171951520304594B,61623E612=0125671B45,5A5B102257613=012C1B69,1F20216E5C614=24165D37261B05536045,6B11126F56615=402D2E1A1B0C5345,070815566D616=1C06,6A3A0E0F1347617=5841442F270D,3233466C813E618=18304D,3C28292A4E1235361423619=4F4918,54553B63340B2B61A=5002681D311E,3D61B=021741425E5F4A1D381E,6461C=3F434C,39124861D=1951520304594B,61623E61E=24167025671B45,5A5B10225761F=2C1B69,1F20215C620=5D372605536045,6B111256621=402D2E1A0C5345,070815566D622=181B1C06,6A3A0E0F13623=4F49185841442F270D,3233460B3E624=50304D1E,3C28292A4E1235361423625=17,54553B63342B626=02681D311E,3D627=0241425E5F4A1D381E,64628=24163F434C,39126F48629=1951520304594B,61623E62A=256745,5A5B1022578662B=2C69,1F2021725C7562C=185D37261B055360,6B11125662D=4F490118402D2E1A0C5345,0708150B566D62E=50011C06,6A3A0E0F1362F=01175841442F270D,3233463E630=01304D1E,3C28292A4E761235361423631=01,54553B6334726E2B87632=241602681D311E,3D72633=0241425E5F4A1D381E,7464634=3F434C,39124748635=1951520304594B,61623E6573636=661825671B,5A5B10225786637=4F49182C69,1F20210B725C75638=505D372605536045,6B11125672639=17402D2E1A0C5345,070815566D63A=1B1C06,6A3A0E0F1363B=5841442F270D,323346763E700=0103404142445906,46701=01020D,4E14702=50015152694D1D1E,54553B23703=4901051D1E,5A5B2B1288704=4F0102415E5F0C31,6162636415705=6667681C38,6A6B3E706=4303042745,07080B48707=02304B,0E0F101112708=16171819,1F20135657709=24185825261B5345,28292A353622565C70A=025D2C2D2E2F4A60,3233893470B=374C,393A3C3D3E6D70C=503F4041424459061E,466E70D=49020D,4E1470E=4F5152694D1D,54553B70F=01051D,5A5B12132B710=0102415E5F0C31,61626364150B65711=0167681C38,6A6B3E712=162417184303041B2745,070848713=240102181B304B,0E0F1011126E714=191A1B5345,1F20215657715=5825261B5345,28292A353622565C717=49374C,393A3C3D126F473E6D718=4F3F404142445906,46719=020D,4E1471A=515269,1D1E71B=051D1E,5A5B12132B71C=16021718415E5F0C31,616263641571D=241867681B1C38,6A6B3E71E=4303041B2745,07084871F=021B30,0E0F101112720=50191A5345,1F20215657721=495825265345,28292A353622565C722=4F025D2C2D2E2F4A60,32338934723=374C,393A3C3D123E6D724=3F4041424459061E,46098A0B725=020D,4E7114726=1617185152694D1D1E,54553B23727=2418051D1E,5A5B12132B728=02415E5F0C31,616263641573729=67681B1C38,6A6B3E72A=504303042745,07084872B=4902304B,0E0F1011126F7272C=4F70191A1B,1F2021565772D=015825265345,28292A353622565C72E=01025D2C2D2E2F4A60,323389340B72F=01374C,393A3C3D6C8A123E6D730=160117183F4041424459061E,46731=240102180D,4E14726E732=5152694D1D1E,54553B767223733=051D1E,5A5B7612132B77734=5002415E5F0C31,6162636415735=4967681C38,6A6B473E736=4F4303041B27,7448737=02304B,0E0F10111272738=191A5345,1F20210B56725775739=5825265345,28292A353622565C73A=160217185D2C2D2E2F4A60,3233893473B=2418374C,393A3C3D123E6D800=50013F5D402760,6A3A5A5B22801=490102414430,466D802=014D1D061E,6B4E4714803=011D0D1E,54550708616212804=0102671B4A,0E0F6323805=41425E5F4C,8B2B806=16593145,3928292A113536807=025803041A1B38,1234130B808=181943681B695345,3D105648809=1718252F0553534B45,1F20213B32335680A=50022C260C,3C155780B=493751522D2E1C,12643E5C80C=3F5D4027601E,6A3A5A5B226E80D=02414430,466D80E=4D1D06,6B4E1480F=011D0D,5455070861621279810=16010266674A,0E0F6323811=0141425E5F1B4C,0B3E2B812=01181B593145,3928292A113536813=010217185803041A1B38,1234136E814=501943681B695345,3D105648815=49252F05534B45,1F20213B323356816=022C260C,3C1557817=3751522D2E1C,126F643E5C818=3F5D402760,6A3A5A5B22819=02414430,466D81A=164D1D061E,6B4E1481B=1D0D1E,545507086162120B6581C=0218671B4A,0E0F632381D=171841425E5F1B4C,3E2B81E=501B593145,3928292A11353681F=49025D03041A38,123413820=194368695345,3D10475648821=252F05534B45,1F20213B323356716=50025D2C2D2E2F4A60,32338934822=022C260C,3C1557823=3751522D2E1C,12643E5C824=163F5D4027601E,6A3A5A5B098A22825=02414430,46710B6D826=184D1D061E,6B4E14827=17181D0D1E,54550708616212828=5002671B4A,0E0F6323829=4941425E5F4C,3E2B82A=593145,3928292A11353682B=025803041A38,126F34137282C=701943681B6953,3D10564882D=01252F05534B45,1F2021613233567882E=1601022C260C,3C155782F=013751522D2E1C,6C8A12640B3E5C830=01183F5D4027601E,6A3A5A5B22831=01021718414430,46726E6D832=504D1D061E,6B4E761472833=491D0D1E,545507086162761273834=02674A,0E0F6323835=41425E5F4C,3E2B836=1B5931,3928292A11743536837=025803041A38,12341372838=16194368695345,3D10567248839=252F05534B45,1F20213B32330B567583A=02182C260C,3C155783B=17183751522D2E1C,12643E5C900=013F408C2E4C,0708641457901=010259,393A0E0F5C902=2416015D4142441D601E,61624635367B903=0167691D1E,28292A4E126D904=01021B054D06,5455637134220B905=580C0D,3D11153E906=17415E5F1A1B1C45,23907=4F49021B27,6A3B12472B908=501819515203042F30533145,323356909=1825533845,3C5A5B105690A=022C43,1F2021487C90B=3726684A4B,6B12133E90C=24163F402D2E4C1E,070864146E5790D=0259,393A0E0F5C90E=5D4142441D60,61624635360B7B90F=0167691D,28292A4E126D910=0102171B054D06,5455633422911=4F4901581B0C0D,3D11153E912=500118415E5F1A1B1C45,23913=0102181B27,6A3B126E2B914=19515203042F30533145,323356915=25533845,3C5A5B1056916=2416022C43,1F202148917=3726684A4B,6B126F133E918=3F402D2E4C,070864140B57919=0259,393A0E0F5C91A=175D4142441D601E,61624635367D91B=4F4966671B691D1E,28292A4E126D91C=5002181B054D06,545563342291D=18581B0C0D,3D11153E91E=415E5F1A1C45,2391F=0227,6A3B122B920=241619515203042F305331,323356921=25533845,3C5A5B1056922=022C43,1F20210B48788D923=3726684A4B,6B12133E924=173F402D2E4C1E,0708098A641457925=4F49022E,393A0E0F475C926=50185D4142441D601E,61624635367E927=18671B691D1E,28292A4E126D928=02054D06,5455633422929=580C0D,3D11153E92A=2416415E5F1A1C45,2392B=0227,6A3B126F722B92C=7019515203042F305331,32330B5692D=0125533845,3C5A5B105692E=0102162C43,1F2021487592F=4F49013726684A4B,6B6C8A12133E930=5001183F402D2E4C1E,0708641457931=01021859,393A0E0F726E5C932=5D4142441D601E,616246763536727B73933=67691D1E,28292A4E76126D934=241602054D06,5455633422935=580C0D,3D11153E936=415E5F1A1B1C,740B23937=0227,6A3B12722B938=1719515203042F30533145,32335672939=4F4925533845,3C5A5B105693A=5002182C43,1F20214893B=183726684A4B,6B12133EA00=160170182543261C,28292A48A01=240117182C2D2E274B,61623464147BA02=013F376768301D1E,6A3A3D1257A03=01584041441D1E,465CA04=015D4D60,4E1113A05=4951521A1B4A,54553E6DA06=4F501B4C0645,5A5B12A07=41425E5F2F590D,32336322A08=025345,396B3C0B5623A09=020304695345,0708562BA0A=16180531,0E0F10126FA0B=241618190C38,1F20213B3536103EA0C=2543261C1E,28292A6E48A0D=2C2D2E274B,61623464147BA0E=3F376768301D,6A3A3D124757A0F=4924584041441B1D,465CA10=4F50015D1B4D60,4E1113A11=0151521A1B4A,54553E6DA12=011B4C0645,5A5B120BA13=0141425E5F2F590D,323363226EA14=1602185345,396B3C5623A15=240217180304695345,0708562BA16=0531,0E0F1012A17=190C38,1F20213B3536153EA18=2543261C,28292A4882A19=49503F3767681B301D1E,6A3A3D1257A1A=4F503F3767681B301D1E,6A3A3D1257A1B=584041441B1D1E,465CA1C=5D1B4D60,4E1171130BA1D=51521A1B4A,54553E6DA1E=16184C0645,5A5B12A1F=24171841425E5F2F590D,32336322A20=025345,396B3C5623A21=020304695345,0708562BA22=0531,0E0F10128EA23=49190C38,1F20213B3536153E788FA24=4F502543261C1E,28292A48A25=2C2D2E274B,61623464147DA26=663F3767681B301D1E,6A3A3D120B57A27=584041441B1D1E,465CA28=16185D4D60,4E1113A29=24171851521A4A,54553E6DA2A=4C0645,5A5B7612A2B=41425E5F2F590D,3233632272A2C=0253,396B3C475623A2D=1601020304695345,0708562BA2E=4F50010531,0E0F1012A2F=01190C38,1F20213B3536153EA30=012543261C1E,28292A09900B4882A31=012C2D2E274B,6162346414726E7E73A32=16183F376768301D1E,6A3A3D126F7257A33=2417185D4041441D1E,465CA34=5D4D60,4E1113A35=51521A4A,5455763E6D83A36=4C06,5A5B12A37=4941425E5F2F590D,3233632272A38=4F50029145,396B3C567223A39=020304695345,070874562BA3A=0531,0E0F10120BA3B=190C38,1F20213B6C903536153E75B00=01701718254A31,1F20216162B01=0118582C26,674C38B02=50013F375152432D2E591D1E,121448B03=4901401B1D4B1E,393A5B11B04=014142441A69,4657B05=681B05,6B4E3E5CB06=682F0C4D6045,5455070832331215B07=1C,0E0F3C636DB08=1602415E5F27530645,3536136456B09=0230530D45,6A28292A0B56B0A=17180304,126F342223B0B=1819,3D103E2BB0C=50254A311E,1F202161626EB0D=49582C26,671B4C38B0E=3F375152432D2E591D,121448B0F=01401B1D4B,393A3B5A5B11B10=014142441A1B69,4657B11=01681B05,6B4E3E5CB12=16015D2F0C4D6045,5455070832331215B13=011C,0E0F3C630B6E6DB14=021718415E5F27530645,3536136456B15=021830530D45,6A28292A56B16=500304,12342223B17=4919,3D103E2BB18=254A31,1F4E21616278B19=582C26,671B4C38B1A=3F375152432D2E1B591D1E,121448B1B=401B1D4B1E,393A3B5A5B1147B1C=164142441A1B69,467157B1D=6805,6B4E0B3E5CB1E=17185D2F0C926045,5455070832331215B1F=181C,0E0F3C636DB20=5002415E5F27530645,3536136456B21=490230530D45,6A28292A56B22=0304,12342223B23=19,3D103E2BB24=254A311E,1F20136162B25=582C26671B4C38,00B26=163F375152432D2E1B591D1E,121448B27=401D4B1E,393A3B5A5B110BB28=17184142441A69,4657B29=186805,6B4E3E5CB2A=505D2F0C4D6045,54550708323376121585B2B=491C,0E0F3C63726DB2C=02415E5F275306,3536136456B2D=010230530D45,6A28292A56B2E=010304,12342223B2F=0119,3D103E2BB30=1601254A311E,1F2021616209906584B31=0166582C26674C38,0B726EB32=17183F375152432D2E591D1E,126F147248B33=18401D4B1E,393A3B5A5B11B34=504142441A69,4657B35=49681B05,6B4E763E5CB36=5D2F0C4D60,5455070832331215B37=1C,0E0F3C63726DB38=02415E5F27530645,353613645672B39=0230530D45,6A28292A744756B3A=160304,12342223B3B=19,3D106C900B3E2BC00=500170661825670C,5A5B1013141523C01=4F4901182C1C,1F2021222BC02=011637261B271D311E,6B1112C03=01402D2E1A1B311D381E,0708C04=0143,6A3A0E0F7148C05=41442F4B,32334635360B3EC06=24164A4D45,3C28292A4E1257C07=174C,545563345CC08=025D6859536045,3D56C09=0241425E5F5345,4764566DC0A=50186906,393B126FC0B=4F4918581951520304050D,61623EC0C=25671B0C1E,5A5B101314156E23C0D=2C1B1C,1F2021222BC0E=3F37264B1D31,6B1112C0F=01402D2E1A1B301D38,07080BC10=241601431B,6A3A0E0F48C11=011741442F4B,32334635363EC12=014A4D45,3C28292A4E1257C13=014C,545563346E5CC14=5002185D6804536045,3D56C15=4F49021841425E5F5345,64566DC16=6906,393B12C17=581951524404050D,61623EC18=25670C,5A5B101314152386C19=2C1B1C,1F2021220B2BC1A=24163F37261B271D31,6B1112C1B=17402D2E1A1B301D381E,0708C1C=43,6A3A0E0F48C1D=41582F4B,32334635363EC1E=50184A4D45,3C28292A4E1257C1F=4F49184C,545563345CC20=025D6859536045,3D56C21=0241425E5F5345,64566DC22=6906,393B12C23=581951520304050D,61620B3EC24=241625671B0C1E,5A5B1013141523C25=172C1B1C,1F2021222BC26=3F3726271D311E,6B1112C27=402D2E1A301D381E,0708C28=501843,6A5B0E0F48C29=4F491841442F4B,32334635363EC2A=4A4D45,3C28292A4E761257C2B=4C,54556334725C93C2C=025D68595360,3D56C2D=010241425E5F5345,640B566DC2E=2416016906,393B12C2F=0117581951520304050D,61623EC30=0125670C,5A5B1009901314152386C31=012C1C,1F202122726E2B75C32=50183F3726271D311E,6B11126F72C33=4F4918402D2E1A301D381E,070847C34=431B,6A3A0E0F48C35=41442F4B,3233467635363EC36=4A4D,3C28292A4E1257C37=4C,545563340B725CC38=2416025D6859536045,3D5672C39=021741425E5F5345,7464566DC3A=6906,393B12C3B=581951520304050D,61626C903E6573';
  public static $ZHI_TIAN_SHEN_OFFSET = array(
    '子' => 4,
    '丑' => 2,
    '寅' => 0,
    '卯' => 10,
    '辰' => 8,
    '巳' => 6,
    '午' => 4,
    '未' => 2,
    '申' => 0,
    '酉' => 10,
    '戌' => 8,
    '亥' => 6
  );

  public static $TIAN_SHEN_TYPE = array(
    '青龙' => '黄道',
    '明堂' => '黄道',
    '金匮' => '黄道',
    '天德' => '黄道',
    '玉堂' => '黄道',
    '司命' => '黄道',

    '天刑' => '黑道',
    '朱雀' => '黑道',
    '白虎' => '黑道',
    '天牢' => '黑道',
    '玄武' => '黑道',
    '勾陈' => '黑道'
  );

  public static $TIAN_SHEN_TYPE_LUCK = array(
    '黄道' => '吉',
    '黑道' => '凶'
  );

  public static $PENG_ZU_GAN = array('', '甲不开仓财物耗散', '乙不栽植千株不长', '丙不修灶必见灾殃', '丁不剃头头必生疮', '戊不受田田主不祥', '己不破券二比并亡', '庚不经络织机虚张', '辛不合酱主人不尝', '壬不泱水更难提防', '癸不词讼理弱敌强');

  public static $PENG_ZU_ZHI = array('', '子不问卜自惹祸殃', '丑不冠带主不还乡', '寅不祭祀神鬼不尝', '卯不穿井水泉不香', '辰不哭泣必主重丧', '巳不远行财物伏藏', '午不苫盖屋主更张', '未不服药毒气入肠', '申不安床鬼祟入房', '酉不会客醉坐颠狂', '戌不吃犬作怪上床', '亥不嫁娶不利新郎');

  public static $NUMBER = array('〇', '一', '二', '三', '四', '五', '六', '七', '八', '九');

  public static $MONTH = array('', '正', '二', '三', '四', '五', '六', '七', '八', '九', '十', '冬', '腊');

  public static $SEASON = array('', '孟春', '仲春', '季春', '孟夏', '仲夏', '季夏', '孟秋', '仲秋', '季秋', '孟冬', '仲冬', '季冬');

  public static $SHENG_XIAO = array('', '鼠', '牛', '虎', '兔', '龙', '蛇', '马', '羊', '猴', '鸡', '狗', '猪');

  public static $QI = array('大寒', '雨水', '春分', '谷雨', '小满', '夏至', '大暑', '处暑', '秋分', '霜降', '小雪', '冬至');

  public static $JIE = array('小寒', '立春', '惊蛰', '清明', '立夏', '芒种', '小暑', '立秋', '白露', '寒露', '立冬', '大雪');

  public static $DAY = array('', '初一', '初二', '初三', '初四', '初五', '初六', '初七', '初八', '初九', '初十', '十一', '十二', '十三', '十四', '十五', '十六', '十七', '十八', '十九', '二十', '廿一', '廿二', '廿三', '廿四', '廿五', '廿六', '廿七', '廿八', '廿九', '三十');

  public static $YUE_XIANG = array('', '朔', '既朔', '蛾眉新', '蛾眉新', '蛾眉', '夕月', '上弦', '上弦', '九夜', '宵', '宵', '宵', '渐盈凸', '小望', '望', '既望', '立待', '居待', '寝待', '更待', '渐亏凸', '下弦', '下弦', '有明', '有明', '蛾眉残', '蛾眉残', '残', '晓', '晦');

  /**
   * 农历日期对应的节日
   * @var array
   */
  public static $FESTIVAL = array(
    '1-1' => '春节',
    '1-15' => '元宵节',
    '2-2' => '龙头节',
    '5-5' => '端午节',
    '7-7' => '七夕节',
    '8-15' => '中秋节',
    '9-9' => '重阳节',
    '12-8' => '腊八节',
    '12-30' => '除夕'
  );

  /**
   * 农历日期对应的非正式节日
   * @var array
   */
  public static $OTHER_FESTIVAL = array(
    '1-1' => array('弥勒佛圣诞'),
    '1-8' => array('五殿阎罗天子诞'),
    '1-9' => array('玉皇上帝诞'),
    '2-1' => array('一殿秦广王诞'),
    '2-2' => array('福德土地正神诞'),
    '2-3' => array('文昌帝君诞'),
    '2-6' => array('东华帝君诞'),
    '2-8' => array('释迦牟尼佛出家'),
    '2-15' => array('释迦牟尼佛般涅槃'),
    '2-17' => array('东方杜将军诞'),
    '2-18' => array('至圣先师孔子讳辰'),
    '2-19' => array('观音大士诞'),
    '2-21' => array('普贤菩萨诞'),
    '3-1' => array('二殿楚江王诞'),
    '3-3' => array('玄天上帝诞'),
    '3-8' => array('六殿卞城王诞'),
    '3-15' => array('昊天上帝诞'),
    '3-16' => array('准提菩萨诞'),
    '3-19' => array('中岳大帝诞'),
    '3-20' => array('子孙娘娘诞'),
    '3-27' => array('七殿泰山王诞'),
    '3-28' => array('苍颉至圣先师诞'),
    '4-1' => array('八殿都市王诞'),
    '4-4' => array('文殊菩萨诞'),
    '4-8' => array('释迦牟尼佛诞'),
    '4-14' => array('纯阳祖师诞'),
    '4-15' => array('钟离祖师诞'),
    '4-17' => array('十殿转轮王诞'),
    '4-18' => array('紫徽大帝诞'),
    '4-20' => array('眼光圣母诞'),
    '5-1' => array('南极长生大帝诞'),
    '5-8' => array('南方五道诞'),
    '5-11' => array('天下都城隍诞'),
    '5-12' => array('炳灵公诞'),
    '5-13' => array('关圣降'),
    '5-16' => array('天地元气造化万物之辰'),
    '5-18' => array('张天师诞'),
    '5-22' => array('孝娥神诞'),
    '6-19' => array('观世音菩萨成道日'),
    '6-24' => array('关帝诞'),
    '7-7' => array('魁星诞'),
    '7-13' => array('长真谭真人诞', '大势至菩萨诞'),
    '7-15' => array('中元节'),
    '7-18' => array('西王母诞'),
    '7-19' => array('太岁诞'),
    '7-22' => array('增福财神诞'),
    '7-29' => array('杨公忌'),
    '7-30' => array('地藏菩萨诞'),
    '8-1' => array('许真君诞'),
    '8-3' => array('司命灶君诞'),
    '8-5' => array('雷声大帝诞'),
    '8-10' => array('北斗大帝诞'),
    '8-12' => array('西方五道诞'),
    '8-16' => array('天曹掠刷真君降'),
    '8-18' => array('天人兴福之辰'),
    '8-23' => array('汉恒候张显王诞'),
    '8-24' => array('灶君夫人诞'),
    '8-29' => array('至圣先师孔子诞'),
    '9-1' => array('北斗九星降世'),
    '9-3' => array('五瘟神诞'),
    '9-9' => array('酆都大帝诞'),
    '9-13' => array('孟婆尊神诞'),
    '9-17' => array('金龙四大王诞'),
    '9-19' => array('观世音菩萨出家'),
    '9-30' => array('药师琉璃光佛诞'),
    '10-1' => array('寒衣节'),
    '10-3' => array('三茅诞'),
    '10-5' => array('达摩祖师诞'),
    '10-8' => array('佛涅槃日'),
    '10-15' => array('下元节'),
    '11-4' => array('至圣先师孔子诞'),
    '11-6' => array('西岳大帝诞'),
    '11-11' => array('太乙救苦天尊诞'),
    '11-17' => array('阿弥陀佛诞'),
    '11-19' => array('太阳日宫诞'),
    '11-23' => array('张仙诞'),
    '11-26' => array('北方五道诞'),
    '12-8' => array('释迦如来成佛之辰'),
    '12-16' => array('南岳大帝诞'),
    '12-21' => array('天猷上帝诞'),
    '12-23' => array('小年'),
    '12-24' => array('子时灶君上天朝玉帝'),
    '12-29' => array('华严菩萨诞')
  );

  public static $XIU = array(
    '申1' => '毕',
    '申2' => '翼',
    '申3' => '箕',
    '申4' => '奎',
    '申5' => '鬼',
    '申6' => '氐',
    '申0' => '虚',

    '子1' => '毕',
    '子2' => '翼',
    '子3' => '箕',
    '子4' => '奎',
    '子5' => '鬼',
    '子6' => '氐',
    '子0' => '虚',

    '辰1' => '毕',
    '辰2' => '翼',
    '辰3' => '箕',
    '辰4' => '奎',
    '辰5' => '鬼',
    '辰6' => '氐',
    '辰0' => '虚',

    '巳1' => '危',
    '巳2' => '觜',
    '巳3' => '轸',
    '巳4' => '斗',
    '巳5' => '娄',
    '巳6' => '柳',
    '巳0' => '房',

    '酉1' => '危',
    '酉2' => '觜',
    '酉3' => '轸',
    '酉4' => '斗',
    '酉5' => '娄',
    '酉6' => '柳',
    '酉0' => '房',

    '丑1' => '危',
    '丑2' => '觜',
    '丑3' => '轸',
    '丑4' => '斗',
    '丑5' => '娄',
    '丑6' => '柳',
    '丑0' => '房',

    '寅1' => '心',
    '寅2' => '室',
    '寅3' => '参',
    '寅4' => '角',
    '寅5' => '牛',
    '寅6' => '胃',
    '寅0' => '星',

    '午1' => '心',
    '午2' => '室',
    '午3' => '参',
    '午4' => '角',
    '午5' => '牛',
    '午6' => '胃',
    '午0' => '星',

    '戌1' => '心',
    '戌2' => '室',
    '戌3' => '参',
    '戌4' => '角',
    '戌5' => '牛',
    '戌6' => '胃',
    '戌0' => '星',

    '亥1' => '张',
    '亥2' => '尾',
    '亥3' => '壁',
    '亥4' => '井',
    '亥5' => '亢',
    '亥6' => '女',
    '亥0' => '昴',

    '卯1' => '张',
    '卯2' => '尾',
    '卯3' => '壁',
    '卯4' => '井',
    '卯5' => '亢',
    '卯6' => '女',
    '卯0' => '昴',

    '未1' => '张',
    '未2' => '尾',
    '未3' => '壁',
    '未4' => '井',
    '未5' => '亢',
    '未6' => '女',
    '未0' => '昴'
  );

  public static $XIU_LUCK = array(
    '角' => '吉',
    '亢' => '凶',
    '氐' => '凶',
    '房' => '吉',
    '心' => '凶',
    '尾' => '吉',
    '箕' => '吉',
    '斗' => '吉',
    '牛' => '凶',
    '女' => '凶',
    '虚' => '凶',
    '危' => '凶',
    '室' => '吉',
    '壁' => '吉',
    '奎' => '凶',
    '娄' => '吉',
    '胃' => '吉',
    '昴' => '凶',
    '毕' => '吉',
    '觜' => '凶',
    '参' => '吉',
    '井' => '吉',
    '鬼' => '凶',
    '柳' => '凶',
    '星' => '凶',
    '张' => '吉',
    '翼' => '凶',
    '轸' => '吉'
  );

  public static $XIU_SONG = array(
    '角' => '角星造作主荣昌，外进田财及女郎，嫁娶婚姻出贵子，文人及第见君王，惟有埋葬不可用，三年之后主瘟疫，起工修筑坟基地，堂前立见主人凶。',
    '亢' => '亢星造作长房当，十日之中主有殃，田地消磨官失职，接运定是虎狼伤，嫁娶婚姻用此日，儿孙新妇守空房，埋葬若还用此日，当时害祸主重伤。',
    '氐' => '氐星造作主灾凶，费尽田园仓库空，埋葬不可用此日，悬绳吊颈祸重重，若是婚姻离别散，夜招浪子入房中，行船必定遭沉没，更生聋哑子孙穷。',
    '房' => '房星造作田园进，钱财牛马遍山岗，更招外处田庄宅，荣华富贵福禄康，埋葬若然用此日，高官进职拜君王，嫁娶嫦娥至月殿，三年抱子至朝堂。',
    '心' => '心星造作大为凶，更遭刑讼狱囚中，忤逆官非宅产退，埋葬卒暴死相从，婚姻若是用此日，子死儿亡泪满胸，三年之内连遭祸，事事教君没始终。',
    '尾' => '尾星造作主天恩，富贵荣华福禄增，招财进宝兴家宅，和合婚姻贵子孙，埋葬若能依此日，男清女正子孙兴，开门放水招田宅，代代公侯远播名。',
    '箕' => '箕星造作主高强，岁岁年年大吉昌，埋葬修坟大吉利，田蚕牛马遍山岗，开门放水招田宅，箧满金银谷满仓，福荫高官加禄位，六亲丰禄乐安康。',
    '斗' => '斗星造作主招财，文武官员位鼎台，田宅家财千万进，坟堂修筑贵富来，开门放水招牛马，旺蚕男女主和谐，遇此吉宿来照护，时支福庆永无灾。',
    '牛' => '牛星造作主灾危，九横三灾不可推，家宅不安人口退，田蚕不利主人衰，嫁娶婚姻皆自损，金银财谷渐无之，若是开门并放水，牛猪羊马亦伤悲。',
    '女' => '女星造作损婆娘，兄弟相嫌似虎狼，埋葬生灾逢鬼怪，颠邪疾病主瘟惶，为事遭官财失散，泻利留连不可当，开门放水用此日，全家财散主离乡。',
    '虚' => '虚星造作主灾殃，男女孤眠不一双，内乱风声无礼节，儿孙媳妇伴人床，开门放水遭灾祸，虎咬蛇伤又卒亡，三三五五连年病，家破人亡不可当。',
    '危' => '危星不可造高楼，自遭刑吊见血光，三年孩子遭水厄，后生出外永不还，埋葬若还逢此日，周年百日取高堂，三年两载一悲伤，开门放水到官堂。',
    '室' => '室星修造进田牛，儿孙代代近王侯，家贵荣华天上至，寿如彭祖八千秋，开门放水招财帛，和合婚姻生贵儿，埋葬若能依此日，门庭兴旺福无休。',
    '壁' => '壁星造作主增财，丝蚕大熟福滔天，奴婢自来人口进，开门放水出英贤，埋葬招财官品进，家中诸事乐陶然，婚姻吉利主贵子，早播名誉著祖鞭。',
    '奎' => '奎星造作得祯祥，家内荣和大吉昌，若是埋葬阴卒死，当年定主两三伤，看看军令刑伤到，重重官事主瘟惶，开门放水遭灾祸，三年两次损儿郎。',
    '娄' => '娄星修造起门庭，财旺家和事事兴，外进钱财百日进，一家兄弟播高名，婚姻进益生贵子，玉帛金银箱满盈，放水开门皆吉利，男荣女贵寿康宁。',
    '胃' => '胃星造作事如何，家贵荣华喜气多，埋葬贵临官禄位，夫妇齐眉永保康，婚姻遇此家富贵，三灾九祸不逢他，从此门前多吉庆，儿孙代代拜金阶。',
    '昴' => '昴星造作进田牛，埋葬官灾不得休，重丧二日三人死，尽卖田园不记增，开门放水招灾祸，三岁孩儿白了头，婚姻不可逢此日，死别生离是可愁。',
    '毕' => '毕星造作主光前，买得田园有余钱，埋葬此日添官职，田蚕大熟永丰年，开门放水多吉庆，合家人口得安然，婚姻若得逢此日，生得孩儿福寿全。',
    '觜' => '觜星造作有徒刑，三年必定主伶丁，埋葬卒死多因此，取定寅年使杀人，三丧不止皆由此，一人药毒二人身，家门田地皆退败，仓库金银化作尘。',
    '参' => '参星造作旺人家，文星照耀大光华，只因造作田财旺，埋葬招疾哭黄沙，开门放水加官职，房房子孙见田加，婚姻许遁遭刑克，男女朝开幕落花。',
    '井' => '井星造作旺蚕田，金榜题名第一光，埋葬须防惊卒死，狂颠风疾入黄泉，开门放水招财帛，牛马猪羊旺莫言，贵人田塘来入宅，儿孙兴旺有余钱。',
    '鬼' => '鬼星起造卒人亡，堂前不见主人郎，埋葬此日官禄至，儿孙代代近君王，开门放水须伤死，嫁娶夫妻不久长，修土筑墙伤产女，手扶双女泪汪汪。',
    '柳' => '柳星造作主遭官，昼夜偷闭不暂安，埋葬瘟惶多疾病，田园退尽守冬寒，开门放水遭聋瞎，腰驼背曲似弓弯，更有棒刑宜谨慎，妇人随客走盘桓。',
    '星' => '星宿日好造新房，进职加官近帝王，不可埋葬并放水，凶星临位女人亡，生离死别无心恋，要自归休别嫁郎，孔子九曲殊难度，放水开门天命伤。',
    '张' => '张星日好造龙轩，年年并见进庄田，埋葬不久升官职，代代为官近帝前，开门放水招财帛，婚姻和合福绵绵，田蚕人满仓库满，百般顺意自安然。',
    '翼' => '翼星不利架高堂，三年二载见瘟惶，埋葬若还逢此日，子孙必定走他乡，婚姻此日不宜利，归家定是不相当，开门放水家须破，少女恋花贪外郎。',
    '轸' => '轸星临水造龙宫，代代为官受皇封，富贵荣华增寿禄，库满仓盈自昌隆，埋葬文昌来照助，宅舍安宁不见凶，更有为官沾帝宠，婚姻龙子入龙宫。'
  );

  public static $SHOU = array(
    '东' => '青龙',
    '南' => '朱雀',
    '西' => '白虎',
    '北' => '玄武'
  );

  public static $CHONG = array('', '午', '未', '申', '酉', '戌', '亥', '子', '丑', '寅', '卯', '辰', '巳');

  public static $CHONG_GAN = array('', '戊', '己', '庚', '辛', '壬', '癸', '甲', '乙', '丙', '丁');

  public static $CHONG_GAN_BAD = array(
    '庚' => '甲',
    '辛' => '乙',
    '壬' => '丙',
    '癸' => '丁'
  );

  public static $CHONG_GAN_TIE = array('', '己', '戊', '辛', '庚', '癸', '壬', '乙', '甲', '丁', '丙');

  public static $CHONG_GAN_TIE_GOOD = array(
    '甲' => '己',
    '丙' => '辛',
    '戊' => '癸',
    '庚' => '乙',
    '壬' => '丁'
  );

  public static $SHA = array(
    '子' => '南',
    '丑' => '东',
    '寅' => '北',
    '卯' => '西',
    '辰' => '南',
    '巳' => '东',
    '午' => '北',
    '未' => '西',
    '申' => '南',
    '酉' => '东',
    '戌' => '北',
    '亥' => '西'
  );

  public static $POSITION_DESC = array(
    '坎' => '正北',
    '艮' => '东北',
    '震' => '正东',
    '巽' => '东南',
    '离' => '正南',
    '坤' => '西南',
    '兑' => '正西',
    '乾' => '西北',
    '中' => '中宫'
  );

  public static $GONG = array(
    '角' => '东',
    '井' => '南',
    '奎' => '西',
    '斗' => '北',
    '亢' => '东',
    '鬼' => '南',
    '娄' => '西',
    '牛' => '北',
    '氐' => '南',
    '柳' => '南',
    '胃' => '西',
    '女' => '北',
    '房' => '东',
    '星' => '南',
    '昴' => '西',
    '虚' => '北',
    '心' => '东',
    '张' => '南',
    '毕' => '西',
    '危' => '北',
    '尾' => '东',
    '翼' => '南',
    '觜' => '西',
    '室' => '北',
    '箕' => '东',
    '轸' => '南',
    '参' => '西',
    '壁' => '北'
  );

  public static $ZHENG = array(
    '角' => '木',
    '井' => '木',
    '奎' => '木',
    '斗' => '木',
    '亢' => '金',
    '鬼' => '金',
    '娄' => '金',
    '牛' => '金',
    '氐' => '土',
    '柳' => '土',
    '胃' => '土',
    '女' => '土',
    '房' => '日',
    '星' => '日',
    '昴' => '日',
    '虚' => '日',
    '心' => '月',
    '张' => '月',
    '毕' => '月',
    '危' => '月',
    '尾' => '火',
    '翼' => '火',
    '觜' => '火',
    '室' => '火',
    '箕' => '水',
    '轸' => '水',
    '参' => '水',
    '壁' => '水'
  );

  public static $ANIMAL = array(
    '角' => '蛟',
    '斗' => '獬',
    '奎' => '狼',
    '井' => '犴',
    '亢' => '龙',
    '牛' => '牛',
    '娄' => '狗',
    '鬼' => '羊',
    '女' => '蝠',
    '氐' => '貉',
    '胃' => '彘',
    '柳' => '獐',
    '房' => '兔',
    '虚' => '鼠',
    '昴' => '鸡',
    '星' => '马',
    '心' => '狐',
    '危' => '燕',
    '毕' => '乌',
    '张' => '鹿',
    '尾' => '虎',
    '室' => '猪',
    '觜' => '猴',
    '翼' => '蛇',
    '箕' => '豹',
    '壁' => '獝',
    '参' => '猿',
    '轸' => '蚓'
  );

  public static $WU_XING_GAN = array(
    '甲' => '木',
    '乙' => '木',
    '丙' => '火',
    '丁' => '火',
    '戊' => '土',
    '己' => '土',
    '庚' => '金',
    '辛' => '金',
    '壬' => '水',
    '癸' => '水'
  );

  public static $WU_XING_ZHI = array(
    '寅' => '木',
    '卯' => '木',
    '巳' => '火',
    '午' => '火',
    '辰' => '土',
    '丑' => '土',
    '戌' => '土',
    '未' => '土',
    '申' => '金',
    '酉' => '金',
    '亥' => '水',
    '子' => '水'
  );

  public static $NAYIN = array(
    '甲子' => '海中金',
    '甲午' => '沙中金',
    '丙寅' => '炉中火',
    '丙申' => '山下火',
    '戊辰' => '大林木',
    '戊戌' => '平地木',
    '庚午' => '路旁土',
    '庚子' => '壁上土',
    '壬申' => '剑锋金',
    '壬寅' => '金箔金',
    '甲戌' => '山头火',
    '甲辰' => '覆灯火',
    '丙子' => '涧下水',
    '丙午' => '天河水',
    '戊寅' => '城头土',
    '戊申' => '大驿土',
    '庚辰' => '白蜡金',
    '庚戌' => '钗钏金',
    '壬午' => '杨柳木',
    '壬子' => '桑柘木',
    '甲申' => '泉中水',
    '甲寅' => '大溪水',
    '丙戌' => '屋上土',
    '丙辰' => '沙中土',
    '戊子' => '霹雳火',
    '戊午' => '天上火',
    '庚寅' => '松柏木',
    '庚申' => '石榴木',
    '壬辰' => '长流水',
    '壬戌' => '大海水',
    '乙丑' => '海中金',
    '乙未' => '沙中金',
    '丁卯' => '炉中火',
    '丁酉' => '山下火',
    '己巳' => '大林木',
    '己亥' => '平地木',
    '辛未' => '路旁土',
    '辛丑' => '壁上土',
    '癸酉' => '剑锋金',
    '癸卯' => '金箔金',
    '乙亥' => '山头火',
    '乙巳' => '覆灯火',
    '丁丑' => '涧下水',
    '丁未' => '天河水',
    '己卯' => '城头土',
    '己酉' => '大驿土',
    '辛巳' => '白蜡金',
    '辛亥' => '钗钏金',
    '癸未' => '杨柳木',
    '癸丑' => '桑柘木',
    '乙酉' => '泉中水',
    '乙卯' => '大溪水',
    '丁亥' => '屋上土',
    '丁巳' => '沙中土',
    '己丑' => '霹雳火',
    '己未' => '天上火',
    '辛卯' => '松柏木',
    '辛酉' => '石榴木',
    '癸巳' => '长流水',
    '癸亥' => '大海水'
  );

  public static $SHI_SHEN_GAN = array(
    '甲甲' => '比肩',
    '甲乙' => '劫财',
    '甲丙' => '食神',
    '甲丁' => '伤官',
    '甲戊' => '偏财',
    '甲己' => '正财',
    '甲庚' => '七杀',
    '甲辛' => '正官',
    '甲壬' => '偏印',
    '甲癸' => '正印',
    '乙乙' => '比肩',
    '乙甲' => '劫财',
    '乙丁' => '食神',
    '乙丙' => '伤官',
    '乙己' => '偏财',
    '乙戊' => '正财',
    '乙辛' => '七杀',
    '乙庚' => '正官',
    '乙癸' => '偏印',
    '乙壬' => '正印',
    '丙丙' => '比肩',
    '丙丁' => '劫财',
    '丙戊' => '食神',
    '丙己' => '伤官',
    '丙庚' => '偏财',
    '丙辛' => '正财',
    '丙壬' => '七杀',
    '丙癸' => '正官',
    '丙甲' => '偏印',
    '丙乙' => '正印',
    '丁丁' => '比肩',
    '丁丙' => '劫财',
    '丁己' => '食神',
    '丁戊' => '伤官',
    '丁辛' => '偏财',
    '丁庚' => '正财',
    '丁癸' => '七杀',
    '丁壬' => '正官',
    '丁乙' => '偏印',
    '丁甲' => '正印',
    '戊戊' => '比肩',
    '戊己' => '劫财',
    '戊庚' => '食神',
    '戊辛' => '伤官',
    '戊壬' => '偏财',
    '戊癸' => '正财',
    '戊甲' => '七杀',
    '戊乙' => '正官',
    '戊丙' => '偏印',
    '戊丁' => '正印',
    '己己' => '比肩',
    '己戊' => '劫财',
    '己辛' => '食神',
    '己庚' => '伤官',
    '己癸' => '偏财',
    '己壬' => '正财',
    '己乙' => '七杀',
    '己甲' => '正官',
    '己丁' => '偏印',
    '己丙' => '正印',
    '庚庚' => '比肩',
    '庚辛' => '劫财',
    '庚壬' => '食神',
    '庚癸' => '伤官',
    '庚甲' => '偏财',
    '庚乙' => '正财',
    '庚丙' => '七杀',
    '庚丁' => '正官',
    '庚戊' => '偏印',
    '庚己' => '正印',
    '辛辛' => '比肩',
    '辛庚' => '劫财',
    '辛癸' => '食神',
    '辛壬' => '伤官',
    '辛乙' => '偏财',
    '辛甲' => '正财',
    '辛丁' => '七杀',
    '辛丙' => '正官',
    '辛己' => '偏印',
    '辛戊' => '正印',
    '壬壬' => '比肩',
    '壬癸' => '劫财',
    '壬甲' => '食神',
    '壬乙' => '伤官',
    '壬丙' => '偏财',
    '壬丁' => '正财',
    '壬戊' => '七杀',
    '壬己' => '正官',
    '壬庚' => '偏印',
    '壬辛' => '正印',
    '癸癸' => '比肩',
    '癸壬' => '劫财',
    '癸乙' => '食神',
    '癸甲' => '伤官',
    '癸丁' => '偏财',
    '癸丙' => '正财',
    '癸己' => '七杀',
    '癸戊' => '正官',
    '癸辛' => '偏印',
    '癸庚' => '正印'
  );

  public static $SHI_SHEN_ZHI = array(
    '甲子癸' => '正印',
    '甲丑癸' => '正印',
    '甲丑己' => '正财',
    '甲丑辛' => '正官',
    '甲寅丙' => '食神',
    '甲寅甲' => '比肩',
    '甲寅戊' => '偏财',
    '甲卯乙' => '劫财',
    '甲辰乙' => '劫财',
    '甲辰戊' => '偏财',
    '甲辰癸' => '正印',
    '甲巳戊' => '偏财',
    '甲巳丙' => '食神',
    '甲巳庚' => '七杀',
    '甲午丁' => '伤官',
    '甲午己' => '正财',
    '甲未乙' => '劫财',
    '甲未己' => '正财',
    '甲未丁' => '伤官',
    '甲申戊' => '偏财',
    '甲申庚' => '七杀',
    '甲申壬' => '偏印',
    '甲酉辛' => '正官',
    '甲戌辛' => '正官',
    '甲戌戊' => '偏财',
    '甲戌丁' => '伤官',
    '甲亥壬' => '偏印',
    '甲亥甲' => '比肩',
    '乙子癸' => '偏印',
    '乙丑癸' => '偏印',
    '乙丑己' => '偏财',
    '乙丑辛' => '七杀',
    '乙寅丙' => '伤官',
    '乙寅甲' => '劫财',
    '乙寅戊' => '正财',
    '乙卯乙' => '比肩',
    '乙辰乙' => '比肩',
    '乙辰戊' => '正财',
    '乙辰癸' => '偏印',
    '乙巳戊' => '正财',
    '乙巳丙' => '伤官',
    '乙巳庚' => '正官',
    '乙午丁' => '食神',
    '乙午己' => '偏财',
    '乙未乙' => '比肩',
    '乙未己' => '偏财',
    '乙未丁' => '食神',
    '乙申戊' => '正财',
    '乙申庚' => '正官',
    '乙申壬' => '正印',
    '乙酉辛' => '七杀',
    '乙戌辛' => '七杀',
    '乙戌戊' => '正财',
    '乙戌丁' => '食神',
    '乙亥壬' => '正印',
    '乙亥甲' => '劫财',
    '丙子癸' => '正官',
    '丙丑癸' => '正官',
    '丙丑己' => '伤官',
    '丙丑辛' => '正财',
    '丙寅丙' => '比肩',
    '丙寅甲' => '偏印',
    '丙寅戊' => '食神',
    '丙卯乙' => '正印',
    '丙辰乙' => '正印',
    '丙辰戊' => '食神',
    '丙辰癸' => '正官',
    '丙巳戊' => '食神',
    '丙巳丙' => '比肩',
    '丙巳庚' => '偏财',
    '丙午丁' => '劫财',
    '丙午己' => '伤官',
    '丙未乙' => '正印',
    '丙未己' => '伤官',
    '丙未丁' => '劫财',
    '丙申戊' => '食神',
    '丙申庚' => '偏财',
    '丙申壬' => '七杀',
    '丙酉辛' => '正财',
    '丙戌辛' => '正财',
    '丙戌戊' => '食神',
    '丙戌丁' => '劫财',
    '丙亥壬' => '七杀',
    '丙亥甲' => '偏印',
    '丁子癸' => '七杀',
    '丁丑癸' => '七杀',
    '丁丑己' => '食神',
    '丁丑辛' => '偏财',
    '丁寅丙' => '劫财',
    '丁寅甲' => '正印',
    '丁寅戊' => '伤官',
    '丁卯乙' => '偏印',
    '丁辰乙' => '偏印',
    '丁辰戊' => '伤官',
    '丁辰癸' => '七杀',
    '丁巳戊' => '伤官',
    '丁巳丙' => '劫财',
    '丁巳庚' => '正财',
    '丁午丁' => '比肩',
    '丁午己' => '食神',
    '丁未乙' => '偏印',
    '丁未己' => '食神',
    '丁未丁' => '比肩',
    '丁申戊' => '伤官',
    '丁申庚' => '正财',
    '丁申壬' => '正官',
    '丁酉辛' => '偏财',
    '丁戌辛' => '偏财',
    '丁戌戊' => '伤官',
    '丁戌丁' => '比肩',
    '丁亥壬' => '正官',
    '丁亥甲' => '正印',
    '戊子癸' => '正财',
    '戊丑癸' => '正财',
    '戊丑己' => '劫财',
    '戊丑辛' => '伤官',
    '戊寅丙' => '偏印',
    '戊寅甲' => '七杀',
    '戊寅戊' => '比肩',
    '戊卯乙' => '正官',
    '戊辰乙' => '正官',
    '戊辰戊' => '比肩',
    '戊辰癸' => '正财',
    '戊巳戊' => '比肩',
    '戊巳丙' => '偏印',
    '戊巳庚' => '食神',
    '戊午丁' => '正印',
    '戊午己' => '劫财',
    '戊未乙' => '正官',
    '戊未己' => '劫财',
    '戊未丁' => '正印',
    '戊申戊' => '比肩',
    '戊申庚' => '食神',
    '戊申壬' => '偏财',
    '戊酉辛' => '伤官',
    '戊戌辛' => '伤官',
    '戊戌戊' => '比肩',
    '戊戌丁' => '正印',
    '戊亥壬' => '偏财',
    '戊亥甲' => '七杀',
    '己子癸' => '偏财',
    '己丑癸' => '偏财',
    '己丑己' => '比肩',
    '己丑辛' => '食神',
    '己寅丙' => '正印',
    '己寅甲' => '正官',
    '己寅戊' => '劫财',
    '己卯乙' => '七杀',
    '己辰乙' => '七杀',
    '己辰戊' => '劫财',
    '己辰癸' => '偏财',
    '己巳戊' => '劫财',
    '己巳丙' => '正印',
    '己巳庚' => '伤官',
    '己午丁' => '偏印',
    '己午己' => '比肩',
    '己未乙' => '七杀',
    '己未己' => '比肩',
    '己未丁' => '偏印',
    '己申戊' => '劫财',
    '己申庚' => '伤官',
    '己申壬' => '正财',
    '己酉辛' => '食神',
    '己戌辛' => '食神',
    '己戌戊' => '劫财',
    '己戌丁' => '偏印',
    '己亥壬' => '正财',
    '己亥甲' => '正官',
    '庚子癸' => '伤官',
    '庚丑癸' => '伤官',
    '庚丑己' => '正印',
    '庚丑辛' => '劫财',
    '庚寅丙' => '七杀',
    '庚寅甲' => '偏财',
    '庚寅戊' => '偏印',
    '庚卯乙' => '正财',
    '庚辰乙' => '正财',
    '庚辰戊' => '偏印',
    '庚辰癸' => '伤官',
    '庚巳戊' => '偏印',
    '庚巳丙' => '七杀',
    '庚巳庚' => '比肩',
    '庚午丁' => '正官',
    '庚午己' => '正印',
    '庚未乙' => '正财',
    '庚未己' => '正印',
    '庚未丁' => '正官',
    '庚申戊' => '偏印',
    '庚申庚' => '比肩',
    '庚申壬' => '食神',
    '庚酉辛' => '劫财',
    '庚戌辛' => '劫财',
    '庚戌戊' => '偏印',
    '庚戌丁' => '正官',
    '庚亥壬' => '食神',
    '庚亥甲' => '偏财',
    '辛子癸' => '食神',
    '辛丑癸' => '食神',
    '辛丑己' => '偏印',
    '辛丑辛' => '比肩',
    '辛寅丙' => '正官',
    '辛寅甲' => '正财',
    '辛寅戊' => '正印',
    '辛卯乙' => '偏财',
    '辛辰乙' => '偏财',
    '辛辰戊' => '正印',
    '辛辰癸' => '食神',
    '辛巳戊' => '正印',
    '辛巳丙' => '正官',
    '辛巳庚' => '劫财',
    '辛午丁' => '七杀',
    '辛午己' => '偏印',
    '辛未乙' => '偏财',
    '辛未己' => '偏印',
    '辛未丁' => '七杀',
    '辛申戊' => '正印',
    '辛申庚' => '劫财',
    '辛申壬' => '伤官',
    '辛酉辛' => '比肩',
    '辛戌辛' => '比肩',
    '辛戌戊' => '正印',
    '辛戌丁' => '七杀',
    '辛亥壬' => '伤官',
    '辛亥甲' => '正财',
    '壬子癸' => '劫财',
    '壬丑癸' => '劫财',
    '壬丑己' => '正官',
    '壬丑辛' => '正印',
    '壬寅丙' => '偏财',
    '壬寅甲' => '食神',
    '壬寅戊' => '七杀',
    '壬卯乙' => '伤官',
    '壬辰乙' => '伤官',
    '壬辰戊' => '七杀',
    '壬辰癸' => '劫财',
    '壬巳戊' => '七杀',
    '壬巳丙' => '偏财',
    '壬巳庚' => '偏印',
    '壬午丁' => '正财',
    '壬午己' => '正官',
    '壬未乙' => '伤官',
    '壬未己' => '正官',
    '壬未丁' => '正财',
    '壬申戊' => '七杀',
    '壬申庚' => '偏印',
    '壬申壬' => '比肩',
    '壬酉辛' => '正印',
    '壬戌辛' => '正印',
    '壬戌戊' => '七杀',
    '壬戌丁' => '正财',
    '壬亥壬' => '比肩',
    '壬亥甲' => '食神',
    '癸子癸' => '比肩',
    '癸丑癸' => '比肩',
    '癸丑己' => '七杀',
    '癸丑辛' => '偏印',
    '癸寅丙' => '正财',
    '癸寅甲' => '伤官',
    '癸寅戊' => '正官',
    '癸卯乙' => '食神',
    '癸辰乙' => '食神',
    '癸辰戊' => '正官',
    '癸辰癸' => '比肩',
    '癸巳戊' => '正官',
    '癸巳丙' => '正财',
    '癸巳庚' => '正印',
    '癸午丁' => '偏财',
    '癸午己' => '七杀',
    '癸未乙' => '食神',
    '癸未己' => '七杀',
    '癸未丁' => '偏财',
    '癸申戊' => '正官',
    '癸申庚' => '正印',
    '癸申壬' => '劫财',
    '癸酉辛' => '偏印',
    '癸戌辛' => '偏印',
    '癸戌戊' => '正官',
    '癸戌丁' => '偏财',
    '癸亥壬' => '劫财',
    '癸亥甲' => '伤官'
  );

  public static $ZHI_HIDE_GAN = array(
    '子' => array('癸'),
    '丑' => array('己', '癸', '辛'),
    '寅' => array('甲', '丙', '戊'),
    '卯' => array('乙'),
    '辰' => array('戊', '乙', '癸'),
    '巳' => array('丙', '庚', '戊'),
    '午' => array('丁', '己'),
    '未' => array('己', '丁', '乙'),
    '申' => array('庚', '壬', '戊'),
    '酉' => array('辛'),
    '戌' => array('戊', '辛', '丁'),
    '亥' => array('壬', '甲')
  );

  /**
   * 计算指定日期距离基准日期的天数
   * @param int $year 农历年
   * @param int $month 农历月
   * @param int $day 农历日
   * @return int 距离天数
   */
  public static function computeAddDays($year, $month, $day)
  {
    $y = LunarUtil::$BASE_YEAR;
    $m = LunarUtil::$BASE_MONTH;
    $diff = LunarUtil::getDaysOfMonth($y, $m) - LunarUtil::$BASE_DAY;
    $m = LunarUtil::nextMonth($y, $m);
    while (true) {
      $diff += LunarUtil::getDaysOfMonth($y, $m);
      $m = LunarUtil::nextMonth($y, $m);
      if ($m === 1) {
        $y++;
      }
      if ($y === $year && $m === $month) {
        $diff += $day;
        break;
      }
    }
    return $diff;
  }

  /**
   * 获取指定年份的闰月，1代表闰1月，0代表无闰月
   * @param int $year 农历年
   * @return int 闰月数字，1代表闰1月，0代表无闰月
   */
  public static function getLeapMonth($year)
  {
    $index = $year - LunarUtil::$BASE_YEAR + LunarUtil::$BASE_INDEX;
    $v = LunarUtil::$LUNAR_MONTH[2 * $index + 1];
    $v = ($v >> 4) & 0x0F;
    return $v;
  }

  /**
   * 获取指定年月的下一个月是第几月，1到12，闰月为负数
   * @param int $y 农历年
   * @param int $m 农历月，闰月为负数
   * @return int 1到12，闰月为负数
   */
  public static function nextMonth($y, $m)
  {
    $n = abs($m) + 1;
    if ($m > 0) {
      $index = $y - LunarUtil::$BASE_YEAR + LunarUtil::$BASE_INDEX;
      $v = LunarUtil::$LUNAR_MONTH[2 * $index + 1];
      $v = ($v >> 4) & 0x0F;
      if ($v === $m) {
        $n = -$m;
      }
    }
    if ($n == 13) {
      $n = 1;
    }
    return (int)$n;
  }

  /**
   * 获取某年某月有多少天
   * @param int $year 农历年
   * @param int $month 农历月，闰月为负数
   * @return int 天数
   */
  public static function getDaysOfMonth($year, $month)
  {
    $index = $year - LunarUtil::$BASE_YEAR + LunarUtil::$BASE_INDEX;
    $d = 30;
    if (1 <= $month && $month <= 8) {
      $v = LunarUtil::$LUNAR_MONTH[2 * $index];
      $l = $month - 1;
      if ((($v >> $l) & 0x01) === 1) {
        $d = 29;
      }
    } else if (9 <= $month && $month <= 12) {
      $v = LunarUtil::$LUNAR_MONTH[2 * $index + 1];
      $l = $month - 9;
      if ((($v >> $l) & 0x01) === 1) {
        $d = 29;
      }
    } else {
      $v = LunarUtil::$LUNAR_MONTH[2 * $index + 1];
      $v = ($v >> 4) & 0x0F;
      if ($v !== abs($month)) {
        $d = 0;
      } else {
        $d = 29;
        foreach (LunarUtil::$LEAP_MONTH_YEAR as $i) {
          if ($i === $index) {
            $d = 30;
            break;
          }
        }
      }
    }
    return $d;
  }

  /**
   * 获取HH:mm时刻的地支序号(0到11)，非法的时刻返回0
   * @param string $hm HH:mm时刻
   * @return int 地支序号，0到11
   */
  public static function getTimeZhiIndex($hm)
  {
    if (null == $hm) {
      return 0;
    }
    if (strlen($hm) > 5) {
      $hm = substr($hm, 0, 5);
    }
    $x = 1;
    for ($i = 1; $i < 22; $i += 2) {
      if (strcmp($hm, ($i < 10 ? '0' : '') . $i . ':00') >= 0 && strcmp($hm, ($i + 1 < 10 ? '0' : '') . ($i + 1) . ':59') <= 0) {
        return $x;
      }
      $x++;
    }
    return 0;
  }

  /**
   * 将HH:mm时刻转换为时辰（地支），非法的时刻返回子
   * @param string $hm HH:mm时刻
   * @return string 时辰(地支)，如子
   */
  public static function convertTime($hm)
  {
    return LunarUtil::$ZHI[LunarUtil::getTimeZhiIndex($hm) + 1];
  }

  /**
   * 数字转十六进制
   * @param int $n 数字
   * @return string 十六进制
   */
  private static function hex($n)
  {
    $s = dechex($n);
    if (strlen($s) < 2) {
      $s = '0' . $s;
    }
    return strtoupper($s);
  }

  /**
   * 获取干支对应的甲子序号
   * @param string $ganZhi 干支
   * @return int 甲子序号
   */
  public static function getJiaZiIndex($ganZhi)
  {
    for ($i = 0, $j = count(LunarUtil::$JIA_ZI); $i < $j; $i++) {
      if (strcmp(LunarUtil::$JIA_ZI[$i], $ganZhi) === 0) {
        return $i;
      }
    }
    return -1;
  }

  /**
   * 获取日宜
   * @param string $monthGanZhi 月干支
   * @param string $dayGanZhi 日干支
   * @return array 宜
   */
  public static function getDayYi($monthGanZhi, $dayGanZhi)
  {
    $l = array();
    $day = LunarUtil::hex(LunarUtil::getJiaZiIndex($dayGanZhi));
    $month = LunarUtil::hex(LunarUtil::getJiaZiIndex($monthGanZhi));
    $right = LunarUtil::$DAY_YI_JI;
    $index = strpos($right, $day . '=');
    while ($index) {
      $right = substr($right, $index + 3);
      $left = $right;
      if (strpos($left, '=')) {
        $left = substr($left, 0, strpos($left, '=') - 2);
      }
      $matched = false;
      $months = substr($left, 0, strpos($left, ':'));
      for ($i = 0, $j = strlen($months); $i < $j; $i += 2) {
        $m = substr($months, $i, 2);
        if ($m == $month) {
          $matched = true;
          break;
        }
      }
      if ($matched) {
        $ys = substr($left, strpos($left, ':') + 1, strlen($left));
        $ys = substr($ys, 0, strpos($ys, ','));
        for ($i = 0, $j = strlen($ys); $i < $j; $i += 2) {
          $m = substr($ys, $i, 2);
          $l[] = LunarUtil::$YI_JI[hexdec($m)];
        }
        break;
      }
      $index = strpos($right, $day . '=');
    }
    if (count($l) < 1) {
      $l[] = '无';
    }
    return $l;
  }

  /**
   * 获取日忌
   * @param string $monthGanZhi 月干支
   * @param string $dayGanZhi 日干支
   * @return array 忌
   */
  public static function getDayJi($monthGanZhi, $dayGanZhi)
  {
    $l = array();
    $day = LunarUtil::hex(LunarUtil::getJiaZiIndex($dayGanZhi));
    $month = LunarUtil::hex(LunarUtil::getJiaZiIndex($monthGanZhi));
    $right = LunarUtil::$DAY_YI_JI;
    $index = strpos($right, $day . '=');
    while ($index) {
      $right = substr($right, $index + 3);
      $left = $right;
      if (strpos($left, '=')) {
        $left = substr($left, 0, strpos($left, '=') - 2);
      }
      $matched = false;
      $months = substr($left, 0, strpos($left, ':'));
      for ($i = 0, $j = strlen($months); $i < $j; $i += 2) {
        $m = substr($months, $i, 2);
        if ($m == $month) {
          $matched = true;
          break;
        }
      }
      if ($matched) {
        $ys = substr($left, strpos($left, ',') + 1, strlen($left));
        for ($i = 0, $j = strlen($ys); $i < $j; $i += 2) {
          $m = substr($ys, $i, 2);
          $l[] = LunarUtil::$YI_JI[hexdec($m)];
        }
        break;
      }
      $index = strpos($right, $day . '=');
    }
    if (count($l) < 1) {
      $l[] = '无';
    }
    return $l;
  }

  /**
   * 获取日吉神
   * @param int $lunarMonth 月
   * @param string $dayGanZhi 日干支
   * @return array 吉神
   */
  public static function getDayJiShen($lunarMonth, $dayGanZhi)
  {
    $l = array();
    $day = LunarUtil::hex(LunarUtil::getJiaZiIndex($dayGanZhi));
    $month = strtoupper(dechex(abs($lunarMonth)));
    $index = strpos(LunarUtil::$DAY_SHEN_SHA, $month . $day . '=');
    if ($index > -1) {
      $left = substr(LunarUtil::$DAY_SHEN_SHA, $index + 4);
      if (strpos($left, '=')) {
        $left = substr($left, 0, strpos($left, '=') - 3);
      }
      $js = substr($left, 0, strpos($left, ','));
      for ($i = 0, $j = strlen($js); $i < $j; $i += 2) {
        $m = substr($js, $i, 2);
        $l[] = LunarUtil::$SHEN_SHA[hexdec($m)];
      }
    }
    if (count($l) < 1) {
      $l[] = '无';
    }
    return $l;
  }

  /**
   * 获取日凶煞
   * @param int $lunarMonth 月
   * @param string $dayGanZhi 日干支
   * @return array 凶煞
   */
  public static function getDayXiongSha($lunarMonth, $dayGanZhi)
  {
    $l = array();
    $day = LunarUtil::hex(LunarUtil::getJiaZiIndex($dayGanZhi));
    $month = strtoupper(dechex(abs($lunarMonth)));
    $index = strpos(LunarUtil::$DAY_SHEN_SHA, $month . $day . '=');
    if ($index > -1) {
      $left = substr(LunarUtil::$DAY_SHEN_SHA, $index + 4);
      if (strpos($left, '=')) {
        $left = substr($left, 0, strpos($left, '=') - 3);
      }
      $xs = substr($left, strpos($left, ',') + 1, strlen($left));
      for ($i = 0, $j = strlen($xs); $i < $j; $i += 2) {
        $m = substr($xs, $i, 2);
        $l[] = LunarUtil::$SHEN_SHA[hexdec($m)];
      }
    }
    if (count($l) < 1) {
      $l[] = '无';
    }
    return $l;
  }

  /**
   * 获取时宜
   * @param string $dayGanZhi 日干支
   * @param string $timeGanZhi 时辰干支
   * @return array 宜
   */
  public static function getTimeYi($dayGanZhi, $timeGanZhi)
  {
    $l = array();
    $day = LunarUtil::hex(LunarUtil::getJiaZiIndex($dayGanZhi));
    $time = LunarUtil::hex(LunarUtil::getJiaZiIndex($timeGanZhi));
    $index = strpos(LunarUtil::$TIME_YI_JI, $day . $time . '=');
    if ($index > -1) {
      $left = substr(LunarUtil::$TIME_YI_JI, $index + 5);
      if (strpos($left, '=')) {
        $left = substr($left, 0, strpos($left, '=') - 4);
      }
      $ys = substr($left, 0, strpos($left, ','));
      for ($i = 0, $j = strlen($ys); $i < $j; $i += 2) {
        $m = substr($ys, $i, 2);
        $l[] = LunarUtil::$YI_JI[hexdec($m)];
      }
    }
    if (count($l) < 1) {
      $l[] = '无';
    }
    return $l;
  }

  /**
   * 获取时忌
   * @param string $dayGanZhi 日干支
   * @param string $timeGanZhi 时辰干支
   * @return array 忌
   */
  public static function getTimeJi($dayGanZhi, $timeGanZhi)
  {
    $l = array();
    $day = LunarUtil::hex(LunarUtil::getJiaZiIndex($dayGanZhi));
    $time = LunarUtil::hex(LunarUtil::getJiaZiIndex($timeGanZhi));
    $index = strpos(LunarUtil::$TIME_YI_JI, $day . $time . '=');
    if ($index > -1) {
      $left = substr(LunarUtil::$TIME_YI_JI, $index + 5);
      if (strpos($left, '=')) {
        $left = substr($left, 0, strpos($left, '=') - 4);
      }
      $js = substr($left, strpos($left, ',') + 1, strlen($left));
      for ($i = 0, $j = strlen($js); $i < $j; $i += 2) {
        $m = substr($js, $i, 2);
        $l[] = LunarUtil::$YI_JI[hexdec($m)];
      }
    }
    if (count($l) < 1) {
      $l[] = '无';
    }
    return $l;
  }
}

/**
 * 法定节假日工具（自2001年12月29日起）
 * @package com\nlf\calendar\util
 */
class HolidayUtil
{

  /**
   * 数据段长度
   * @var int
   */
  private static $SIZE = 18;

  /**
   * 0
   * @var int
   */
  private static $ZERO = 48;

  /**
   * 节假日名称（元旦0，春节1，清明2，劳动3，端午4，中秋5，国庆6，国庆中秋7，抗战胜利日8）
   * @var array
   */
  private static $NAMES = array('元旦节', '春节', '清明节', '劳动节', '端午节', '中秋节', '国庆节', '国庆中秋', '抗战胜利日');

  /**
   * 节假日数据，日期YYYYMMDD+名称下标+是否调休+对应节日YYYYMMDD
   * @var string
   */
  private static $DATA = '';

  private static function padding($n)
  {
    return ($n < 10 ? '0' : '') . $n;
  }

  private static function buildHolidayForward($s)
  {
    $day = substr($s, 0, 8);
    $name = HolidayUtil::$NAMES[ord(substr($s, 8, 1)) - HolidayUtil::$ZERO];
    $work = ord(substr($s, 9, 1)) === HolidayUtil::$ZERO;
    $target = substr($s, 10, 8);
    return new Holiday($day, $name, $work, $target);
  }

  private static function buildHolidayBackward($s)
  {
    $size = strlen($s);
    $day = substr($s, $size - 18, 8);
    $name = HolidayUtil::$NAMES[ord(substr($s, $size - 10, 1)) - HolidayUtil::$ZERO];
    $work = ord(substr($s, $size - 9, 1)) === HolidayUtil::$ZERO;
    $target = substr($s, $size - 8);
    return new Holiday($day, $name, $work, $target);
  }

  private static function findForward($key)
  {
    $start = strpos(HolidayUtil::$DATA, $key);
    if (!$start) {
      return null;
    }
    $right = substr(HolidayUtil::$DATA, $start);
    $n = strlen($right) % HolidayUtil::$SIZE;
    if ($n > 0) {
      $right = substr($right, $n);
    }
    while ((strpos($right, $key) !== 0) && strlen($right) >= HolidayUtil::$SIZE) {
      $right = substr($right, HolidayUtil::$SIZE);
    }
    return $right;
  }

  private static function findBackward($key)
  {
    $start = strrpos(HolidayUtil::$DATA, $key);
    if (!$start) {
      return null;
    }
    $left = substr(HolidayUtil::$DATA, 0, $start + strlen($key));
    $size = strlen($left);
    $n = $size % HolidayUtil::$SIZE;
    if ($n > 0) {
      $left = substr($left, 0, $size - $n);
    }
    $size = strlen($left);
    while ((substr_compare($left, $key, -strlen($key)) !== 0) && $size >= HolidayUtil::$SIZE) {
      $left = substr($left, 0, $size - HolidayUtil::$SIZE);
      $size = strlen($left);
    }
    return $left;
  }

  private static function findHolidaysForward($key)
  {
    $l = array();
    $s = HolidayUtil::findForward($key);
    if (null == $s) {
      return $l;
    }
    while (strpos($s, $key) === 0) {
      $l[] = HolidayUtil::buildHolidayForward($s);
      $s = substr($s, HolidayUtil::$SIZE);
    }
    return $l;
  }

  private static function findHolidaysBackward($key)
  {
    $l = array();
    $s = HolidayUtil::findBackward($key);
    if (null == $s) {
      return $l;
    }
    while (substr_compare($s, $key, -strlen($key)) === 0) {
      $l[] = HolidayUtil::buildHolidayBackward($s);
      $s = substr($s, 0, strlen($s) - HolidayUtil::$SIZE);
    }
    return array_reverse($l);
  }

  /**
   * 获取指定年月日的节假日信息，如果不存在，返回null
   * @param int $year 年
   * @param int $month 月，1-12
   * @param int $day 日，1-31
   * @return Holiday|null
   */
  public static function getHolidayByYmd($year, $month, $day)
  {
    $l = HolidayUtil::findHolidaysForward($year . HolidayUtil::padding($month) . HolidayUtil::padding($day));
    return empty($l) ? null : $l[0];
  }

  /**
   * 获取指定年月日的节假日信息，如果不存在，返回null
   * @param string $ymd 年月日
   * @return Holiday|null
   */
  public static function getHoliday($ymd)
  {
    $l = HolidayUtil::findHolidaysForward(str_replace('-', '', $ymd));
    return empty($l) ? null : $l[0];
  }

  /**
   * 获取指定年月的节假日列表
   * @param int $year 年
   * @param int $month 月，1-12
   * @return array
   */
  public static function getHolidaysByYm($year, $month)
  {
    return HolidayUtil::findHolidaysForward($year . HolidayUtil::padding($month));
  }

  /**
   * 获取指定年的节假日列表
   * @param int $year 年
   * @return array
   */
  public static function getHolidaysByYear($year)
  {
    return HolidayUtil::findHolidaysForward($year . '');
  }

  /**
   * 获取指定年月日的节假日列表
   * @param string $ymd 年、年月、年月日
   * @return array 节假日列表
   */
  public static function getHolidays($ymd)
  {
    return HolidayUtil::findHolidaysForward(str_replace('-', '', $ymd));
  }

  /**
   * 获取指定节日（仅节日当天）的相关节假日列表
   * @param int $year 年
   * @param int $month 月，1-12
   * @param int $day 日，1-31
   * @return array
   */
  public static function getHolidaysByTargetYmd($year, $month, $day)
  {
    return HolidayUtil::findHolidaysBackward($year . HolidayUtil::padding($month) . HolidayUtil::padding($day));
  }

  /**
   * 获取指定节日（仅节日当天）的相关节假日列表
   * @param string $ymd 年月日
   * @return array
   */
  public static function getHolidaysByTarget($ymd)
  {
    return HolidayUtil::findHolidaysBackward(str_replace('-', '', $ymd));
  }
}

namespace com\nlf\calendar;

use com\nlf\calendar\util\LunarUtil;
use com\nlf\calendar\util\SolarUtil;
use DateTime;
use Exception;

/**
 * 阳历日期
 * @package com\nlf\calendar
 */
class Solar
{

  /**
   * 2000年儒略日数(2000-1-1 12:00:00 UTC)
   * @var int
   */
  public static $J2000 = 2451545;

  /**
   * 年
   * @var int
   */
  private $year;

  /**
   * 月
   * @var int
   */
  private $month;

  /**
   * 日
   * @var int
   */
  private $day;

  /**
   * 时
   * @var int
   */
  private $hour;

  /**
   * 分
   * @var int
   */
  private $minute;

  /**
   * 秒
   * @var int
   */
  private $second;

  /**
   * 日期
   * @var
   */
  private $calendar;

  function __construct($year, $month, $day, $hour, $minute, $second)
  {
    $this->year = $year;
    $this->month = $month;
    $this->day = $day;
    $this->hour = $hour;
    $this->minute = $minute;
    $this->second = $second;
    try {
      $this->calendar = new DateTime($year . '-' . $month . '-' . $day . ' ' . $hour . ':' . $minute . ':' . $second);
    } catch (Exception $e) {
    }
  }

  public static function fromDate($date)
  {
    $year = (int)date_format($date, 'Y');
    $month = (int)date_format($date, 'n');
    $day = (int)date_format($date, 'j');
    $hour = (int)date_format($date, 'G');
    $minute = (int)date_format($date, 'i');
    $second = (int)date_format($date, 's');
    return new Solar($year, $month, $day, $hour, $minute, $second);
  }

  private static function int2($v)
  {
    $v = floor(doubleval($v));
    return $v < 0 ? $v + 1 : $v;
  }

  public static function fromJulianDay($julianDay)
  {
    $julianDay += 0.5;

    // 日数的整数部份
    $a = Solar::int2($julianDay);
    // 日数的小数部分
    $f = $julianDay - $a;
    if ($a > 2299161) {
      $dd = Solar::int2(($a - 1867216.25) / 36524.25);
      $a += 1 + $dd - Solar::int2($dd / 4);
    }
    // 向前移4年零2个月
    $a += 1524;
    $y = Solar::int2(($a - 122.1) / 365.25);
    // 去除整年日数后余下日数
    $dd = $a - Solar::int2(365.25 * $y);
    $m = (int)Solar::int2($dd / 30.6001);
    // 去除整月日数后余下日数
    $d = (int)Solar::int2($dd - Solar::int2($m * 30.6001));
    $y -= 4716;
    $m--;
    if ($m > 12) {
      $m -= 12;
    }
    if ($m <= 2) {
      $y++;
    }

    // 日的小数转为时分秒
    $f *= 24;
    $h = (int)Solar::int2($f);

    $f -= $h;
    $f *= 60;
    $mi = Solar::int2($f);

    $f -= $mi;
    $f *= 60;
    $s = Solar::int2($f);

    return Solar::fromYmdHms($y, $m, $d, $h, $mi, $s);
  }

  public static function fromYmd($year, $month, $day)
  {
    return new Solar($year, $month, $day, 0, 0, 0);
  }

  public static function fromYmdHms($year, $month, $day, $hour, $minute, $second)
  {
    return new Solar($year, $month, $day, $hour, $minute, $second);
  }

  public function toYmd()
  {
    $month = $this->month;
    $day = $this->day;
    return $this->year . '-' . ($month < 10 ? '0' : '') . $month . '-' . ($day < 10 ? '0' : '') . $day;
  }

  public function toYmdHms()
  {
    $hour = $this->hour;
    $minute = $this->minute;
    $second = $this->second;
    return $this->toYmd() . ' ' . ($hour < 10 ? '0' : '') . $hour . ':' . ($minute < 10 ? '0' : '') . $minute . ':' . ($second < 10 ? '0' : '') . $second;
  }

  public function toFullString()
  {
    $s = $this->toYmdHms();
    if ($this->isLeapYear()) {
      $s .= ' 闰年';
    }
    $s .= ' 星期' . $this->getWeekInChinese();
    foreach ($this->getFestivals() as $f) {
      $s .= ' (' . $f . ')';
    }
    $s .= ' ' . $this->getXingZuo() . '座';
    return $s;
  }

  public function getYear()
  {
    return $this->year;
  }

  public function getMonth()
  {
    return $this->month;
  }

  public function getDay()
  {
    return $this->day;
  }

  public function getHour()
  {
    return $this->hour;
  }

  public function getMinute()
  {
    return $this->minute;
  }

  public function getSecond()
  {
    return $this->second;
  }

  public function getCalendar()
  {
    return $this->calendar;
  }

  public function __toString()
  {
    return $this->toYmd();
  }

  public function isLeapYear()
  {
    return SolarUtil::isLeapYear($this->year);
  }

  public function getWeek()
  {
    return (int)$this->calendar->format('w');
  }

  public function getWeekInChinese()
  {
    return SolarUtil::$WEEK[$this->getWeek()];
  }

  public function getXingZuo()
  {
    $index = 11;
    $m = $this->month;
    $d = $this->day;
    $y = $m * 100 + $d;
    if ($y >= 321 && $y <= 419) {
      $index = 0;
    } else if ($y >= 420 && $y <= 520) {
      $index = 1;
    } else if ($y >= 521 && $y <= 620) {
      $index = 2;
    } else if ($y >= 621 && $y <= 722) {
      $index = 3;
    } else if ($y >= 723 && $y <= 822) {
      $index = 4;
    } else if ($y >= 823 && $y <= 922) {
      $index = 5;
    } else if ($y >= 923 && $y <= 1022) {
      $index = 6;
    } else if ($y >= 1023 && $y <= 1121) {
      $index = 7;
    } else if ($y >= 1122 && $y <= 1221) {
      $index = 8;
    } else if ($y >= 1222 || $y <= 119) {
      $index = 9;
    } else if ($y <= 218) {
      $index = 10;
    }
    return SolarUtil::$XING_ZUO[$index];
  }

  public function getFestivals()
  {
    $l = array();
    if (!empty(SolarUtil::$FESTIVAL[$this->month . '-' . $this->day])) {
      $l[] = SolarUtil::$FESTIVAL[$this->month . '-' . $this->day];
    }
    $week = $this->getWeek();
    $weekInMonth = ceil(($this->day - $week) / 7);
    if ($week > 0) {
      $weekInMonth++;
    }
    if (!empty(SolarUtil::$WEEK_FESTIVAL[$this->month . '-' . $weekInMonth . '-' . $week])) {
      $l[] = SolarUtil::$WEEK_FESTIVAL[$this->month . '-' . $weekInMonth . '-' . $week];
    }
    return $l;
  }

  public function getOtherFestivals()
  {
    $l = array();
    if (!empty(SolarUtil::$OTHER_FESTIVAL[$this->month . '-' . $this->day])) {
      $l[] = SolarUtil::$OTHER_FESTIVAL[$this->month . '-' . $this->day];
    }
    return $l;
  }

  /**
   * 获取往后推几天的阳历日期，如果要往前推，则天数用负数
   * @param int $days 天数
   * @return Solar|null
   */
  public function next($days)
  {
    if ($days == 0) {
      return Solar::fromYmdHms($this->year, $this->month, $this->day, $this->hour, $this->minute, $this->second);
    }
    try {
      $calendar = new DateTime($this->year . '-' . $this->month . '-' . $this->day . ' ' . $this->hour . ':' . $this->minute . ':' . $this->second);
    } catch (Exception $e) {
      return null;
    }
    $calendar->modify(($days > 0 ? '+' : '') . $days . ' day');
    return Solar::fromDate($calendar);
  }

}

/**
 * 农历日期
 * @package com\nlf\calendar
 */
class Lunar
{
  /**
   * 节气表，国标以冬至为首个节气
   * @var array
   */
  private static $JIE_QI = array('冬至', '小寒', '大寒', '立春', '雨水', '惊蛰', '春分', '清明', '谷雨', '立夏', '小满', '芒种', '夏至', '小暑', '大暑', '立秋', '处暑', '白露', '秋分', '寒露', '霜降', '立冬', '小雪', '大雪');

  /**
   * 黄经周期项
   * @var array
   */
  private static $E10 = array(1.75347045673, 0.00000000000, 0.0000000000, 0.03341656456, 4.66925680417, 6283.0758499914, 0.00034894275, 4.62610241759, 12566.1516999828, 0.00003417571, 2.82886579606, 3.5231183490, 0.00003497056, 2.74411800971, 5753.3848848968, 0.00003135896, 3.62767041758, 77713.7714681205, 0.00002676218, 4.41808351397, 7860.4193924392, 0.00002342687, 6.13516237631, 3930.2096962196, 0.00001273166, 2.03709655772, 529.6909650946, 0.00001324292, 0.74246356352, 11506.7697697936, 0.00000901855, 2.04505443513, 26.2983197998, 0.00001199167, 1.10962944315, 1577.3435424478, 0.00000857223, 3.50849156957, 398.1490034082, 0.00000779786, 1.17882652114, 5223.6939198022, 0.00000990250, 5.23268129594, 5884.9268465832, 0.00000753141, 2.53339053818, 5507.5532386674, 0.00000505264, 4.58292563052, 18849.2275499742, 0.00000492379, 4.20506639861, 775.5226113240, 0.00000356655, 2.91954116867, 0.0673103028, 0.00000284125, 1.89869034186, 796.2980068164, 0.00000242810, 0.34481140906, 5486.7778431750, 0.00000317087, 5.84901952218, 11790.6290886588, 0.00000271039, 0.31488607649, 10977.0788046990, 0.00000206160, 4.80646606059, 2544.3144198834, 0.00000205385, 1.86947813692, 5573.1428014331, 0.00000202261, 2.45767795458, 6069.7767545534, 0.00000126184, 1.08302630210, 20.7753954924, 0.00000155516, 0.83306073807, 213.2990954380, 0.00000115132, 0.64544911683, 0.9803210682, 0.00000102851, 0.63599846727, 4694.0029547076, 0.00000101724, 4.26679821365, 7.1135470008, 0.00000099206, 6.20992940258, 2146.1654164752, 0.00000132212, 3.41118275555, 2942.4634232916, 0.00000097607, 0.68101272270, 155.4203994342, 0.00000085128, 1.29870743025, 6275.9623029906, 0.00000074651, 1.75508916159, 5088.6288397668, 0.00000101895, 0.97569221824, 15720.8387848784, 0.00000084711, 3.67080093025, 71430.6956181291, 0.00000073547, 4.67926565481, 801.8209311238, 0.00000073874, 3.50319443167, 3154.6870848956, 0.00000078756, 3.03698313141, 12036.4607348882, 0.00000079637, 1.80791330700, 17260.1546546904, 0.00000085803, 5.98322631256, 161000.6857376741, 0.00000056963, 2.78430398043, 6286.5989683404, 0.00000061148, 1.81839811024, 7084.8967811152, 0.00000069627, 0.83297596966, 9437.7629348870, 0.00000056116, 4.38694880779, 14143.4952424306, 0.00000062449, 3.97763880587, 8827.3902698748, 0.00000051145, 0.28306864501, 5856.4776591154, 0.00000055577, 3.47006009062, 6279.5527316424, 0.00000041036, 5.36817351402, 8429.2412664666, 0.00000051605, 1.33282746983, 1748.0164130670, 0.00000051992, 0.18914945834, 12139.5535091068, 0.00000049000, 0.48735065033, 1194.4470102246, 0.00000039200, 6.16832995016, 10447.3878396044, 0.00000035566, 1.77597314691, 6812.7668150860, 0.00000036770, 6.04133859347, 10213.2855462110, 0.00000036596, 2.56955238628, 1059.3819301892, 0.00000033291, 0.59309499459, 17789.8456197850, 0.00000035954, 1.70876111898, 2352.8661537718);

  /**
   * 黄经泊松1项
   * @var array
   */
  private static $E11 = array(6283.31966747491, 0.00000000000, 0.0000000000, 0.00206058863, 2.67823455584, 6283.0758499914, 0.00004303430, 2.63512650414, 12566.1516999828, 0.00000425264, 1.59046980729, 3.5231183490, 0.00000108977, 2.96618001993, 1577.3435424478, 0.00000093478, 2.59212835365, 18849.2275499742, 0.00000119261, 5.79557487799, 26.2983197998, 0.00000072122, 1.13846158196, 529.6909650946, 0.00000067768, 1.87472304791, 398.1490034082, 0.00000067327, 4.40918235168, 5507.5532386674, 0.00000059027, 2.88797038460, 5223.6939198022, 0.00000055976, 2.17471680261, 155.4203994342, 0.00000045407, 0.39803079805, 796.2980068164, 0.00000036369, 0.46624739835, 775.5226113240, 0.00000028958, 2.64707383882, 7.1135470008, 0.00000019097, 1.84628332577, 5486.7778431750, 0.00000020844, 5.34138275149, 0.9803210682, 0.00000018508, 4.96855124577, 213.2990954380, 0.00000016233, 0.03216483047, 2544.3144198834, 0.00000017293, 2.99116864949, 6275.9623029906);

  /** 黄经泊松2项 */
  private static $E12 = array(0.00052918870, 0.00000000000, 0.0000000000, 0.00008719837, 1.07209665242, 6283.0758499914, 0.00000309125, 0.86728818832, 12566.1516999828, 0.00000027339, 0.05297871691, 3.5231183490, 0.00000016334, 5.18826691036, 26.2983197998, 0.00000015752, 3.68457889430, 155.4203994342, 0.00000009541, 0.75742297675, 18849.2275499742, 0.00000008937, 2.05705419118, 77713.7714681205, 0.00000006952, 0.82673305410, 775.5226113240, 0.00000005064, 4.66284525271, 1577.3435424478);
  private static $E13 = array(0.00000289226, 5.84384198723, 6283.0758499914, 0.00000034955, 0.00000000000, 0.0000000000, 0.00000016819, 5.48766912348, 12566.1516999828);
  private static $E14 = array(0.00000114084, 3.14159265359, 0.0000000000, 0.00000007717, 4.13446589358, 6283.0758499914, 0.00000000765, 3.83803776214, 12566.1516999828);
  private static $E15 = array(0.00000000878, 3.14159265359, 0.0000000000);
  /** 黄纬周期项 */
  private static $E20 = array(0.00000279620, 3.19870156017, 84334.6615813083, 0.00000101643, 5.42248619256, 5507.5532386674, 0.00000080445, 3.88013204458, 5223.6939198022, 0.00000043806, 3.70444689758, 2352.8661537718, 0.00000031933, 4.00026369781, 1577.3435424478, 0.00000022724, 3.98473831560, 1047.7473117547, 0.00000016392, 3.56456119782, 5856.4776591154, 0.00000018141, 4.98367470263, 6283.0758499914, 0.00000014443, 3.70275614914, 9437.7629348870, 0.00000014304, 3.41117857525, 10213.2855462110);
  private static $E21 = array(0.00000009030, 3.89729061890, 5507.5532386674, 0.00000006177, 1.73038850355, 5223.6939198022);
  /** 离心率 */
  private static $GXC_E = array(0.016708634, -0.000042037, -0.0000001267);
  /** 章动表 */
  private static $ZD = array(2.1824391966, -33.757045954, 0.0000362262, 3.7340E-08, -2.8793E-10, -171996, -1742, 92025, 89, 3.5069406862, 1256.663930738, 0.0000105845, 6.9813E-10, -2.2815E-10, -13187, -16, 5736, -31, 1.3375032491, 16799.418221925, -0.0000511866, 6.4626E-08, -5.3543E-10, -2274, -2, 977, -5, 4.3648783932, -67.514091907, 0.0000724525, 7.4681E-08, -5.7586E-10, 2062, 2, -895, 5, 0.0431251803, -628.301955171, 0.0000026820, 6.5935E-10, 5.5705E-11, -1426, 34, 54, -1, 2.3555557435, 8328.691425719, 0.0001545547, 2.5033E-07, -1.1863E-09, 712, 1, -7, 0, 3.4638155059, 1884.965885909, 0.0000079025, 3.8785E-11, -2.8386E-10, -517, 12, 224, -6, 5.4382493597, 16833.175267879, -0.0000874129, 2.7285E-08, -2.4750E-10, -386, -4, 200, 0, 3.6930589926, 25128.109647645, 0.0001033681, 3.1496E-07, -1.7218E-09, -301, 0, 129, -1, 3.5500658664, 628.361975567, 0.0000132664, 1.3575E-09, -1.7245E-10, 217, -5, -95, 3);

  private $year;

  private $month;

  private $day;

  private $hour;

  private $minute;

  private $second;

  /**
   * 对应阳历
   * @var Solar
   */
  private $solar;

  /**
   * 相对于基准日的偏移天数
   * @var int
   */
  private $dayOffset;

  /**
   * 时对应的天干下标，0-9
   * @var int
   */
  private $timeGanIndex;

  /**
   * 时对应的地支下标，0-11
   * @var int
   */
  private $timeZhiIndex;

  /**
   * 日对应的天干下标，0-9
   * @var int
   */
  private $dayGanIndex;

  /**
   * 日对应的天干下标（最精确的，供八字用，晚子时算第二天），0-9
   * @var int
   */
  private $dayGanIndexExact;

  /**
   * 日对应的地支下标，0-11
   * @var int
   */
  private $dayZhiIndex;

  /**
   * 日对应的地支下标（最精确的，供八字用，晚子时算第二天），0-9
   * @var int
   */
  private $dayZhiIndexExact;

  /**
   * 月对应的天干下标（以节交接当天起算），0-9
   * @var int
   */
  private $monthGanIndex;

  /**
   * 月对应的地支下标（以节交接当天起算），0-11
   * @var int
   */
  private $monthZhiIndex;

  /**
   * 月对应的天干下标（最精确的，供八字用，以节交接时刻起算），0-9
   * @var int
   */
  private $monthGanIndexExact;

  /**
   * 月对应的地支下标（最精确的，供八字用，以节交接时刻起算），0-11
   * @var int
   */
  private $monthZhiIndexExact;

  /**
   * 年对应的天干下标（国标，以正月初一为起点），0-9
   * @var int
   */
  private $yearGanIndex;

  /**
   * 年对应的地支下标（国标，以正月初一为起点），0-11
   * @var int
   */
  private $yearZhiIndex;

  /**
   * 年对应的天干下标（月干计算用，以立春为起点），0-9
   * @var int
   */
  private $yearGanIndexByLiChun;

  /**
   * 年对应的地支下标（月支计算用，以立春为起点），0-11
   * @var int
   */
  private $yearZhiIndexByLiChun;

  /**
   * 年对应的天干下标（最精确的，供八字用，以立春交接时刻为起点），0-9
   * @var int
   */
  private $yearGanIndexExact;

  /**
   * 年对应的地支下标（最精确的，供八字用，以立春交接时刻为起点），0-11
   * @var int
   */
  private $yearZhiIndexExact;

  /**
   * 周下标，0-6
   * @var int
   */
  private $weekIndex;

  /**
   * 24节气表（对应阳历的准确时刻）
   * @var array
   */
  private $jieQi = array();

  function __construct($year, $month, $day, $hour, $minute, $second)
  {
    $this->year = $year;
    $this->month = $month;
    $this->day = $day;
    $this->hour = $hour;
    $this->minute = $minute;
    $this->second = $second;
    $this->dayOffset = LunarUtil::computeAddDays($year, $month, $day);
    $this->solar = $this->toSolar();
    $this->compute();
  }

  /**
   * 转换为阳历日期
   * @return Solar|null
   */
  private function toSolar()
  {
    try {
      $date = new DateTime(SolarUtil::$BASE_YEAR . '-' . SolarUtil::$BASE_MONTH . '-' . SolarUtil::$BASE_DAY . ' ' . $this->hour . ':' . $this->minute . ':' . $this->second);
    } catch (Exception $e) {
      return null;
    }
    $date->modify($this->dayOffset . ' day');
    return Solar::fromDate($date);
  }

  /**
   * 通过指定农历年月日获取农历
   * @param int $year 年（农历）
   * @param int $month 月（农历），1到12，闰月为负，即闰2月=-2
   * @param int $day 日（农历），1到31
   * @return Lunar
   */
  public static function fromYmd($year, $month, $day)
  {
    return new Lunar($year, $month, $day, 0, 0, 0);
  }

  /**
   * 通过指定农历年月日时分秒获取农历
   * @param int $year 年（农历）
   * @param int $month 月（农历），1到12，闰月为负，即闰2月=-2
   * @param int $day 日（农历），1到31
   * @param int $hour 小时（阳历）
   * @param int $minute 分钟（阳历）
   * @param int $second 秒钟（阳历）
   * @return Lunar
   */
  public static function fromYmdHms($year, $month, $day, $hour, $minute, $second)
  {
    return new Lunar($year, $month, $day, $hour, $minute, $second);
  }

  /**
   * 通过阳历日期初始化
   * @param DateTime $date 阳历日期
   * @return Lunar
   */
  public static function fromDate($date)
  {
    $solar = Solar::fromDate($date);
    $y = $solar->getYear();
    $m = $solar->getMonth();
    $d = $solar->getDay();
    if ($y < 2000) {
      $startYear = SolarUtil::$BASE_YEAR;
      $startMonth = SolarUtil::$BASE_MONTH;
      $startDay = SolarUtil::$BASE_DAY;
      $lunarYear = LunarUtil::$BASE_YEAR;
      $lunarMonth = LunarUtil::$BASE_MONTH;
      $lunarDay = LunarUtil::$BASE_DAY;
    } else {
      $startYear = SolarUtil::$BASE_YEAR + 99;
      $startMonth = 1;
      $startDay = 1;
      $lunarYear = LunarUtil::$BASE_YEAR + 99;
      $lunarMonth = 11;
      $lunarDay = 25;
    }
    $diff = 0;
    for ($i = $startYear; $i < $y; $i++) {
      $diff += 365;
      if (SolarUtil::isLeapYear($i)) {
        $diff += 1;
      }
    }
    for ($i = $startMonth; $i < $m; $i++) {
      $diff += SolarUtil::getDaysOfMonth($y, $i);
    }
    $diff += $d - $startDay;
    $lunarDay += $diff;
    $lastDate = LunarUtil::getDaysOfMonth($lunarYear, $lunarMonth);
    while ($lunarDay > $lastDate) {
      $lunarDay -= $lastDate;
      $lunarMonth = LunarUtil::nextMonth($lunarYear, $lunarMonth);
      if ($lunarMonth == 1) {
        $lunarYear++;
      }
      $lastDate = LunarUtil::getDaysOfMonth($lunarYear, $lunarMonth);
    }
    return new Lunar($lunarYear, $lunarMonth, $lunarDay, $solar->getHour(), $solar->getMinute(), $solar->getSecond());
  }

  /**
   * 计算节气表（冬至的太阳黄经是-90度或270度）
   */
  private function computeJieQi()
  {
    //儒略日，冬至在阳历上一年，所以这里多减1年以从去年开始
    $jd = 365.2422 * ($this->solar->getYear() - 2001);
    for ($i = 0, $j = count(Lunar::$JIE_QI); $i < $j; $i++) {
      $t = doubleval(bcadd(bcadd($this->calJieQi($jd + $i * 15.2, $i * 15 - 90) . '', Solar::$J2000 . ''), bcdiv(8, 24)));
      $this->jieQi[Lunar::$JIE_QI[$i]] = Solar::fromJulianDay($t);
    }
  }

  /**
   * 计算干支纪年
   */
  private function computeYear()
  {
    $yearGanIndex = ($this->year + LunarUtil::$BASE_YEAR_GAN_ZHI_INDEX) % 10;
    $yearZhiIndex = ($this->year + LunarUtil::$BASE_YEAR_GAN_ZHI_INDEX) % 12;

    //以立春作为新一年的开始的干支纪年
    $g = $yearGanIndex;
    $z = $yearZhiIndex;

    //精确的干支纪年，以立春交接时刻为准
    $gExact = $yearGanIndex;
    $zExact = $yearZhiIndex;

    if ($this->year === $this->solar->getYear()) {
      //获取立春的阳历时刻
      $liChun = $this->jieQi['立春'];
      //立春日期判断
      if (strcmp($this->solar->toYmd(), $liChun->toYmd()) < 0) {
        $g--;
        if ($g < 0) {
          $g += 10;
        }
        $z--;
        if ($z < 0) {
          $z += 12;
        }
      }
      //立春交接时刻判断
      if (strcmp($this->solar->toYmdHms(), $liChun->toYmdHms()) < 0) {
        $gExact--;
        if ($gExact < 0) {
          $gExact += 10;
        }
        $zExact--;
        if ($zExact < 0) {
          $zExact += 12;
        }
      }
    }

    $this->yearGanIndex = $yearGanIndex;
    $this->yearZhiIndex = $yearZhiIndex;

    $this->yearGanIndexByLiChun = $g;
    $this->yearZhiIndexByLiChun = $z;

    $this->yearGanIndexExact = $gExact;
    $this->yearZhiIndexExact = $zExact;
  }

  /**
   * 干支纪月计算
   */
  private function computeMonth()
  {
    $start = null;
    //干偏移值（以立春当天起算）
    $gOffset = (($this->yearGanIndexByLiChun % 5 + 1) * 2) % 10;
    //干偏移值（以立春交接时刻起算）
    $gOffsetExact = (($this->yearGanIndexExact % 5 + 1) * 2) % 10;

    //序号：大雪到小寒之间-2，小寒到立春之间-1，立春之后0
    $index = -2;
    foreach (LunarUtil::$JIE as $jie) {
      $end = $this->jieQi[$jie];
      $ymd = $this->solar->toYmd();
      $symd = (null == $start) ? $ymd : $start->toYmd();
      $eymd = $end->toYmd();
      if (strcmp($ymd, $symd) >= 0 && strcmp($ymd, $eymd) < 0) {
        break;
      }
      $start = $end;
      $index++;
    }
    if ($index < 0) {
      $index += 12;
    }

    $this->monthGanIndex = ($index + $gOffset) % 10;
    $this->monthZhiIndex = ($index + LunarUtil::$BASE_MONTH_ZHI_INDEX) % 12;

    $start = null;
    //序号：大雪到小寒之间-2，小寒到立春之间-1，立春之后0
    $indexExact = -2;
    foreach (LunarUtil::$JIE as $jie) {
      $end = $this->jieQi[$jie];
      $time = $this->solar->toYmdHms();
      $stime = null == $start ? $time : $start->toYmdHms();
      $etime = $end->toYmdHms();
      if (strcmp($time, $stime) >= 0 && strcmp($time, $etime) < 0) {
        break;
      }
      $start = $end;
      $indexExact++;
    }
    if ($indexExact < 0) {
      $indexExact += 12;
    }
    $this->monthGanIndexExact = ($indexExact + $gOffsetExact) % 10;
    $this->monthZhiIndexExact = ($indexExact + LunarUtil::$BASE_MONTH_ZHI_INDEX) % 12;
  }

  /**
   * 干支纪日计算
   */
  private function computeDay()
  {
    $addDays = ($this->dayOffset + LunarUtil::$BASE_DAY_GAN_ZHI_INDEX) % 60;
    $dayGanIndex = $addDays % 10;
    $dayZhiIndex = $addDays % 12;

    $this->dayGanIndex = $dayGanIndex;
    $this->dayZhiIndex = $dayZhiIndex;

    $dayGanExact = $dayGanIndex;
    $dayZhiExact = $dayZhiIndex;

    // 晚子时（夜子/子夜）应算作第二天
    $hm = ($this->hour < 10 ? '0' : '') . $this->hour . ':' . ($this->minute < 10 ? '0' : '') . $this->minute;
    if (strcmp($hm, '23:00') >= 0 && strcmp($hm, '23:59') <= 0) {
      $dayGanExact++;
      if ($dayGanExact >= 10) {
        $dayGanExact -= 10;
      }
      $dayZhiExact++;
      if ($dayZhiExact >= 12) {
        $dayZhiExact -= 12;
      }
    }

    $this->dayGanIndexExact = $dayGanExact;
    $this->dayZhiIndexExact = $dayZhiExact;
  }

  /**
   * 干支纪时计算
   */
  private function computeTime()
  {
    $this->timeZhiIndex = LunarUtil::getTimeZhiIndex(($this->hour < 10 ? '0' : '') . $this->hour . ':' . ($this->minute < 10 ? '0' : '') . $this->minute);
    $this->timeGanIndex = ($this->dayGanIndexExact % 5 * 2 + $this->timeZhiIndex) % 10;
  }

  /**
   * 星期计算
   */
  private function computeWeek()
  {
    $this->weekIndex = ($this->dayOffset + LunarUtil::$BASE_WEEK_INDEX) % 7;
  }

  private function compute()
  {
    $this->computeJieQi();
    $this->computeYear();
    $this->computeMonth();
    $this->computeDay();
    $this->computeTime();
    $this->computeWeek();
  }

  public function getYear()
  {
    return $this->year;
  }

  public function getMonth()
  {
    return $this->month;
  }

  public function getDay()
  {
    return $this->day;
  }

  public function getHour()
  {
    return $this->hour;
  }

  public function getMinute()
  {
    return $this->minute;
  }

  public function getSecond()
  {
    return $this->second;
  }

  public function getSolar()
  {
    return $this->solar;
  }

  /**
   * 获取年份的天干（以正月初一作为新年的开始）
   * @return string 天干，如辛
   */
  public function getYearGan()
  {
    return LunarUtil::$GAN[$this->yearGanIndex + 1];
  }

  /**
   * 获取年份的天干（以立春当天作为新年的开始）
   *
   * @return string 天干，如辛
   */
  public function getYearGanByLiChun()
  {
    return LunarUtil::$GAN[$this->yearGanIndexByLiChun + 1];
  }

  /**
   * 获取最精确的年份天干（以立春交接的时刻作为新年的开始）
   *
   * @return string 天干，如辛
   */
  public function getYearGanExact()
  {
    return LunarUtil::$GAN[$this->yearGanIndexExact + 1];
  }

  /**
   * 获取年份的地支（以正月初一作为新年的开始）
   *
   * @return string 地支，如亥
   */
  public function getYearZhi()
  {
    return LunarUtil::$ZHI[$this->yearZhiIndex + 1];
  }

  /**
   * 获取年份的地支（以立春当天作为新年的开始）
   *
   * @return string 地支，如亥
   */
  public function getYearZhiByLiChun()
  {
    return LunarUtil::$ZHI[$this->yearZhiIndexByLiChun + 1];
  }

  /**
   * 获取最精确的年份地支（以立春交接的时刻作为新年的开始）
   *
   * @return string 地支，如亥
   */
  public function getYearZhiExact()
  {
    return LunarUtil::$ZHI[$this->yearZhiIndexExact + 1];
  }

  /**
   * 获取干支纪年（年柱）（以正月初一作为新年的开始）
   * @return string 年份的干支（年柱），如辛亥
   */
  public function getYearInGanZhi()
  {
    return $this->getYearGan() . $this->getYearZhi();
  }

  /**
   * 获取干支纪年（年柱）（以立春当天作为新年的开始）
   * @return string 年份的干支（年柱），如辛亥
   */
  public function getYearInGanZhiByLiChun()
  {
    return $this->getYearGanByLiChun() . $this->getYearZhiByLiChun();
  }

  /**
   * 获取干支纪年（年柱）（以立春交接的时刻作为新年的开始）
   * @return string 年份的干支（年柱），如辛亥
   */
  public function getYearInGanZhiExact()
  {
    return $this->getYearGanExact() . $this->getYearZhiExact();
  }

  /**
   * 获取干支纪月（月柱）（以节交接当天起算）
   * <p>月天干口诀：甲己丙寅首，乙庚戊寅头。丙辛从庚寅，丁壬壬寅求，戊癸甲寅居，周而复始流。</p>
   * <p>月地支：正月起寅</p>
   *
   * @return string 干支纪月（月柱），如己卯
   */
  public function getMonthInGanZhi()
  {
    return $this->getMonthGan() . $this->getMonthZhi();
  }

  /**
   * 获取精确的干支纪月（月柱）（以节交接时刻起算）
   * <p>月天干口诀：甲己丙寅首，乙庚戊寅头。丙辛从庚寅，丁壬壬寅求，戊癸甲寅居，周而复始流。</p>
   * <p>月地支：正月起寅</p>
   *
   * @return string 干支纪月（月柱），如己卯
   */
  public function getMonthInGanZhiExact()
  {
    return $this->getMonthGanExact() . $this->getMonthZhiExact();
  }

  /**
   * 获取月天干（以节交接当天起算）
   * @return string 月天干，如己
   */
  public function getMonthGan()
  {
    return LunarUtil::$GAN[$this->monthGanIndex + 1];
  }

  /**
   * 获取精确的月天干（以节交接时刻起算）
   * @return string 月天干，如己
   */
  public function getMonthGanExact()
  {
    return LunarUtil::$GAN[$this->monthGanIndexExact + 1];
  }

  /**
   * 获取月地支（以节交接当天起算）
   * @return string 月地支，如卯
   */
  public function getMonthZhi()
  {
    return LunarUtil::$ZHI[$this->monthZhiIndex + 1];
  }

  /**
   * 获取精确的月地支（以节交接时刻起算）
   * @return string 月地支，如卯
   */
  public function getMonthZhiExact()
  {
    return LunarUtil::$ZHI[$this->monthZhiIndexExact + 1];
  }

  /**
   * 获取干支纪日（日柱）
   *
   * @return string 干支纪日（日柱），如己卯
   */
  public function getDayInGanZhi()
  {
    return $this->getDayGan() . $this->getDayZhi();
  }

  /**
   * 获取干支纪日（日柱，晚子时算第二天）
   * @return string 干支纪日（日柱），如己卯
   */
  public function getDayInGanZhiExact()
  {
    return $this->getDayGanExact() . $this->getDayZhiExact();
  }

  /**
   * 获取日天干
   *
   * @return string 日天干，如甲
   */
  public function getDayGan()
  {
    return LunarUtil::$GAN[$this->dayGanIndex + 1];
  }

  /**
   * 获取日天干（晚子时算第二天）
   * @return string 日天干，如甲
   */
  public function getDayGanExact()
  {
    return LunarUtil::$GAN[$this->dayGanIndexExact + 1];
  }

  /**
   * 获取日地支
   *
   * @return string 日地支，如卯
   */
  public function getDayZhi()
  {
    return LunarUtil::$ZHI[$this->dayZhiIndex + 1];
  }

  /**
   * 获取日地支（晚子时算第二天）
   * @return string 日地支，如卯
   */
  public function getDayZhiExact()
  {
    return LunarUtil::$ZHI[$this->dayZhiIndexExact + 1];
  }

  /**
   * 获取年生肖（以正月初一起算）
   *
   * @return string 年生肖，如虎
   */
  public function getYearShengXiao()
  {
    return LunarUtil::$SHENG_XIAO[$this->yearZhiIndex + 1];
  }

  /**
   * 获取年生肖（以立春当天起算）
   *
   * @return string 年生肖，如虎
   */
  public function getYearShengXiaoByLiChun()
  {
    return LunarUtil::$SHENG_XIAO[$this->yearZhiIndexByLiChun + 1];
  }

  /**
   * 获取精确的年生肖（以立春交接时刻起算）
   *
   * @return string 年生肖，如虎
   */
  public function getYearShengXiaoExact()
  {
    return LunarUtil::$SHENG_XIAO[$this->yearZhiIndexExact + 1];
  }

  /**
   * 获取月生肖
   *
   * @return string 月生肖，如虎
   */
  public function getMonthShengXiao()
  {
    return LunarUtil::$SHENG_XIAO[$this->monthZhiIndex + 1];
  }

  /**
   * 获取日生肖
   *
   * @return string 日生肖，如虎
   */
  public function getDayShengXiao()
  {
    return LunarUtil::$SHENG_XIAO[$this->dayZhiIndex + 1];
  }

  /**
   * 获取时辰生肖
   *
   * @return string 时辰生肖，如虎
   */
  public function getTimeShengXiao()
  {
    return LunarUtil::$SHENG_XIAO[$this->timeZhiIndex + 1];
  }

  /**
   * 获取中文的年
   *
   * @return string 中文年，如二零零一
   */
  public function getYearInChinese()
  {
    $y = ($this->year . '');
    $s = '';
    for ($i = 0, $j = strlen($y); $i < $j; $i++) {
      $s .= LunarUtil::$NUMBER[ord(substr($y, $i, 1)) - 48];
    }
    return $s;
  }

  /**
   * 获取中文的月
   *
   * @return string 中文月，如正
   */
  public function getMonthInChinese()
  {
    return ($this->month < 0 ? '闰' : '') . LunarUtil::$MONTH[abs($this->month)];
  }

  /**
   * 获取中文日
   *
   * @return string 中文日，如初一
   */
  public function getDayInChinese()
  {
    return LunarUtil::$DAY[$this->day];
  }

  /**
   * 获取时辰（地支）
   * @return string 时辰（地支）
   */
  public function getTimeZhi()
  {
    return LunarUtil::$ZHI[$this->timeZhiIndex + 1];
  }

  /**
   * 获取时辰（天干）
   * @return string 时辰（天干）
   */
  public function getTimeGan()
  {
    return LunarUtil::$GAN[$this->timeGanIndex + 1];
  }

  /**
   * 获取时辰干支（时柱）
   * @return string 时辰干支（时柱）
   */
  public function getTimeInGanZhi()
  {
    return $this->getTimeGan() . $this->getTimeZhi();
  }

  /**
   * 获取季节
   * @return string 农历季节
   */
  public function getSeason()
  {
    return LunarUtil::$SEASON[abs($this->month)];
  }

  private function mrad($rad)
  {
    $pi2 = bcmul(2, pi());
    $rad = bcmod($rad, $pi2);
    return $rad < 0 ? bcadd($rad, $pi2) : $rad;
  }

  private function gxc($t, $pos)
  {
    $pi = pi();
    $degreePerRad = bcdiv(180, $pi);
    $secondPerRad = bcdiv(180 * 3600, $pi);
    /** 近点 */
    $gxcp = array(bcdiv(102.93735, $degreePerRad), bcdiv(1.71946, $degreePerRad), bcdiv(0.00046, $degreePerRad));
    /** 太平黄经 */
    $gxcl = array(bcdiv(280.4664567, $degreePerRad), bcdiv(36000.76982779, $degreePerRad), bcdiv(0.0003032028, $degreePerRad), bcdiv(bcdiv(1, 49931000), $degreePerRad), bcdiv(bcdiv(-1, 153000000), $degreePerRad));
    /** 光行差常数 */
    $gxck = bcdiv(20.49552, $secondPerRad);
    $t1 = bcdiv($t, 36525);
    $t2 = bcmul($t1, $t1);
    $t3 = bcmul($t2, $t1);
    $t4 = bcmul($t3, $t1);

    $a1 = bcmul($this->str($gxcl[1]), $t1);
    $a2 = bcmul($this->str($gxcl[2]), $t2);
    $a3 = bcmul($this->str($gxcl[3]), $t3);
    $a4 = bcmul($this->str($gxcl[4]), $t4);

    $l = $gxcl[0];
    $l = bcadd($l, $a1);
    $l = bcadd($l, $a2);
    $l = bcadd($l, $a3);
    $l = bcadd($l, $a4);

    $p1 = bcmul($this->str($gxcp[1]), $t1);
    $p2 = bcmul($this->str($gxcp[2]), $t2);

    $p = $gxcp[0];
    $p = bcadd($p, $p1);
    $p = bcadd($p, $p2);

    $e1 = bcmul($this->str(Lunar::$GXC_E[1]), $t1);
    $e2 = bcmul($this->str(Lunar::$GXC_E[2]), $t2);

    $e = Lunar::$GXC_E[0];
    $e = bcadd($e, $e1);
    $e = bcadd($e, $e2);

    $dl = bcsub($l, $pos[0]);
    $dp = bcsub($p, $pos[0]);

    $cose = bcsub(cos($dl), bcmul($e, cos($dp)));
    $sine = bcsub(sin($dl), bcmul($e, sin($dp)));

    $pos[0] = bcsub($pos[0], bcdiv(bcmul($gxck, $cose), $this->str(cos($pos[1]))));

    $gsin = bcmul($gxck, $this->str(sin($pos[1])));

    $pos[1] = bcsub($pos[1], bcmul($gsin, $sine));
    $pos[0] = $this->mrad($pos[0]);
  }

  private function enn($f, $ennt)
  {
    $v = 0;
    for ($i = 0, $j = count($f); $i < $j; $i += 3) {
      $cos = cos(bcadd($f[$i + 1], bcmul($ennt, $f[$i + 2])));
      $v = bcadd($v, bcmul($this->str($f[$i]), $cos));
    }
    return $v;
  }

  /**
   * 计算日心坐标中地球的位置
   * @param double $t 儒略日
   * @return array 地球坐标
   */
  private function calEarth($t)
  {
    $t1 = bcdiv($t, '365250');
    $r = array(2);
    $t2 = bcmul($t1, $t1);
    $t3 = bcmul($t2, $t1);
    $t4 = bcmul($t3, $t1);
    $t5 = bcmul($t4, $t1);
    $r[0] = $this->mrad($this->enn(Lunar::$E10, $t1) + $this->enn(Lunar::$E11, $t1) * $t1 + $this->enn(Lunar::$E12, $t1) * $t2 + $this->enn(Lunar::$E13, $t1) * $t3 + $this->enn(Lunar::$E14, $t1) * $t4 + $this->enn(Lunar::$E15, $t1) * $t5);
    $r[1] = bcadd($this->enn(Lunar::$E20, $t1), bcmul($this->enn(Lunar::$E21, $t1), $t1));
    return $r;
  }

  private function str($num)
  {
    if (false !== stripos($num, 'e')) {
      $a = explode('e', strtolower($num));
      return bcmul($a[0], bcpow(10, $a[1]));
    } else {
      return $num . '';
    }
  }

  /**
   * 计算黄经章动
   * @param double $t J2000起算儒略日数
   * @return double 黄经章动
   */
  private function hjzd($t)
  {
    $lon = 0;
    $t1 = bcdiv($t, '36525');
    $t2 = bcmul($t1, $t1);
    $t3 = bcmul($t2, $t1);
    $t4 = bcmul($t3, $t1);
    for ($i = 0, $j = count(Lunar::$ZD); $i < $j; $i += 9) {
      $a1 = bcmul($this->str(Lunar::$ZD[$i + 1]), $t1);
      $a2 = bcmul($this->str(Lunar::$ZD[$i + 2]), $t2);
      $a3 = bcmul($this->str(Lunar::$ZD[$i + 3]), $t3);
      $a4 = bcmul($this->str(Lunar::$ZD[$i + 4]), $t4);

      $c = bcadd(Lunar::$ZD[$i], $a1);
      $c = bcadd($c, $a2);
      $c = bcadd($c, $a3);
      $c = bcadd($c, $a4);

      $a6 = bcmul($this->str(Lunar::$ZD[$i + 6]), $t1);
      $lon = bcadd($lon, bcmul(bcadd($this->str(Lunar::$ZD[$i + 5]), bcdiv($a6, 10)), sin($c)));
    }
    $lon = bcdiv($lon, bcdiv(180 * 3600 * 10000, pi()));
    return $lon;
  }

  /**
   * 地心坐标中的日月位置计算（计算t时刻太阳黄经与角度的差）
   * @param double $t J2000起算儒略日数
   * @param double $rad 弧度
   * @return double 角度差
   */
  private function calRad($t, $rad)
  {
    // 计算太阳真位置(先算出日心坐标中地球的位置)
    $pos = $this->calEarth($t);
    $pos[0] = bcadd($pos[0], pi());
    // 转为地心坐标
    $pos[1] = bcsub(0, $pos[1]);
    // 补周年光行差
    $this->gxc($t, $pos);
    // 补黄经章动
    $pos[0] = bcadd($pos[0], $this->hjzd($t));
    return $this->mrad(bcsub($rad, $pos[0]));
  }

  /**
   * 太阳黄经达某角度的时刻计算(用于节气计算)
   * @param double $t1 J2000起算儒略日数
   * @param double $degree 角度
   * @return double 时刻
   */
  private function calJieQi($t1, $degree)
  {
    // 对于节气计算,应满足t在t1到t1+360天之间,对于Y年第n个节气(n=0是春分),t1可取值Y*365.2422+n*15.2
    $pi = pi();
    $t2 = $t1;
    $t = 0;;
    // 在t1到t2范围内求解(范气360天范围),结果置于t
    $t2 += 360;
    // 待搜索目标角
    $rad = bcdiv(bcmul($degree, $pi), 180);
    // 利用截弦法计算
    // v1,v2为t1,t2时对应的黄经
    $v1 = $this->calRad($t1, $rad);
    $v2 = $this->calRad($t2, $rad);
    // 减2pi作用是将周期性角度转为连续角度
    if ($v1 < $v2) {
      $v2 = bcsub($v2, bcmul(2, $pi));
    }
    // k是截弦的斜率
    $k = 1;
    // 快速截弦求根,通常截弦三四次就已达所需精度
    for ($i = 0; $i < 10; $i++) {
      // 算出斜率
      $k2 = bcdiv(bcsub($v2, $v1), bcsub($t2, $t1));
      // 差商可能为零,应排除
      if (abs($k2) > 1e-15) {
        $k = $k2;
      }
      $t = bcsub($t1, bcdiv($v1, $k));
      // 直线逼近法求根(直线方程的根)
      $v = $this->calRad($t, $rad);
      // 一次逼近后,v1就已接近0,如果很大,则应减1周
      if ($v > 1) {
        $v = bcsub($v, bcmul(2, $pi));
      }
      // 已达精度
      if (abs($v) < 1e-8) {
        break;
      }
      $t1 = $t2;
      $v1 = $v2;
      $t2 = $t;
      // 下一次截弦
      $v2 = $v;
    }
    return $t;
  }

  /**
   * 获取节
   *
   * @return string 节
   */
  public function getJie()
  {
    foreach (LunarUtil::$JIE as $jie) {
      $d = $this->jieQi[$jie];
      if ($d->getYear() === $this->solar->getYear() && $d->getMonth() === $this->solar->getMonth() && $d->getDay() === $this->solar->getDay()) {
        return $jie;
      }
    }
    return '';
  }

  /**
   * 获取气
   *
   * @return string 气
   */
  public function getQi()
  {
    foreach (LunarUtil::$QI as $qi) {
      $d = $this->jieQi[$qi];
      if ($d->getYear() === $this->solar->getYear() && $d->getMonth() === $this->solar->getMonth() && $d->getDay() === $this->solar->getDay()) {
        return $qi;
      }
    }
    return '';
  }

  /**
   * 获取星期，0代表周日，1代表周一
   *
   * @return int 0123456
   */
  public function getWeek()
  {
    return $this->weekIndex;
  }

  /**
   * 获取星期的中文
   *
   * @return string 日一二三四五六
   */
  public function getWeekInChinese()
  {
    return SolarUtil::$WEEK[$this->getWeek()];
  }

  /**
   * 获取宿
   *
   * @return string 宿
   */
  public function getXiu()
  {
    return LunarUtil::$XIU[$this->getDayZhi() . $this->getWeek()];
  }

  /**
   * 获取宿吉凶
   *
   * @return string 吉/凶
   */
  public function getXiuLuck()
  {
    return LunarUtil::$XIU_LUCK[$this->getXiu()];
  }

  /**
   * 获取宿歌诀
   *
   * @return string 宿歌诀
   */
  public function getXiuSong()
  {
    return LunarUtil::$XIU_SONG[$this->getXiu()];
  }

  /**
   * 获取政
   *
   * @return string 政
   */
  public function getZheng()
  {
    return LunarUtil::$ZHENG[$this->getXiu()];
  }

  /**
   * 获取动物
   * @return string 动物
   */
  public function getAnimal()
  {
    return LunarUtil::$ANIMAL[$this->getXiu()];
  }

  /**
   * 获取宫
   * @return string 宫
   */
  public function getGong()
  {
    return LunarUtil::$GONG[$this->getXiu()];
  }

  /**
   * 获取兽
   * @return string 兽
   */
  public function getShou()
  {
    return LunarUtil::$SHOU[$this->getGong()];
  }

  /**
   * 获取节日，有可能一天会有多个节日
   *
   * @return array 节日列表，如春节
   */
  public function getFestivals()
  {
    $l = array();
    if (!empty(LunarUtil::$FESTIVAL[$this->month . '-' . $this->day])) {
      $l[] = LunarUtil::$FESTIVAL[$this->month . '-' . $this->day];
    }
    return $l;
  }

  /**
   * 获取非正式的节日，有可能一天会有多个节日
   *
   * @return array 非正式的节日列表，如中元节
   */
  public function getOtherFestivals()
  {
    $l = array();
    if (!empty(LunarUtil::$OTHER_FESTIVAL[$this->month . '-' . $this->day])) {
      $l[] = LunarUtil::$OTHER_FESTIVAL[$this->month . '-' . $this->day];
    }
    return $l;
  }

  /**
   * 获取彭祖百忌天干
   * @return string 彭祖百忌天干
   */
  public function getPengZuGan()
  {
    return LunarUtil::$PENG_ZU_GAN[$this->dayGanIndex + 1];
  }

  /**
   * 获取彭祖百忌地支
   * @return string 彭祖百忌地支
   */
  public function getPengZuZhi()
  {
    return LunarUtil::$PENG_ZU_ZHI[$this->dayZhiIndex + 1];
  }

  /**
   * 获取喜神方位
   * @return string 喜神方位，如艮
   */
  public function getPositionXi()
  {
    return LunarUtil::$POSITION_XI[$this->dayGanIndex + 1];
  }

  /**
   * 获取喜神方位描述
   * @return string 喜神方位描述，如东北
   */
  public function getPositionXiDesc()
  {
    return LunarUtil::$POSITION_DESC[$this->getPositionXi()];
  }

  /**
   * 获取阳贵神方位
   * @return string 阳贵神方位，如艮
   */
  public function getPositionYangGui()
  {
    return LunarUtil::$POSITION_YANG_GUI[$this->dayGanIndex + 1];
  }

  /**
   * 获取阳贵神方位描述
   * @return string 阳贵神方位描述，如东北
   */
  public function getPositionYangGuiDesc()
  {
    return LunarUtil::$POSITION_DESC[$this->getPositionYangGui()];
  }

  /**
   * 获取阴贵神方位
   * @return string 阴贵神方位，如艮
   */
  public function getPositionYinGui()
  {
    return LunarUtil::$POSITION_YIN_GUI[$this->dayGanIndex + 1];
  }

  /**
   * 获取阴贵神方位描述
   * @return string 阴贵神方位描述，如东北
   */
  public function getPositionYinGuiDesc()
  {
    return LunarUtil::$POSITION_DESC[$this->getPositionYinGui()];
  }

  /**
   * 获取福神方位
   * @return string 福神方位，如艮
   */
  public function getPositionFu()
  {
    return LunarUtil::$POSITION_FU[$this->dayGanIndex + 1];
  }

  /**
   * 获取福神方位描述
   * @return string 福神方位描述，如东北
   */
  public function getPositionFuDesc()
  {
    return LunarUtil::$POSITION_DESC[$this->getPositionFu()];
  }

  /**
   * 获取财神方位
   * @return string 财神方位，如艮
   */
  public function getPositionCai()
  {
    return LunarUtil::$POSITION_CAI[$this->dayGanIndex + 1];
  }

  /**
   * 获取财神方位描述
   * @return string 财神方位描述，如东北
   */
  public function getPositionCaiDesc()
  {
    return LunarUtil::$POSITION_DESC[$this->getPositionCai()];
  }

  /**
   * 获取冲
   * @return string 冲，如申
   */
  public function getChong()
  {
    return $this->getDayChong();
  }

  /**
   * 获取日冲
   * @return string 日冲，如申
   */
  public function getDayChong()
  {
    return LunarUtil::$CHONG[$this->dayZhiIndex + 1];
  }

  /**
   * 获取时冲
   * @return string 时冲，如申
   */
  public function getTimeChong()
  {
    return LunarUtil::$CHONG[$this->timeZhiIndex + 1];
  }

  /**
   * 获取无情之克的冲天干
   * @return string 无情之克的冲天干，如甲
   */
  public function getChongGan()
  {
    return $this->getDayChongGan();
  }

  /**
   * 获取无情之克的日冲天干
   * @return string 无情之克的日冲天干，如甲
   */
  public function getDayChongGan()
  {
    return LunarUtil::$CHONG_GAN[$this->dayGanIndex + 1];
  }

  /**
   * 获取无情之克的时冲天干
   * @return string 无情之克的时冲天干，如甲
   */
  public function getTimeChongGan()
  {
    return LunarUtil::$CHONG_GAN[$this->timeGanIndex + 1];
  }

  /**
   * 获取有情之克的冲天干
   * @return string 有情之克的冲天干，如甲
   */
  public function getChongGanTie()
  {
    return $this->getDayChongGanTie();
  }

  /**
   * 获取有情之克的日冲天干
   * @return string 有情之克的日冲天干，如甲
   */
  public function getDayChongGanTie()
  {
    return LunarUtil::$CHONG_GAN_TIE[$this->dayGanIndex + 1];
  }

  /**
   * 获取有情之克的时冲天干
   * @return string 有情之克的时冲天干，如甲
   */
  public function getTimeChongGanTie()
  {
    return LunarUtil::$CHONG_GAN_TIE[$this->timeGanIndex + 1];
  }

  /**
   * 获取冲生肖
   * @return string 冲生肖，如猴
   */
  public function getChongShengXiao()
  {
    return $this->getDayChongShengXiao();
  }

  /**
   * 获取日冲生肖
   * @return string 日冲生肖，如猴
   */
  public function getDayChongShengXiao()
  {
    $chong = $this->getDayChong();
    for ($i = 0, $j = count(LunarUtil::$ZHI); $i < $j; $i++) {
      if (strcmp(LunarUtil::$ZHI[$i], $chong) === 0) {
        return LunarUtil::$SHENG_XIAO[$i];
      }
    }
    return '';
  }

  /**
   * 获取时冲生肖
   * @return string 时冲生肖，如猴
   */
  public function getTimeChongShengXiao()
  {
    $chong = $this->getTimeChong();
    for ($i = 0, $j = count(LunarUtil::$ZHI); $i < $j; $i++) {
      if (strcmp(LunarUtil::$ZHI[$i], $chong) === 0) {
        return LunarUtil::$SHENG_XIAO[$i];
      }
    }
    return '';
  }

  /**
   * 获取冲描述
   * @return string 冲描述，如(壬申)猴
   */
  public function getChongDesc()
  {
    return $this->getDayChongDesc();
  }

  /**
   * 获取日冲描述
   * @return string 日冲描述，如(壬申)猴
   */
  public function getDayChongDesc()
  {
    return '(' . $this->getDayChongGan() . $this->getDayChong() . ')' . $this->getDayChongShengXiao();
  }

  /**
   * 获取时冲描述
   * @return string 时冲描述，如(壬申)猴
   */
  public function getTimeChongDesc()
  {
    return '(' . $this->getTimeChongGan() . $this->getTimeChong() . ')' . $this->getTimeChongShengXiao();
  }

  /**
   * 获取煞
   * @return string 煞，如北
   */
  public function getSha()
  {
    return $this->getDaySha();
  }

  /**
   * 获取日煞
   * @return string 日煞，如北
   */
  public function getDaySha()
  {
    return LunarUtil::$SHA[$this->getDayZhi()];
  }

  /**
   * 获取时煞
   * @return string 时煞，如北
   */
  public function getTimeSha()
  {
    return LunarUtil::$SHA[$this->getTimeZhi()];
  }

  /**
   * 获取年纳音
   * @return string 年纳音，如剑锋金
   */
  public function getYearNaYin()
  {
    return LunarUtil::$NAYIN[$this->getYearInGanZhi()];
  }

  /**
   * 获取月纳音
   * @return string 月纳音，如剑锋金
   */
  public function getMonthNaYin()
  {
    return LunarUtil::$NAYIN[$this->getMonthInGanZhi()];
  }

  /**
   * 获取日纳音
   * @return string 日纳音，如剑锋金
   */
  public function getDayNaYin()
  {
    return LunarUtil::$NAYIN[$this->getDayInGanZhi()];
  }

  /**
   * 获取时辰纳音
   * @return string 时辰纳音，如剑锋金
   */
  public function getTimeNaYin()
  {
    return LunarUtil::$NAYIN[$this->getTimeInGanZhi()];
  }

  /**
   * 获取八字，男性也称乾造，女性也称坤造（以立春交接时刻作为新年的开始）
   * @return array 八字（男性也称乾造，女性也称坤造）
   */
  public function getBaZi()
  {
    $l = array(4);
    $l[] = $this->getYearInGanZhiExact();
    $l[] = $this->getMonthInGanZhiExact();
    $l[] = $this->getDayInGanZhiExact();
    $l[] = $this->getTimeInGanZhi();
    return $l;
  }

  /**
   * 获取八字五行
   * @return array 八字五行
   */
  public function getBaZiWuXing()
  {
    $baZi = $this->getBaZi();
    $l = array(count($baZi));
    foreach ($baZi as $ganZhi) {
      $gan = substr($ganZhi, 0, 1);
      $zhi = substr($ganZhi, 1);
      $l[] = LunarUtil::$WU_XING_GAN[$gan] . LunarUtil::$WU_XING_ZHI[$zhi];
    }
    return $l;
  }

  /**
   * 获取八字纳音
   * @return array 八字纳音
   */
  public function getBaZiNaYin()
  {
    $baZi = $this->getBaZi();
    $l = array(count($baZi));
    foreach ($baZi as $ganZhi) {
      $l[] = LunarUtil::$NAYIN[$ganZhi];
    }
    return $l;
  }

  /**
   * 获取八字天干十神，日柱十神为日主，其余三柱根据天干十神表查询
   * @return array 八字天干十神
   */
  public function getBaZiShiShenGan()
  {
    $baZi = $this->getBaZi();
    $yearGan = substr($baZi[0], 0, 1);
    $monthGan = substr($baZi[1], 0, 1);
    $dayGan = substr($baZi[2], 0, 1);
    $timeGan = substr($baZi[3], 0, 1);
    $l = array(count($baZi));
    $l[] = LunarUtil::$SHI_SHEN_GAN[$dayGan . $yearGan];
    $l[] = LunarUtil::$SHI_SHEN_GAN[$dayGan . $monthGan];
    $l[] = '日主';
    $l[] = LunarUtil::$SHI_SHEN_GAN[$dayGan . $timeGan];
    return $l;
  }

  /**
   * 获取八字地支十神，根据地支十神表查询
   * @return array 八字地支十神
   */
  public function getBaZiShiShenZhi()
  {
    $baZi = $this->getBaZi();
    $dayGan = substr($baZi[2], 0, 1);
    $l = array(count($baZi));
    foreach ($baZi as $ganZhi) {
      $zhi = substr($ganZhi, 1);
      $l[] = LunarUtil::$SHI_SHEN_ZHI[$dayGan . $zhi . LunarUtil::$ZHI_HIDE_GAN[$zhi][0]];
    }
    return $l;
  }

  /**
   * 获取十二执星：建、除、满、平、定、执、破、危、成、收、开、闭。当月支与日支相同即为建，依次类推
   * @return string 执星
   */
  public function getZhiXing()
  {
    $offset = $this->dayZhiIndex - $this->monthZhiIndex;
    if ($offset < 0) {
      $offset += 12;
    }
    return LunarUtil::$ZHI_XING[$offset + 1];
  }

  /**
   * 获取值日天神
   * @return string 值日天神
   */
  public function getDayTianShen()
  {
    $monthZhi = $this->getMonthZhi();
    $offset = LunarUtil::$ZHI_TIAN_SHEN_OFFSET[$monthZhi];
    return LunarUtil::$TIAN_SHEN[($this->dayZhiIndex + $offset) % 12 + 1];
  }

  /**
   * 获取值时天神
   * @return string 值时天神
   */
  public function getTimeTianShen()
  {
    $dayZhi = $this->getDayZhiExact();
    $offset = LunarUtil::$ZHI_TIAN_SHEN_OFFSET[$dayZhi];
    return LunarUtil::$TIAN_SHEN[($this->timeZhiIndex + $offset) % 12 + 1];
  }

  /**
   * 获取值日天神类型：黄道/黑道
   * @return string 值日天神类型：黄道/黑道
   */
  public function getDayTianShenType()
  {
    return LunarUtil::$TIAN_SHEN_TYPE[$this->getDayTianShen()];
  }

  /**
   * 获取值时天神类型：黄道/黑道
   * @return string 值时天神类型：黄道/黑道
   */
  public function getTimeTianShenType()
  {
    return LunarUtil::$TIAN_SHEN_TYPE[$this->getTimeTianShen()];
  }

  /**
   * 获取值日天神吉凶
   * @return string 吉/凶
   */
  public function getDayTianShenLuck()
  {
    return LunarUtil::$TIAN_SHEN_TYPE_LUCK[$this->getDayTianShenType()];
  }

  /**
   * 获取值时天神吉凶
   * @return string 吉/凶
   */
  public function getTimeTianShenLuck()
  {
    return LunarUtil::$TIAN_SHEN_TYPE_LUCK[$this->getTimeTianShenType()];
  }

  /**
   * 获取逐日胎神方位
   * @return string 逐日胎神方位
   */
  public function getDayPositionTai()
  {
    $offset = $this->dayGanIndex - $this->dayZhiIndex;
    if ($offset < 0) {
      $offset += 12;
    }
    return LunarUtil::$POSITION_TAI_DAY[$offset * 5 + $this->dayGanIndex];
  }

  /**
   * 获取逐月胎神方位，闰月无
   * @return string 逐月胎神方位
   */
  public function getMonthPositionTai()
  {
    if ($this->month < 0) {
      return '';
    }
    return LunarUtil::$POSITION_TAI_MONTH[$this->month - 1];
  }

  /**
   * 获取每日宜
   * @return array 宜
   */
  public function getDayYi()
  {
    return LunarUtil::getDayYi($this->getMonthInGanZhiExact(), $this->getDayInGanZhi());
  }

  /**
   * 获取时宜
   * @return array 宜
   */
  public function getTimeYi()
  {
    return LunarUtil::getTimeYi($this->getDayInGanZhiExact(), $this->getTimeInGanZhi());
  }

  /**
   * 获取每日忌
   * @return array 忌
   */
  public function getDayJi()
  {
    return LunarUtil::getDayJi($this->getMonthInGanZhiExact(), $this->getDayInGanZhi());
  }

  /**
   * 获取时忌
   * @return array 忌
   */
  public function getTimeJi()
  {
    return LunarUtil::getTimeJi($this->getDayInGanZhiExact(), $this->getTimeInGanZhi());
  }

  /**
   * 获取日吉神（宜趋），如果没有，返回['无']
   * @return array 吉神
   */
  public function getDayJiShen()
  {
    return LunarUtil::getDayJiShen($this->getMonth(), $this->getDayInGanZhi());
  }

  /**
   * 获取日凶煞（宜忌），如果没有，返回['无']
   * @return array 凶煞
   */
  public function getDayXiongSha()
  {
    return LunarUtil::getDayXiongSha($this->getMonth(), $this->getDayInGanZhi());
  }

  /**
   * 获取月相
   * @return string 月相
   */
  public function getYueXiang()
  {
    return LunarUtil::$YUE_XIANG[$this->getDay()];
  }

  /**
   * 获取值年九星（流年紫白星起例歌诀：年上吉星论甲子，逐年星逆中宫起；上中下作三元汇，一上四中七下兑。）
   * @return NineStar 值年九星
   */
  public function getYearNineStar()
  {
    $index = LunarUtil::$BASE_YEAR_JIU_XING_INDEX - ($this->getYear() - LunarUtil::$BASE_YEAR) % 9;
    if ($index < 0) {
      $index += 9;
    }
    return new NineStar($index);
  }

  /**
   * 获取值月九星（月紫白星歌诀：子午卯酉八白起，寅申巳亥二黑求，辰戌丑未五黄中。）
   * @return NineStar 值月九星
   */
  public function getMonthNineStar()
  {
    $start = 2;
    $yearZhi = $this->getYearZhi();
    if (strpos('子午卯酉', $yearZhi)!==false) {
      $start = 8;
    } else if (strpos('辰戌丑未', $yearZhi)!==false) {
      $start = 5;
    }
    // 寅月起，所以需要-2
    $monthIndex = $this->monthZhiIndex - 2;
    $index = $start - $monthIndex - 1;
    if ($index < 0) {
      $index += 9;
    }
    return new NineStar($index);
  }

  /**
   * 获取值日九星（日家紫白星歌诀：日家白法不难求，二十四气六宫周；冬至雨水及谷雨，阳顺一七四中游；夏至处暑霜降后，九三六星逆行求。）
   * @return NineStar 值日九星
   */
  public function getDayNineStar()
  {
    //顺逆
    $solarYmd = $this->solar->toYmd();
    $yuShui = $this->jieQi['雨水']->toYmd();
    $guYu = $this->jieQi['谷雨']->toYmd();
    $xiaZhi = $this->jieQi['夏至']->toYmd();
    $chuShu = $this->jieQi['处暑']->toYmd();
    $shuangJiang = $this->jieQi['霜降']->toYmd();

    $start = 6;
    $asc = false;
    if (strcmp($solarYmd, $this->jieQi['冬至']->toYmd()) >= 0 && strcmp($solarYmd, $yuShui) < 0) {
      $asc = true;
      $start = 1;
    } else if (strcmp($solarYmd, $yuShui) >= 0 && strcmp($solarYmd, $guYu) < 0) {
      $asc = true;
      $start = 7;
    } else if (strcmp($solarYmd, $guYu) >= 0 && strcmp($solarYmd, $xiaZhi) < 0) {
      $asc = true;
      $start = 4;
    } else if (strcmp($solarYmd, $xiaZhi) >= 0 && strcmp($solarYmd, $chuShu) < 0) {
      $start = 9;
    } else if (strcmp($solarYmd, $chuShu) >= 0 && strcmp($solarYmd, $shuangJiang) < 0) {
      $start = 3;
    }
    $ganZhiIndex = LunarUtil::getJiaZiIndex($this->getDayInGanZhi()) % 9;
    $index = $asc ? $start + $ganZhiIndex - 1 : $start - $ganZhiIndex - 1;
    if ($index > 8) {
      $index -= 9;
    }
    if ($index < 0) {
      $index += 9;
    }
    return new NineStar($index);
  }

  /**
   * 获取值时九星（时家紫白星歌诀：三元时白最为佳，冬至阳生顺莫差，孟日七宫仲一白，季日四绿发萌芽，每把时辰起甲子，本时星耀照光华，时星移入中宫去，顺飞八方逐细查。夏至阴生逆回首，孟归三碧季加六，仲在九宫时起甲，依然掌中逆轮跨。）
   * @return NineStar 值时九星
   */
  public function getTimeNineStar()
  {
    //顺逆
    $solarYmd = $this->solar->toYmd();
    $asc = false;
    if (strcmp($solarYmd, $this->jieQi['冬至']->toYmd()) >= 0 && strcmp($solarYmd, $this->jieQi['夏至']->toYmd()) < 0) {
      $asc = true;
    }
    $start = $asc ? 7 : 3;
    $dayZhi = $this->getDayZhi();
    if (strpos('子午卯酉', $dayZhi)!==false) {
      $start = $asc ? 1 : 9;
    } else if (strpos('辰戌丑未', $dayZhi)!==false) {
      $start = $asc ? 4 : 6;
    }
    $index = $asc ? $start + $this->timeZhiIndex - 1 : $start - $this->timeZhiIndex - 1;
    if ($index > 8) {
      $index -= 9;
    }
    if ($index < 0) {
      $index += 9;
    }
    return new NineStar($index);
  }

  /**
   * 获取节气表（节气名称:阳历），节气交接时刻精确到秒，以冬至开头，按先后顺序排列
   * @return array 节气表
   */
  public function getJieQiTable()
  {
    return $this->jieQi;
  }

  public function toFullString()
  {
    $s = '';
    $s .= $this;
    $s .= ' ';
    $s .= $this->getYearInGanZhi();
    $s .= '(';
    $s .= $this->getYearShengXiao();
    $s .= ')年 ';
    $s .= $this->getMonthInGanZhi();
    $s .= '(';
    $s .= $this->getMonthShengXiao();
    $s .= ')月 ';
    $s .= $this->getDayInGanZhi();
    $s .= '(';
    $s .= $this->getDayShengXiao();
    $s .= ')日 ';
    $s .= $this->getTimeZhi();
    $s .= '(';
    $s .= $this->getTimeShengXiao();
    $s .= ')时 纳音[';
    $s .= $this->getYearNaYin();
    $s .= ' ';
    $s .= $this->getMonthNaYin();
    $s .= ' ';
    $s .= $this->getDayNaYin();
    $s .= ' ';
    $s .= $this->getTimeNaYin();
    $s .= '] 星期';
    $s .= $this->getWeekInChinese();
    foreach ($this->getFestivals() as $f) {
      $s .= ' (' . $f . ')';
    }
    foreach ($this->getOtherFestivals() as $f) {
      $s .= ' (' . $f . ')';
    }
    $jq = $this->getJie() . $this->getQi();
    if (strlen($jq) > 0) {
      $s .= ' (' . $jq . ')';
    }
    $s .= ' ';
    $s .= $this->getGong();
    $s .= '方';
    $s .= $this->getShou();
    $s .= ' 星宿[';
    $s .= $this->getXiu();
    $s .= $this->getZheng();
    $s .= $this->getAnimal();
    $s .= '](';
    $s .= $this->getXiuLuck();
    $s .= ') 彭祖百忌[';
    $s .= $this->getPengZuGan();
    $s .= ' ';
    $s .= $this->getPengZuZhi();
    $s .= '] 喜神方位[';
    $s .= $this->getPositionXi();
    $s .= '](';
    $s .= $this->getPositionXiDesc();
    $s .= ') 阳贵神方位[';
    $s .= $this->getPositionYangGui();
    $s .= '](';
    $s .= $this->getPositionYangGuiDesc();
    $s .= ') 阴贵神方位[';
    $s .= $this->getPositionYinGui();
    $s .= '](';
    $s .= $this->getPositionYinGuiDesc();
    $s .= ') 福神方位[';
    $s .= $this->getPositionFu();
    $s .= '](';
    $s .= $this->getPositionFuDesc();
    $s .= ') 财神方位[';
    $s .= $this->getPositionCai();
    $s .= '](';
    $s .= $this->getPositionCaiDesc();
    $s .= ') 冲[';
    $s .= $this->getChongDesc();
    $s .= '] 煞[';
    $s .= $this->getSha();
    $s .= ']';
    return $s;
  }

  public function __toString()
  {
    return $this->getYearInChinese() . '年' . $this->getMonthInChinese() . '月' . $this->getDayInChinese();
  }

}

/**
 * 阳历周
 * @package com\nlf\calendar
 */
class SolarWeek
{

  /**
   * 年
   * @var int
   */
  private $year;

  /**
   * 月
   * @var int
   */
  private $month;

  /**
   * 日
   * @var int
   */
  private $day;

  /**
   * 星期几作为一周的开始，1234560分别代表星期一至星期天
   * @var int
   */
  private $start;

  function __construct($year, $month, $day, $start)
  {
    $this->year = $year;
    $this->month = $month;
    $this->day = $day;
    $this->start = $start;
  }

  public function __toString()
  {
    return $this->year . '.' . $this->month . '.' . $this->getIndex();
  }

  public function toFullString()
  {
    return $this->year . '年' . $this->month . '月第' . $this->getIndex() . '周';
  }

  /**
   * 通过指定年月日获取阳历周
   * @param int $year 年
   * @param int $month 月，1到12
   * @param int $day 日，1到31
   * @param int $start 星期几作为一周的开始，1234560分别代表星期一至星期天
   * @return SolarWeek
   */
  public static function fromYmd($year, $month, $day, $start)
  {
    return new SolarWeek($year, $month, $day, $start);
  }

  /**
   * 通过指定日期获取阳历周
   * @param DateTime $date 日期DateTime
   * @param int $start 星期几作为一周的开始，1234560分别代表星期一至星期天
   * @return SolarWeek
   */
  public static function fromDate($date, $start)
  {
    $year = (int)date_format($date, 'Y');
    $month = (int)date_format($date, 'n');
    $day = (int)date_format($date, 'j');
    return new SolarWeek($year, $month, $day, $start);
  }

  public function getYear()
  {
    return $this->year;
  }

  public function getMonth()
  {
    return $this->month;
  }

  public function getDay()
  {
    return $this->day;
  }

  public function getStart()
  {
    return $this->start;
  }

  /**
   * 获取当前日期是在当月第几周
   * @return int
   */
  public function getIndex()
  {
    $firstDayWeek = (int)date('w', strtotime($this->year . '-' . $this->month . '-1'));
    if ($firstDayWeek === 0) {
      $firstDayWeek = 7;
    }
    return ceil(($this->day + $firstDayWeek - $this->start) / 7);
  }

  /**
   * 周推移
   * @param int $weeks 推移的周数，负数为倒推
   * @param bool $separateMonth 是否按月单独计算
   * @return SolarWeek|null
   */
  public function next($weeks, $separateMonth)
  {
    if (0 === $weeks) {
      return SolarWeek::fromYmd($this->year, $this->month, $this->day, $this->start);
    }
    if ($separateMonth) {
      $n = $weeks;
      try {
        $date = new DateTime($this->year . '-' . $this->month . '-' . $this->day);
      } catch (Exception $e) {
        return null;
      }
      $week = SolarWeek::fromDate($date, $this->start);
      $month = $this->month;
      $plus = $n > 0;
      while (0 !== $n) {
        $date->modify(($plus ? 7 : -7) . ' day');
        $week = SolarWeek::fromDate($date, $this->start);
        $weekMonth = $week->getMonth();
        if ($month !== $weekMonth) {
          $index = $week->getIndex();
          if ($plus) {
            if (1 === $index) {
              $firstDay = $week->getFirstDay();
              $week = SolarWeek::fromYmd($firstDay->getYear(), $firstDay->getMonth(), $firstDay->getDay(), $this->start);
              $weekMonth = $week->getMonth();
            } else {
              try {
                $date = new DateTime($week->year . '-' . $week->month . '-1');
              } catch (Exception $e) {
                return null;
              }
              $week = SolarWeek::fromDate($date, $this->start);
            }
          } else {
            $size = SolarUtil::getWeeksOfMonth($week->getYear(), $week->getMonth(), $week->getStart());
            if ($size === $index) {
              $lastDay = $week->getFirstDay()->next(6);
              $week = SolarWeek::fromYmd($lastDay->getYear(), $lastDay->getMonth(), $lastDay->getDay(), $this->start);
              $weekMonth = $week->getMonth();
            } else {
              try {
                $date = new DateTime($this->year . '-' . $this->month . '-' . SolarUtil::getDaysOfMonth($week->getYear(), $week->getMonth()));
              } catch (Exception $e) {
                return null;
              }
              $week = SolarWeek::fromDate($date, $this->start);
            }
          }
          $month = $weekMonth;
        }
        $n -= $plus ? 1 : -1;
      }
      return $week;
    } else {
      try {
        $date = new DateTime($this->year . '-' . $this->month . '-' . $this->day);
      } catch (Exception $e) {
        return null;
      }
      $date->modify(($weeks * 7) . ' day');
      return SolarWeek::fromDate($date, $this->start);
    }
  }

  /**
   * 获取本周第一天的阳历日期（可能跨月）
   * @return Solar|null
   */
  public function getFirstDay()
  {
    try {
      $date = new DateTime($this->year . '-' . $this->month . '-' . $this->day);
    } catch (Exception $e) {
      return null;
    }
    $week = (int)$date->format('w');
    $prev = $week - $this->start;
    if ($prev < 0) {
      $prev += 7;
    }
    $date->modify(-$prev . ' day');
    return Solar::fromDate($date);
  }

  /**
   * 获取本周第一天的阳历日期（仅限当月）
   * @return Solar|null
   */
  public function getFirstDayInMonth()
  {
    $days = $this->getDays();
    foreach ($days as $day) {
      if ($this->month === $day->getMonth()) {
        return $day;
      }
    }
    return null;
  }

  /**
   * 获取本周的阳历日期列表（可能跨月）
   * @return array
   */
  public function getDays()
  {
    $firstDay = $this->getFirstDay();
    $l = array();
    if (null == $firstDay) {
      return $l;
    }
    $l[] = $firstDay;
    for ($i = 1; $i < 7; $i++) {
      $l[] = $firstDay->next($i);
    }
    return $l;
  }

  /**
   * 获取本周的阳历日期列表（仅限当月）
   * @return array
   */
  public function getDaysInMonth()
  {
    $days = $this->getDays();
    $l = array();
    foreach ($days as $day) {
      if ($this->month !== $day->getMonth()) {
        continue;
      }
      $l[] = $day;
    }
    return $l;
  }

}

/**
 * 阳历月
 * @package com\nlf\calendar
 */
class SolarMonth
{

  /**
   * 年
   * @var int
   */
  private $year;

  /**
   * 月
   * @var int
   */
  private $month;

  function __construct($year, $month)
  {
    $this->year = $year;
    $this->month = $month;
  }

  public function __toString()
  {
    return $this->year . '-' . $this->month;
  }

  public function toFullString()
  {
    return $this->year . '年' . $this->month . '月';
  }

  /**
   * 通过指定年月获取阳历月
   * @param int $year 年
   * @param int $month 月，1到12
   * @return SolarMonth
   */
  public static function fromYm($year, $month)
  {
    return new SolarMonth($year, $month);
  }

  /**
   * 通过指定日期获取阳历月
   * @param DateTime $date 日期DateTime
   * @return SolarMonth
   */
  public static function fromDate($date)
  {
    $year = (int)date_format($date, 'Y');
    $month = (int)date_format($date, 'n');
    return new SolarMonth($year, $month);
  }

  public function getYear()
  {
    return $this->year;
  }

  public function getMonth()
  {
    return $this->month;
  }

  /**
   * 获取本月的阳历日期列表
   * @return array
   */
  public function getDays()
  {
    $l = array();
    $d = Solar::fromYmd($this->year, $this->month, 1);
    $l[] = $d;
    $days = SolarUtil::getDaysOfMonth($this->year, $this->month);
    for ($i = 1; $i < $days; $i++) {
      $l[] = $d->next($i);
    }
    return $l;
  }

  /**
   * 获取往后推几个月的阳历月，如果要往前推，则月数用负数
   * @param int $months 月数
   * @return SolarMonth|null
   */
  public function next($months)
  {
    try {
      $date = new DateTime($this->year . '-' . $this->month . '-1');
    } catch (Exception $e) {
      return null;
    }
    $date->modify($months . ' month');
    return SolarMonth::fromDate($date);
  }
}

/**
 * 阳历季度
 * @package com\nlf\calendar
 */
class SolarSeason
{

  /**
   * 年
   * @var int
   */
  private $year;

  /**
   * 月
   * @var int
   */
  private $month;

  /**
   * 一个季度的月数
   * @var int
   */
  public static $MONTH_COUNT = 3;

  function __construct($year, $month)
  {
    $this->year = $year;
    $this->month = $month;
  }

  public function __toString()
  {
    return $this->year . '.' . $this->getIndex();
  }

  public function toFullString()
  {
    return $this->year . '年' . $this->getIndex() . '季度';
  }

  /**
   * 通过指定年月获取阳历季度
   * @param int $year 年
   * @param int $month 月，1到12
   * @return SolarSeason
   */
  public static function fromYm($year, $month)
  {
    return new SolarSeason($year, $month);
  }

  /**
   * 通过指定日期获取阳历季度
   * @param DateTime $date 日期DateTime
   * @return SolarSeason
   */
  public static function fromDate($date)
  {
    $year = (int)date_format($date, 'Y');
    $month = (int)date_format($date, 'n');
    return new SolarSeason($year, $month);
  }

  public function getYear()
  {
    return $this->year;
  }

  public function getMonth()
  {
    return $this->month;
  }

  /**
   * 获取当月是第几季度，从1开始
   * @return int
   */
  public function getIndex()
  {
    return (int)ceil($this->month / SolarSeason::$MONTH_COUNT);
  }

  /**
   * 获取本季度的月份
   * @return array
   */
  public function getMonths()
  {
    $l = array();
    $index = $this->getIndex() - 1;
    for ($i = 0; $i < SolarSeason::$MONTH_COUNT; $i++) {
      $l[] = new SolarMonth($this->year, SolarSeason::$MONTH_COUNT * $index + $i + 1);
    }
    return $l;
  }

  /**
   * 季度推移
   * @param int $seasons 推移的季度数，负数为倒推
   * @return SolarSeason|null
   */
  public function next($seasons)
  {
    if (0 === $seasons) {
      return new SolarSeason($this->year, $this->month);
    }
    try {
      $date = new DateTime($this->year . '-' . $this->month . '-1');
    } catch (Exception $e) {
      return null;
    }
    $date->modify((SolarSeason::$MONTH_COUNT * $seasons) . ' month');
    return SolarSeason::fromDate($date);
  }

}

/**
 * 阳历半年
 * @package com\nlf\calendar
 */
class SolarHalfYear
{
  /**
   * 年
   * @var int
   */
  private $year;

  /**
   * 月
   * @var int
   */
  private $month;

  /**
   * 一个半年的月数
   * @var int
   */
  public static $MONTH_COUNT = 6;

  function __construct($year, $month)
  {
    $this->year = $year;
    $this->month = $month;
  }

  public function __toString()
  {
    return $this->year . '.' . $this->getIndex();
  }

  public function toFullString()
  {
    return $this->year . '年' . (1 === $this->getIndex() ? '上' : '下') . '半年';
  }

  /**
   * 通过指定年月获取阳历半年
   * @param int $year 年
   * @param int $month 月，1到12
   * @return SolarHalfYear
   */
  public static function fromYm($year, $month)
  {
    return new SolarHalfYear($year, $month);
  }

  /**
   * 通过指定日期获取阳历半年
   * @param DateTime $date 日期DateTime
   * @return SolarHalfYear
   */
  public static function fromDate($date)
  {
    $year = (int)date_format($date, 'Y');
    $month = (int)date_format($date, 'n');
    return new SolarHalfYear($year, $month);
  }

  public function getYear()
  {
    return $this->year;
  }

  public function getMonth()
  {
    return $this->month;
  }

  /**
   * 获取当月是第几半年，从1开始
   * @return int
   */
  public function getIndex()
  {
    return (int)ceil($this->month / SolarHalfYear::$MONTH_COUNT);
  }

  /**
   * 获取本半年的月份
   * @return array
   */
  public function getMonths()
  {
    $l = array();
    $index = $this->getIndex() - 1;
    for ($i = 0; $i < SolarHalfYear::$MONTH_COUNT; $i++) {
      $l[] = new SolarHalfYear($this->year, SolarHalfYear::$MONTH_COUNT * $index + $i + 1);
    }
    return $l;
  }

  /**
   * 半年推移
   * @param int $halfYears 推移的半年数，负数为倒推
   * @return SolarHalfYear|null
   */
  public function next($halfYears)
  {
    if (0 === $halfYears) {
      return new SolarHalfYear($this->year, $this->month);
    }
    try {
      $date = new DateTime($this->year . '-' . $this->month . '-1');
    } catch (Exception $e) {
      return null;
    }
    $date->modify((SolarHalfYear::$MONTH_COUNT * $halfYears) . ' month');
    return SolarHalfYear::fromDate($date);
  }
}

/**
 * 阳历年
 * @package com\nlf\calendar
 */
class SolarYear
{
  /**
   * 年
   * @var int
   */
  private $year;

  /**
   * 一年的月数
   * @var int
   */
  public static $MONTH_COUNT = 12;

  function __construct($year)
  {
    $this->year = $year;
  }

  public function __toString()
  {
    return $this->year . '';
  }

  public function toFullString()
  {
    return $this->year . '年';
  }

  /**
   * 通过指定年获取阳历年
   * @param int $year 年
   * @return SolarYear
   */
  public static function fromYear($year)
  {
    return new SolarYear($year);
  }

  /**
   * 通过指定日期获取阳历年
   * @param DateTime $date 日期DateTime
   * @return SolarYear
   */
  public static function fromDate($date)
  {
    $year = (int)date_format($date, 'Y');
    return new SolarYear($year);
  }

  public function getYear()
  {
    return $this->year;
  }

  /**
   * 获取本年的月份
   * @return array
   */
  public function getMonths()
  {
    $l = array();
    $month = SolarMonth::fromYm($this->year, 1);
    $l[] = $month;
    for ($i = 1; $i < SolarYear::$MONTH_COUNT; $i++) {
      $l[] = $month->next($i);
    }
    return $l;
  }

  /**
   * 年推移
   * @param int $years 推移的年数，负数为倒推
   * @return SolarYear|null
   */
  public function next($years)
  {
    if (0 === $years) {
      return new SolarYear($this->year);
    }
    try {
      $date = new DateTime($this->year . '-1-1');
    } catch (Exception $e) {
      return null;
    }
    $date->modify($years . ' year');
    return SolarYear::fromDate($date);
  }
}

/**
 * 节假日
 * @package com\nlf\calendar
 */
class Holiday
{

  /**
   * 日期，YYYY-MM-DD格式
   * @var string
   */
  private $day;

  /**
   * 名称，如：国庆
   * @var string
   */
  private $name;

  /**
   * 是否调休，即是否要上班
   * @var bool
   */
  private $work = false;

  /**
   * 关联的节日，YYYY-MM-DD格式
   * @var string
   */
  private $target;

  function __construct($day, $name, $work, $target)
  {
    if (strpos($day, '-')) {
      $this->day = $day;
    } else {
      $this->day = substr($day, 0, 4) . '-' . substr($day, 4, 2) . '-' . substr($day, 6);
    }
    $this->name = $name;
    $this->work = $work;
    if (strpos($day, '-')) {
      $this->target = $target;
    } else {
      $this->target = substr($target, 0, 4) . '-' . substr($target, 4, 2) . '-' . substr($target, 6);
    }
  }

  public function setDay($day)
  {
    $this->day = $day;
  }

  public function setName($name)
  {
    $this->name = $name;
  }

  public function setWork($work)
  {
    $this->work = $work;
  }

  public function setTarget($target)
  {
    $this->target = $target;
  }

  public function getDay()
  {
    return $this->day;
  }

  public function getName()
  {
    return $this->name;
  }

  public function isWork()
  {
    return $this->work;
  }

  public function getTarget()
  {
    return $this->target;
  }

  public function __toString()
  {
    return $this->day . ' ' . $this->name . ($this->work ? '调休' : '') . ' ' . $this->target;
  }
}

/**
 * 九星
 * @package com\nlf\calendar
 */
class NineStar
{
  /**
   * 序号
   * @var int
   */
  private $index;

  /**
   * 九数
   * @var array
   */
  public static $NUMBER = array('一', '二', '三', '四', '五', '六', '七', '八', '九');

  /**
   * 七色
   * @var array
   */
  public static $COLOR = array('白', '黒', '碧', '绿', '黄', '白', '赤', '白', '紫');

  /**
   * 五行
   * @var array
   */
  public static $WU_XING = array('水', '土', '木', '木', '土', '金', '金', '土', '火');

  /**
   * 后天八卦方位
   * @var array
   */
  public static $POSITION = array('坎', '坤', '震', '巽', '中', '乾', '兑', '艮', '离');

  /**
   * 北斗九星
   * @var array
   */
  public static $NAME_BEI_DOU = array('天枢', '天璇', '天玑', '天权', '玉衡', '开阳', '摇光', '洞明', '隐元');

  /**
   * 玄空九星（玄空风水）
   * @var array
   */
  public static $NAME_XUAN_KONG = array('贪狼', '巨门', '禄存', '文曲', '廉贞', '武曲', '破军', '左辅', '右弼');

  /**
   * 奇门九星（奇门遁甲，也称天盘九星）
   * @var array
   */
  public static $NAME_QI_MEN = array('天蓬', '天芮', '天冲', '天辅', '天禽', '天心', '天柱', '天任', '天英');

  /**
   * 八门（奇门遁甲）
   * @var array
   */
  public static $BA_MEN_QI_MEN = array('休', '死', '伤', '杜', '', '开', '惊', '生', '景');

  /**
   * 太乙九神（太乙神数）
   * @var array
   */
  public static $NAME_TAI_YI = array('太乙', '摄提', '轩辕', '招摇', '天符', '青龙', '咸池', '太阴', '天乙');

  /**
   * 太乙九神对应类型
   * @var array
   */
  public static $TYPE_TAI_YI = array('吉神', '凶神', '安神', '安神', '凶神', '吉神', '凶神', '吉神', '吉神');

  /**
   * 太乙九神歌诀（太乙神数）
   * @var array
   */
  public static $SONG_TAI_YI = array('门中太乙明，星官号贪狼，赌彩财喜旺，婚姻大吉昌，出入无阻挡，参谒见贤良，此行三五里，黑衣别阴阳。', '门前见摄提，百事必忧疑，相生犹自可，相克祸必临，死门并相会，老妇哭悲啼，求谋并吉事，尽皆不相宜，只可藏隐遁，若动伤身疾。', '出入会轩辕，凡事必缠牵，相生全不美，相克更忧煎，远行多不利，博彩尽输钱，九天玄女法，句句不虚言。', '招摇号木星，当之事莫行，相克行人阻，阴人口舌迎，梦寐多惊惧，屋响斧自鸣，阴阳消息理，万法弗违情。', '五鬼为天符，当门阴女谋，相克无好事，行路阻中途，走失难寻觅，道逢有尼姑，此星当门值，万事有灾除。', '神光跃青龙，财气喜重重，投入有酒食，赌彩最兴隆，更逢相生旺，休言克破凶，见贵安营寨，万事总吉同。', '吾将为咸池，当之尽不宜，出入多不利，相克有灾情，赌彩全输尽，求财空手回，仙人真妙语，愚人莫与知，动用虚惊退，反复逆风吹。', '坐临太阴星，百祸不相侵，求谋悉成就，知交有觅寻，回风归来路，恐有殃伏起，密语中记取，慎乎莫轻行。', '迎来天乙星，相逢百事兴，运用和合庆，茶酒喜相迎，求谋并嫁娶，好合有天成，祸福如神验，吉凶甚分明。');

  /**
   * 吉凶（玄空风水）
   * @var array
   */
  public static $LUCK_XUAN_KONG = array('吉', '凶', '凶', '吉', '凶', '吉', '凶', '吉', '吉');

  /**
   * 吉凶（奇门遁甲）
   * @var array
   */
  public static $LUCK_QI_MEN = array('大凶', '大凶', '小吉', '大吉', '大吉', '大吉', '小凶', '小吉', '小凶');

  /**
   * 阴阳（奇门遁甲）
   * @var array
   */
  public static $YIN_YANG_QI_MEN = array('阳', '阴', '阳', '阳', '阳', '阴', '阴', '阳', '阴');

  function __construct($index)
  {
    $this->index = $index;
  }

  /**
   * 获取九数
   * @return string 九数
   */
  public function getNumber()
  {
    return NineStar::$NUMBER[$this->index];
  }

  /**
   * 获取七色
   * @return string 七色
   */
  public function getColor()
  {
    return NineStar::$COLOR[$this->index];
  }

  /**
   * 获取五行
   * @return string 五行
   */
  public function getWuXing()
  {
    return NineStar::$WU_XING[$this->index];
  }


  /**
   * 获取方位
   * @return string 方位
   */
  public function getPosition()
  {
    return NineStar::$POSITION[$this->index];
  }

  /**
   * 获取方位描述
   * @return string 方位描述
   */
  public function getPositionDesc()
  {
    return LunarUtil::$POSITION_DESC [$this->getPosition()];
  }

  /**
   * 获取玄空九星名称
   * @return string 玄空九星名称
   */
  public function getNameInXuanKong()
  {
    return NineStar::$NAME_XUAN_KONG[$this->index];
  }

  /**
   * 获取北斗九星名称
   * @return string 北斗九星名称
   */
  public function getNameInBeiDou()
  {
    return NineStar::$NAME_BEI_DOU[$this->index];
  }

  /**
   * 获取奇门九星名称
   * @return string 奇门九星名称
   */
  public function getNameInQiMen()
  {
    return NineStar::$NAME_QI_MEN[$this->index];
  }

  /**
   * 获取太乙九神名称
   * @return string 太乙九神名称
   */
  public function getNameInTaiYi()
  {
    return NineStar::$NAME_TAI_YI[$this->index];
  }

  /**
   * 获取奇门九星吉凶
   * @return string 大吉/小吉/大凶/小凶
   */
  public function getLuckInQiMen()
  {
    return NineStar::$LUCK_QI_MEN[$this->index];
  }

  /**
   * 获取玄空九星吉凶
   * @return string 吉/凶
   */
  public function getLuckInXuanKong()
  {
    return NineStar::$LUCK_XUAN_KONG[$this->index];
  }

  /**
   * 获取奇门九星阴阳
   * @return string 阴/阳
   */
  public function getYinYangInQiMen()
  {
    return NineStar::$YIN_YANG_QI_MEN[$this->index];
  }

  /**
   * 获取太乙九神类型
   * @return string 吉神/凶神/安神
   */
  public function getTypeInTaiYi()
  {
    return NineStar::$TYPE_TAI_YI[$this->index];
  }

  /**
   * 获取八门（奇门遁甲）
   * @return string 八门
   */
  public function getBaMenInQiMen()
  {
    return NineStar::$BA_MEN_QI_MEN[$this->index];
  }

  /**
   * 获取太乙九神歌诀
   * @return string 太乙九神歌诀
   */
  public function getSongInTaiYi()
  {
    return NineStar::$SONG_TAI_YI[$this->index];
  }

  /**
   * 获取九星序号，从0开始
   * @return int 序号
   */
  public function getIndex()
  {
    return $this->index;
  }

  public function __toString()
  {
    return $this->getNumber() . $this->getColor() . $this->getWuXing() . $this->getNameInBeiDou();
  }

  public function toFullString()
  {
    $s = '';
    $s .= $this->getNumber();
    $s .= $this->getColor();
    $s .= $this->getWuXing();
    $s .= ' ';
    $s .= $this->getPosition();
    $s .= '(';
    $s .= $this->getPositionDesc();
    $s .= ') ';
    $s .= $this->getNameInBeiDou();
    $s .= ' 玄空[';
    $s .= $this->getNameInXuanKong();
    $s .= ' ';
    $s .= $this->getLuckInXuanKong();
    $s .= '] 奇门[';
    $s .= $this->getNameInQiMen();
    $s .= ' ';
    $s .= $this->getLuckInQiMen();
    if (strlen($this->getBaMenInQiMen()) > 0) {
      $s .= ' ';
      $s .= $this->getBaMenInQiMen();
      $s .= '门';
    }
    $s .= ' ';
    $s .= $this->getYinYangInQiMen();
    $s .= '] 太乙[';
    $s .= $this->getNameInTaiYi();
    $s .= ' ';
    $s .= $this->getTypeInTaiYi();
    $s .= ']';
    return $s;
  }
}
